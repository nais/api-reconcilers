// Code generated by mockery. DO NOT EDIT.

package grafana_mock_access_control

import (
	access_control "github.com/grafana/grafana-openapi-client-go/client/access_control"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// AddTeamRole provides a mock function with given fields: teamID, body, opts
func (_m *MockClientService) AddTeamRole(teamID int64, body *models.AddTeamRoleCommand, opts ...access_control.ClientOption) (*access_control.AddTeamRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamRole")
	}

	var r0 *access_control.AddTeamRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.AddTeamRoleCommand, ...access_control.ClientOption) (*access_control.AddTeamRoleOK, error)); ok {
		return rf(teamID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.AddTeamRoleCommand, ...access_control.ClientOption) *access_control.AddTeamRoleOK); ok {
		r0 = rf(teamID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.AddTeamRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.AddTeamRoleCommand, ...access_control.ClientOption) error); ok {
		r1 = rf(teamID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AddTeamRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamRole'
type MockClientService_AddTeamRole_Call struct {
	*mock.Call
}

// AddTeamRole is a helper method to define mock.On call
//   - teamID int64
//   - body *models.AddTeamRoleCommand
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) AddTeamRole(teamID interface{}, body interface{}, opts ...interface{}) *MockClientService_AddTeamRole_Call {
	return &MockClientService_AddTeamRole_Call{Call: _e.mock.On("AddTeamRole",
		append([]interface{}{teamID, body}, opts...)...)}
}

func (_c *MockClientService_AddTeamRole_Call) Run(run func(teamID int64, body *models.AddTeamRoleCommand, opts ...access_control.ClientOption)) *MockClientService_AddTeamRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.AddTeamRoleCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AddTeamRole_Call) Return(_a0 *access_control.AddTeamRoleOK, _a1 error) *MockClientService_AddTeamRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AddTeamRole_Call) RunAndReturn(run func(int64, *models.AddTeamRoleCommand, ...access_control.ClientOption) (*access_control.AddTeamRoleOK, error)) *MockClientService_AddTeamRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamRoleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AddTeamRoleWithParams(params *access_control.AddTeamRoleParams, opts ...access_control.ClientOption) (*access_control.AddTeamRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamRoleWithParams")
	}

	var r0 *access_control.AddTeamRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.AddTeamRoleParams, ...access_control.ClientOption) (*access_control.AddTeamRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.AddTeamRoleParams, ...access_control.ClientOption) *access_control.AddTeamRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.AddTeamRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.AddTeamRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AddTeamRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamRoleWithParams'
type MockClientService_AddTeamRoleWithParams_Call struct {
	*mock.Call
}

// AddTeamRoleWithParams is a helper method to define mock.On call
//   - params *access_control.AddTeamRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) AddTeamRoleWithParams(params interface{}, opts ...interface{}) *MockClientService_AddTeamRoleWithParams_Call {
	return &MockClientService_AddTeamRoleWithParams_Call{Call: _e.mock.On("AddTeamRoleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AddTeamRoleWithParams_Call) Run(run func(params *access_control.AddTeamRoleParams, opts ...access_control.ClientOption)) *MockClientService_AddTeamRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.AddTeamRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AddTeamRoleWithParams_Call) Return(_a0 *access_control.AddTeamRoleOK, _a1 error) *MockClientService_AddTeamRoleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AddTeamRoleWithParams_Call) RunAndReturn(run func(*access_control.AddTeamRoleParams, ...access_control.ClientOption) (*access_control.AddTeamRoleOK, error)) *MockClientService_AddTeamRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserRole provides a mock function with given fields: userID, body, opts
func (_m *MockClientService) AddUserRole(userID int64, body *models.AddUserRoleCommand, opts ...access_control.ClientOption) (*access_control.AddUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRole")
	}

	var r0 *access_control.AddUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.AddUserRoleCommand, ...access_control.ClientOption) (*access_control.AddUserRoleOK, error)); ok {
		return rf(userID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.AddUserRoleCommand, ...access_control.ClientOption) *access_control.AddUserRoleOK); ok {
		r0 = rf(userID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.AddUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.AddUserRoleCommand, ...access_control.ClientOption) error); ok {
		r1 = rf(userID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AddUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserRole'
type MockClientService_AddUserRole_Call struct {
	*mock.Call
}

// AddUserRole is a helper method to define mock.On call
//   - userID int64
//   - body *models.AddUserRoleCommand
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) AddUserRole(userID interface{}, body interface{}, opts ...interface{}) *MockClientService_AddUserRole_Call {
	return &MockClientService_AddUserRole_Call{Call: _e.mock.On("AddUserRole",
		append([]interface{}{userID, body}, opts...)...)}
}

func (_c *MockClientService_AddUserRole_Call) Run(run func(userID int64, body *models.AddUserRoleCommand, opts ...access_control.ClientOption)) *MockClientService_AddUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.AddUserRoleCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AddUserRole_Call) Return(_a0 *access_control.AddUserRoleOK, _a1 error) *MockClientService_AddUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AddUserRole_Call) RunAndReturn(run func(int64, *models.AddUserRoleCommand, ...access_control.ClientOption) (*access_control.AddUserRoleOK, error)) *MockClientService_AddUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserRoleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AddUserRoleWithParams(params *access_control.AddUserRoleParams, opts ...access_control.ClientOption) (*access_control.AddUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRoleWithParams")
	}

	var r0 *access_control.AddUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.AddUserRoleParams, ...access_control.ClientOption) (*access_control.AddUserRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.AddUserRoleParams, ...access_control.ClientOption) *access_control.AddUserRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.AddUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.AddUserRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AddUserRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserRoleWithParams'
type MockClientService_AddUserRoleWithParams_Call struct {
	*mock.Call
}

// AddUserRoleWithParams is a helper method to define mock.On call
//   - params *access_control.AddUserRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) AddUserRoleWithParams(params interface{}, opts ...interface{}) *MockClientService_AddUserRoleWithParams_Call {
	return &MockClientService_AddUserRoleWithParams_Call{Call: _e.mock.On("AddUserRoleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AddUserRoleWithParams_Call) Run(run func(params *access_control.AddUserRoleParams, opts ...access_control.ClientOption)) *MockClientService_AddUserRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.AddUserRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AddUserRoleWithParams_Call) Return(_a0 *access_control.AddUserRoleOK, _a1 error) *MockClientService_AddUserRoleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AddUserRoleWithParams_Call) RunAndReturn(run func(*access_control.AddUserRoleParams, ...access_control.ClientOption) (*access_control.AddUserRoleOK, error)) *MockClientService_AddUserRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: body, opts
func (_m *MockClientService) CreateRole(body *models.CreateRoleForm, opts ...access_control.ClientOption) (*access_control.CreateRoleCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *access_control.CreateRoleCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.CreateRoleForm, ...access_control.ClientOption) (*access_control.CreateRoleCreated, error)); ok {
		return rf(body, opts...)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateRoleForm, ...access_control.ClientOption) *access_control.CreateRoleCreated); ok {
		r0 = rf(body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.CreateRoleCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.CreateRoleForm, ...access_control.ClientOption) error); ok {
		r1 = rf(body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockClientService_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - body *models.CreateRoleForm
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) CreateRole(body interface{}, opts ...interface{}) *MockClientService_CreateRole_Call {
	return &MockClientService_CreateRole_Call{Call: _e.mock.On("CreateRole",
		append([]interface{}{body}, opts...)...)}
}

func (_c *MockClientService_CreateRole_Call) Run(run func(body *models.CreateRoleForm, opts ...access_control.ClientOption)) *MockClientService_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*models.CreateRoleForm), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateRole_Call) Return(_a0 *access_control.CreateRoleCreated, _a1 error) *MockClientService_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateRole_Call) RunAndReturn(run func(*models.CreateRoleForm, ...access_control.ClientOption) (*access_control.CreateRoleCreated, error)) *MockClientService_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) CreateRoleWithParams(params *access_control.CreateRoleParams, opts ...access_control.ClientOption) (*access_control.CreateRoleCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleWithParams")
	}

	var r0 *access_control.CreateRoleCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.CreateRoleParams, ...access_control.ClientOption) (*access_control.CreateRoleCreated, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.CreateRoleParams, ...access_control.ClientOption) *access_control.CreateRoleCreated); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.CreateRoleCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.CreateRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleWithParams'
type MockClientService_CreateRoleWithParams_Call struct {
	*mock.Call
}

// CreateRoleWithParams is a helper method to define mock.On call
//   - params *access_control.CreateRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) CreateRoleWithParams(params interface{}, opts ...interface{}) *MockClientService_CreateRoleWithParams_Call {
	return &MockClientService_CreateRoleWithParams_Call{Call: _e.mock.On("CreateRoleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_CreateRoleWithParams_Call) Run(run func(params *access_control.CreateRoleParams, opts ...access_control.ClientOption)) *MockClientService_CreateRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.CreateRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateRoleWithParams_Call) Return(_a0 *access_control.CreateRoleCreated, _a1 error) *MockClientService_CreateRoleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateRoleWithParams_Call) RunAndReturn(run func(*access_control.CreateRoleParams, ...access_control.ClientOption) (*access_control.CreateRoleCreated, error)) *MockClientService_CreateRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteRole(params *access_control.DeleteRoleParams, opts ...access_control.ClientOption) (*access_control.DeleteRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 *access_control.DeleteRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.DeleteRoleParams, ...access_control.ClientOption) (*access_control.DeleteRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.DeleteRoleParams, ...access_control.ClientOption) *access_control.DeleteRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.DeleteRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.DeleteRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockClientService_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - params *access_control.DeleteRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) DeleteRole(params interface{}, opts ...interface{}) *MockClientService_DeleteRole_Call {
	return &MockClientService_DeleteRole_Call{Call: _e.mock.On("DeleteRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteRole_Call) Run(run func(params *access_control.DeleteRoleParams, opts ...access_control.ClientOption)) *MockClientService_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.DeleteRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteRole_Call) Return(_a0 *access_control.DeleteRoleOK, _a1 error) *MockClientService_DeleteRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteRole_Call) RunAndReturn(run func(*access_control.DeleteRoleParams, ...access_control.ClientOption) (*access_control.DeleteRoleOK, error)) *MockClientService_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessControlStatus provides a mock function with given fields: opts
func (_m *MockClientService) GetAccessControlStatus(opts ...access_control.ClientOption) (*access_control.GetAccessControlStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessControlStatus")
	}

	var r0 *access_control.GetAccessControlStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...access_control.ClientOption) (*access_control.GetAccessControlStatusOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...access_control.ClientOption) *access_control.GetAccessControlStatusOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetAccessControlStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...access_control.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAccessControlStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessControlStatus'
type MockClientService_GetAccessControlStatus_Call struct {
	*mock.Call
}

// GetAccessControlStatus is a helper method to define mock.On call
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetAccessControlStatus(opts ...interface{}) *MockClientService_GetAccessControlStatus_Call {
	return &MockClientService_GetAccessControlStatus_Call{Call: _e.mock.On("GetAccessControlStatus",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_GetAccessControlStatus_Call) Run(run func(opts ...access_control.ClientOption)) *MockClientService_GetAccessControlStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAccessControlStatus_Call) Return(_a0 *access_control.GetAccessControlStatusOK, _a1 error) *MockClientService_GetAccessControlStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAccessControlStatus_Call) RunAndReturn(run func(...access_control.ClientOption) (*access_control.GetAccessControlStatusOK, error)) *MockClientService_GetAccessControlStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessControlStatusWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAccessControlStatusWithParams(params *access_control.GetAccessControlStatusParams, opts ...access_control.ClientOption) (*access_control.GetAccessControlStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessControlStatusWithParams")
	}

	var r0 *access_control.GetAccessControlStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.GetAccessControlStatusParams, ...access_control.ClientOption) (*access_control.GetAccessControlStatusOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.GetAccessControlStatusParams, ...access_control.ClientOption) *access_control.GetAccessControlStatusOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetAccessControlStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.GetAccessControlStatusParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAccessControlStatusWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessControlStatusWithParams'
type MockClientService_GetAccessControlStatusWithParams_Call struct {
	*mock.Call
}

// GetAccessControlStatusWithParams is a helper method to define mock.On call
//   - params *access_control.GetAccessControlStatusParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetAccessControlStatusWithParams(params interface{}, opts ...interface{}) *MockClientService_GetAccessControlStatusWithParams_Call {
	return &MockClientService_GetAccessControlStatusWithParams_Call{Call: _e.mock.On("GetAccessControlStatusWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAccessControlStatusWithParams_Call) Run(run func(params *access_control.GetAccessControlStatusParams, opts ...access_control.ClientOption)) *MockClientService_GetAccessControlStatusWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.GetAccessControlStatusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAccessControlStatusWithParams_Call) Return(_a0 *access_control.GetAccessControlStatusOK, _a1 error) *MockClientService_GetAccessControlStatusWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAccessControlStatusWithParams_Call) RunAndReturn(run func(*access_control.GetAccessControlStatusParams, ...access_control.ClientOption) (*access_control.GetAccessControlStatusOK, error)) *MockClientService_GetAccessControlStatusWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceDescription provides a mock function with given fields: resource, opts
func (_m *MockClientService) GetResourceDescription(resource string, opts ...access_control.ClientOption) (*access_control.GetResourceDescriptionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, resource)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceDescription")
	}

	var r0 *access_control.GetResourceDescriptionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...access_control.ClientOption) (*access_control.GetResourceDescriptionOK, error)); ok {
		return rf(resource, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...access_control.ClientOption) *access_control.GetResourceDescriptionOK); ok {
		r0 = rf(resource, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetResourceDescriptionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...access_control.ClientOption) error); ok {
		r1 = rf(resource, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetResourceDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceDescription'
type MockClientService_GetResourceDescription_Call struct {
	*mock.Call
}

// GetResourceDescription is a helper method to define mock.On call
//   - resource string
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetResourceDescription(resource interface{}, opts ...interface{}) *MockClientService_GetResourceDescription_Call {
	return &MockClientService_GetResourceDescription_Call{Call: _e.mock.On("GetResourceDescription",
		append([]interface{}{resource}, opts...)...)}
}

func (_c *MockClientService_GetResourceDescription_Call) Run(run func(resource string, opts ...access_control.ClientOption)) *MockClientService_GetResourceDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetResourceDescription_Call) Return(_a0 *access_control.GetResourceDescriptionOK, _a1 error) *MockClientService_GetResourceDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetResourceDescription_Call) RunAndReturn(run func(string, ...access_control.ClientOption) (*access_control.GetResourceDescriptionOK, error)) *MockClientService_GetResourceDescription_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceDescriptionWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetResourceDescriptionWithParams(params *access_control.GetResourceDescriptionParams, opts ...access_control.ClientOption) (*access_control.GetResourceDescriptionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceDescriptionWithParams")
	}

	var r0 *access_control.GetResourceDescriptionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.GetResourceDescriptionParams, ...access_control.ClientOption) (*access_control.GetResourceDescriptionOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.GetResourceDescriptionParams, ...access_control.ClientOption) *access_control.GetResourceDescriptionOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetResourceDescriptionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.GetResourceDescriptionParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetResourceDescriptionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceDescriptionWithParams'
type MockClientService_GetResourceDescriptionWithParams_Call struct {
	*mock.Call
}

// GetResourceDescriptionWithParams is a helper method to define mock.On call
//   - params *access_control.GetResourceDescriptionParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetResourceDescriptionWithParams(params interface{}, opts ...interface{}) *MockClientService_GetResourceDescriptionWithParams_Call {
	return &MockClientService_GetResourceDescriptionWithParams_Call{Call: _e.mock.On("GetResourceDescriptionWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetResourceDescriptionWithParams_Call) Run(run func(params *access_control.GetResourceDescriptionParams, opts ...access_control.ClientOption)) *MockClientService_GetResourceDescriptionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.GetResourceDescriptionParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetResourceDescriptionWithParams_Call) Return(_a0 *access_control.GetResourceDescriptionOK, _a1 error) *MockClientService_GetResourceDescriptionWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetResourceDescriptionWithParams_Call) RunAndReturn(run func(*access_control.GetResourceDescriptionParams, ...access_control.ClientOption) (*access_control.GetResourceDescriptionOK, error)) *MockClientService_GetResourceDescriptionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcePermissions provides a mock function with given fields: resourceID, resource, opts
func (_m *MockClientService) GetResourcePermissions(resourceID string, resource string, opts ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, resourceID, resource)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePermissions")
	}

	var r0 *access_control.GetResourcePermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error)); ok {
		return rf(resourceID, resource, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...access_control.ClientOption) *access_control.GetResourcePermissionsOK); ok {
		r0 = rf(resourceID, resource, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetResourcePermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, ...access_control.ClientOption) error); ok {
		r1 = rf(resourceID, resource, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetResourcePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcePermissions'
type MockClientService_GetResourcePermissions_Call struct {
	*mock.Call
}

// GetResourcePermissions is a helper method to define mock.On call
//   - resourceID string
//   - resource string
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetResourcePermissions(resourceID interface{}, resource interface{}, opts ...interface{}) *MockClientService_GetResourcePermissions_Call {
	return &MockClientService_GetResourcePermissions_Call{Call: _e.mock.On("GetResourcePermissions",
		append([]interface{}{resourceID, resource}, opts...)...)}
}

func (_c *MockClientService_GetResourcePermissions_Call) Run(run func(resourceID string, resource string, opts ...access_control.ClientOption)) *MockClientService_GetResourcePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetResourcePermissions_Call) Return(_a0 *access_control.GetResourcePermissionsOK, _a1 error) *MockClientService_GetResourcePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetResourcePermissions_Call) RunAndReturn(run func(string, string, ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error)) *MockClientService_GetResourcePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcePermissionsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetResourcePermissionsWithParams(params *access_control.GetResourcePermissionsParams, opts ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePermissionsWithParams")
	}

	var r0 *access_control.GetResourcePermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) *access_control.GetResourcePermissionsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetResourcePermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetResourcePermissionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcePermissionsWithParams'
type MockClientService_GetResourcePermissionsWithParams_Call struct {
	*mock.Call
}

// GetResourcePermissionsWithParams is a helper method to define mock.On call
//   - params *access_control.GetResourcePermissionsParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetResourcePermissionsWithParams(params interface{}, opts ...interface{}) *MockClientService_GetResourcePermissionsWithParams_Call {
	return &MockClientService_GetResourcePermissionsWithParams_Call{Call: _e.mock.On("GetResourcePermissionsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetResourcePermissionsWithParams_Call) Run(run func(params *access_control.GetResourcePermissionsParams, opts ...access_control.ClientOption)) *MockClientService_GetResourcePermissionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.GetResourcePermissionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetResourcePermissionsWithParams_Call) Return(_a0 *access_control.GetResourcePermissionsOK, _a1 error) *MockClientService_GetResourcePermissionsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetResourcePermissionsWithParams_Call) RunAndReturn(run func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error)) *MockClientService_GetResourcePermissionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with given fields: roleUID, opts
func (_m *MockClientService) GetRole(roleUID string, opts ...access_control.ClientOption) (*access_control.GetRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roleUID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 *access_control.GetRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...access_control.ClientOption) (*access_control.GetRoleOK, error)); ok {
		return rf(roleUID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...access_control.ClientOption) *access_control.GetRoleOK); ok {
		r0 = rf(roleUID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...access_control.ClientOption) error); ok {
		r1 = rf(roleUID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockClientService_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - roleUID string
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetRole(roleUID interface{}, opts ...interface{}) *MockClientService_GetRole_Call {
	return &MockClientService_GetRole_Call{Call: _e.mock.On("GetRole",
		append([]interface{}{roleUID}, opts...)...)}
}

func (_c *MockClientService_GetRole_Call) Run(run func(roleUID string, opts ...access_control.ClientOption)) *MockClientService_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetRole_Call) Return(_a0 *access_control.GetRoleOK, _a1 error) *MockClientService_GetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetRole_Call) RunAndReturn(run func(string, ...access_control.ClientOption) (*access_control.GetRoleOK, error)) *MockClientService_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignments provides a mock function with given fields: roleUID, opts
func (_m *MockClientService) GetRoleAssignments(roleUID string, opts ...access_control.ClientOption) (*access_control.GetRoleAssignmentsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roleUID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignments")
	}

	var r0 *access_control.GetRoleAssignmentsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...access_control.ClientOption) (*access_control.GetRoleAssignmentsOK, error)); ok {
		return rf(roleUID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...access_control.ClientOption) *access_control.GetRoleAssignmentsOK); ok {
		r0 = rf(roleUID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetRoleAssignmentsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...access_control.ClientOption) error); ok {
		r1 = rf(roleUID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignments'
type MockClientService_GetRoleAssignments_Call struct {
	*mock.Call
}

// GetRoleAssignments is a helper method to define mock.On call
//   - roleUID string
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetRoleAssignments(roleUID interface{}, opts ...interface{}) *MockClientService_GetRoleAssignments_Call {
	return &MockClientService_GetRoleAssignments_Call{Call: _e.mock.On("GetRoleAssignments",
		append([]interface{}{roleUID}, opts...)...)}
}

func (_c *MockClientService_GetRoleAssignments_Call) Run(run func(roleUID string, opts ...access_control.ClientOption)) *MockClientService_GetRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetRoleAssignments_Call) Return(_a0 *access_control.GetRoleAssignmentsOK, _a1 error) *MockClientService_GetRoleAssignments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetRoleAssignments_Call) RunAndReturn(run func(string, ...access_control.ClientOption) (*access_control.GetRoleAssignmentsOK, error)) *MockClientService_GetRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignmentsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetRoleAssignmentsWithParams(params *access_control.GetRoleAssignmentsParams, opts ...access_control.ClientOption) (*access_control.GetRoleAssignmentsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignmentsWithParams")
	}

	var r0 *access_control.GetRoleAssignmentsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.GetRoleAssignmentsParams, ...access_control.ClientOption) (*access_control.GetRoleAssignmentsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.GetRoleAssignmentsParams, ...access_control.ClientOption) *access_control.GetRoleAssignmentsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetRoleAssignmentsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.GetRoleAssignmentsParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetRoleAssignmentsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignmentsWithParams'
type MockClientService_GetRoleAssignmentsWithParams_Call struct {
	*mock.Call
}

// GetRoleAssignmentsWithParams is a helper method to define mock.On call
//   - params *access_control.GetRoleAssignmentsParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetRoleAssignmentsWithParams(params interface{}, opts ...interface{}) *MockClientService_GetRoleAssignmentsWithParams_Call {
	return &MockClientService_GetRoleAssignmentsWithParams_Call{Call: _e.mock.On("GetRoleAssignmentsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetRoleAssignmentsWithParams_Call) Run(run func(params *access_control.GetRoleAssignmentsParams, opts ...access_control.ClientOption)) *MockClientService_GetRoleAssignmentsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.GetRoleAssignmentsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetRoleAssignmentsWithParams_Call) Return(_a0 *access_control.GetRoleAssignmentsOK, _a1 error) *MockClientService_GetRoleAssignmentsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetRoleAssignmentsWithParams_Call) RunAndReturn(run func(*access_control.GetRoleAssignmentsParams, ...access_control.ClientOption) (*access_control.GetRoleAssignmentsOK, error)) *MockClientService_GetRoleAssignmentsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetRoleWithParams(params *access_control.GetRoleParams, opts ...access_control.ClientOption) (*access_control.GetRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleWithParams")
	}

	var r0 *access_control.GetRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.GetRoleParams, ...access_control.ClientOption) (*access_control.GetRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.GetRoleParams, ...access_control.ClientOption) *access_control.GetRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.GetRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleWithParams'
type MockClientService_GetRoleWithParams_Call struct {
	*mock.Call
}

// GetRoleWithParams is a helper method to define mock.On call
//   - params *access_control.GetRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) GetRoleWithParams(params interface{}, opts ...interface{}) *MockClientService_GetRoleWithParams_Call {
	return &MockClientService_GetRoleWithParams_Call{Call: _e.mock.On("GetRoleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetRoleWithParams_Call) Run(run func(params *access_control.GetRoleParams, opts ...access_control.ClientOption)) *MockClientService_GetRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.GetRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetRoleWithParams_Call) Return(_a0 *access_control.GetRoleOK, _a1 error) *MockClientService_GetRoleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetRoleWithParams_Call) RunAndReturn(run func(*access_control.GetRoleParams, ...access_control.ClientOption) (*access_control.GetRoleOK, error)) *MockClientService_GetRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: params, opts
func (_m *MockClientService) ListRoles(params *access_control.ListRolesParams, opts ...access_control.ClientOption) (*access_control.ListRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *access_control.ListRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.ListRolesParams, ...access_control.ClientOption) (*access_control.ListRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.ListRolesParams, ...access_control.ClientOption) *access_control.ListRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.ListRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockClientService_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - params *access_control.ListRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListRoles(params interface{}, opts ...interface{}) *MockClientService_ListRoles_Call {
	return &MockClientService_ListRoles_Call{Call: _e.mock.On("ListRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListRoles_Call) Run(run func(params *access_control.ListRolesParams, opts ...access_control.ClientOption)) *MockClientService_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.ListRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListRoles_Call) Return(_a0 *access_control.ListRolesOK, _a1 error) *MockClientService_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListRoles_Call) RunAndReturn(run func(*access_control.ListRolesParams, ...access_control.ClientOption) (*access_control.ListRolesOK, error)) *MockClientService_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamRoles provides a mock function with given fields: teamID, opts
func (_m *MockClientService) ListTeamRoles(teamID int64, opts ...access_control.ClientOption) (*access_control.ListTeamRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamRoles")
	}

	var r0 *access_control.ListTeamRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...access_control.ClientOption) (*access_control.ListTeamRolesOK, error)); ok {
		return rf(teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...access_control.ClientOption) *access_control.ListTeamRolesOK); ok {
		r0 = rf(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListTeamRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...access_control.ClientOption) error); ok {
		r1 = rf(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTeamRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamRoles'
type MockClientService_ListTeamRoles_Call struct {
	*mock.Call
}

// ListTeamRoles is a helper method to define mock.On call
//   - teamID int64
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListTeamRoles(teamID interface{}, opts ...interface{}) *MockClientService_ListTeamRoles_Call {
	return &MockClientService_ListTeamRoles_Call{Call: _e.mock.On("ListTeamRoles",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockClientService_ListTeamRoles_Call) Run(run func(teamID int64, opts ...access_control.ClientOption)) *MockClientService_ListTeamRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTeamRoles_Call) Return(_a0 *access_control.ListTeamRolesOK, _a1 error) *MockClientService_ListTeamRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTeamRoles_Call) RunAndReturn(run func(int64, ...access_control.ClientOption) (*access_control.ListTeamRolesOK, error)) *MockClientService_ListTeamRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamRolesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) ListTeamRolesWithParams(params *access_control.ListTeamRolesParams, opts ...access_control.ClientOption) (*access_control.ListTeamRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamRolesWithParams")
	}

	var r0 *access_control.ListTeamRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.ListTeamRolesParams, ...access_control.ClientOption) (*access_control.ListTeamRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.ListTeamRolesParams, ...access_control.ClientOption) *access_control.ListTeamRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListTeamRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.ListTeamRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTeamRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamRolesWithParams'
type MockClientService_ListTeamRolesWithParams_Call struct {
	*mock.Call
}

// ListTeamRolesWithParams is a helper method to define mock.On call
//   - params *access_control.ListTeamRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListTeamRolesWithParams(params interface{}, opts ...interface{}) *MockClientService_ListTeamRolesWithParams_Call {
	return &MockClientService_ListTeamRolesWithParams_Call{Call: _e.mock.On("ListTeamRolesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListTeamRolesWithParams_Call) Run(run func(params *access_control.ListTeamRolesParams, opts ...access_control.ClientOption)) *MockClientService_ListTeamRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.ListTeamRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTeamRolesWithParams_Call) Return(_a0 *access_control.ListTeamRolesOK, _a1 error) *MockClientService_ListTeamRolesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTeamRolesWithParams_Call) RunAndReturn(run func(*access_control.ListTeamRolesParams, ...access_control.ClientOption) (*access_control.ListTeamRolesOK, error)) *MockClientService_ListTeamRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamsRoles provides a mock function with given fields: body, opts
func (_m *MockClientService) ListTeamsRoles(body *models.RolesSearchQuery, opts ...access_control.ClientOption) (*access_control.ListTeamsRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamsRoles")
	}

	var r0 *access_control.ListTeamsRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.RolesSearchQuery, ...access_control.ClientOption) (*access_control.ListTeamsRolesOK, error)); ok {
		return rf(body, opts...)
	}
	if rf, ok := ret.Get(0).(func(*models.RolesSearchQuery, ...access_control.ClientOption) *access_control.ListTeamsRolesOK); ok {
		r0 = rf(body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListTeamsRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.RolesSearchQuery, ...access_control.ClientOption) error); ok {
		r1 = rf(body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTeamsRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamsRoles'
type MockClientService_ListTeamsRoles_Call struct {
	*mock.Call
}

// ListTeamsRoles is a helper method to define mock.On call
//   - body *models.RolesSearchQuery
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListTeamsRoles(body interface{}, opts ...interface{}) *MockClientService_ListTeamsRoles_Call {
	return &MockClientService_ListTeamsRoles_Call{Call: _e.mock.On("ListTeamsRoles",
		append([]interface{}{body}, opts...)...)}
}

func (_c *MockClientService_ListTeamsRoles_Call) Run(run func(body *models.RolesSearchQuery, opts ...access_control.ClientOption)) *MockClientService_ListTeamsRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*models.RolesSearchQuery), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTeamsRoles_Call) Return(_a0 *access_control.ListTeamsRolesOK, _a1 error) *MockClientService_ListTeamsRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTeamsRoles_Call) RunAndReturn(run func(*models.RolesSearchQuery, ...access_control.ClientOption) (*access_control.ListTeamsRolesOK, error)) *MockClientService_ListTeamsRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamsRolesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) ListTeamsRolesWithParams(params *access_control.ListTeamsRolesParams, opts ...access_control.ClientOption) (*access_control.ListTeamsRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamsRolesWithParams")
	}

	var r0 *access_control.ListTeamsRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.ListTeamsRolesParams, ...access_control.ClientOption) (*access_control.ListTeamsRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.ListTeamsRolesParams, ...access_control.ClientOption) *access_control.ListTeamsRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListTeamsRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.ListTeamsRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTeamsRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamsRolesWithParams'
type MockClientService_ListTeamsRolesWithParams_Call struct {
	*mock.Call
}

// ListTeamsRolesWithParams is a helper method to define mock.On call
//   - params *access_control.ListTeamsRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListTeamsRolesWithParams(params interface{}, opts ...interface{}) *MockClientService_ListTeamsRolesWithParams_Call {
	return &MockClientService_ListTeamsRolesWithParams_Call{Call: _e.mock.On("ListTeamsRolesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListTeamsRolesWithParams_Call) Run(run func(params *access_control.ListTeamsRolesParams, opts ...access_control.ClientOption)) *MockClientService_ListTeamsRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.ListTeamsRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTeamsRolesWithParams_Call) Return(_a0 *access_control.ListTeamsRolesOK, _a1 error) *MockClientService_ListTeamsRolesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTeamsRolesWithParams_Call) RunAndReturn(run func(*access_control.ListTeamsRolesParams, ...access_control.ClientOption) (*access_control.ListTeamsRolesOK, error)) *MockClientService_ListTeamsRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserRoles provides a mock function with given fields: userID, opts
func (_m *MockClientService) ListUserRoles(userID int64, opts ...access_control.ClientOption) (*access_control.ListUserRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserRoles")
	}

	var r0 *access_control.ListUserRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...access_control.ClientOption) (*access_control.ListUserRolesOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...access_control.ClientOption) *access_control.ListUserRolesOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListUserRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...access_control.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserRoles'
type MockClientService_ListUserRoles_Call struct {
	*mock.Call
}

// ListUserRoles is a helper method to define mock.On call
//   - userID int64
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListUserRoles(userID interface{}, opts ...interface{}) *MockClientService_ListUserRoles_Call {
	return &MockClientService_ListUserRoles_Call{Call: _e.mock.On("ListUserRoles",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_ListUserRoles_Call) Run(run func(userID int64, opts ...access_control.ClientOption)) *MockClientService_ListUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListUserRoles_Call) Return(_a0 *access_control.ListUserRolesOK, _a1 error) *MockClientService_ListUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListUserRoles_Call) RunAndReturn(run func(int64, ...access_control.ClientOption) (*access_control.ListUserRolesOK, error)) *MockClientService_ListUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserRolesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) ListUserRolesWithParams(params *access_control.ListUserRolesParams, opts ...access_control.ClientOption) (*access_control.ListUserRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserRolesWithParams")
	}

	var r0 *access_control.ListUserRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.ListUserRolesParams, ...access_control.ClientOption) (*access_control.ListUserRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.ListUserRolesParams, ...access_control.ClientOption) *access_control.ListUserRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListUserRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.ListUserRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListUserRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserRolesWithParams'
type MockClientService_ListUserRolesWithParams_Call struct {
	*mock.Call
}

// ListUserRolesWithParams is a helper method to define mock.On call
//   - params *access_control.ListUserRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListUserRolesWithParams(params interface{}, opts ...interface{}) *MockClientService_ListUserRolesWithParams_Call {
	return &MockClientService_ListUserRolesWithParams_Call{Call: _e.mock.On("ListUserRolesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListUserRolesWithParams_Call) Run(run func(params *access_control.ListUserRolesParams, opts ...access_control.ClientOption)) *MockClientService_ListUserRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.ListUserRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListUserRolesWithParams_Call) Return(_a0 *access_control.ListUserRolesOK, _a1 error) *MockClientService_ListUserRolesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListUserRolesWithParams_Call) RunAndReturn(run func(*access_control.ListUserRolesParams, ...access_control.ClientOption) (*access_control.ListUserRolesOK, error)) *MockClientService_ListUserRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersRoles provides a mock function with given fields: body, opts
func (_m *MockClientService) ListUsersRoles(body *models.RolesSearchQuery, opts ...access_control.ClientOption) (*access_control.ListUsersRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersRoles")
	}

	var r0 *access_control.ListUsersRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.RolesSearchQuery, ...access_control.ClientOption) (*access_control.ListUsersRolesOK, error)); ok {
		return rf(body, opts...)
	}
	if rf, ok := ret.Get(0).(func(*models.RolesSearchQuery, ...access_control.ClientOption) *access_control.ListUsersRolesOK); ok {
		r0 = rf(body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListUsersRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.RolesSearchQuery, ...access_control.ClientOption) error); ok {
		r1 = rf(body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListUsersRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersRoles'
type MockClientService_ListUsersRoles_Call struct {
	*mock.Call
}

// ListUsersRoles is a helper method to define mock.On call
//   - body *models.RolesSearchQuery
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListUsersRoles(body interface{}, opts ...interface{}) *MockClientService_ListUsersRoles_Call {
	return &MockClientService_ListUsersRoles_Call{Call: _e.mock.On("ListUsersRoles",
		append([]interface{}{body}, opts...)...)}
}

func (_c *MockClientService_ListUsersRoles_Call) Run(run func(body *models.RolesSearchQuery, opts ...access_control.ClientOption)) *MockClientService_ListUsersRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*models.RolesSearchQuery), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListUsersRoles_Call) Return(_a0 *access_control.ListUsersRolesOK, _a1 error) *MockClientService_ListUsersRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListUsersRoles_Call) RunAndReturn(run func(*models.RolesSearchQuery, ...access_control.ClientOption) (*access_control.ListUsersRolesOK, error)) *MockClientService_ListUsersRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersRolesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) ListUsersRolesWithParams(params *access_control.ListUsersRolesParams, opts ...access_control.ClientOption) (*access_control.ListUsersRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersRolesWithParams")
	}

	var r0 *access_control.ListUsersRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.ListUsersRolesParams, ...access_control.ClientOption) (*access_control.ListUsersRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.ListUsersRolesParams, ...access_control.ClientOption) *access_control.ListUsersRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.ListUsersRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.ListUsersRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListUsersRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersRolesWithParams'
type MockClientService_ListUsersRolesWithParams_Call struct {
	*mock.Call
}

// ListUsersRolesWithParams is a helper method to define mock.On call
//   - params *access_control.ListUsersRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) ListUsersRolesWithParams(params interface{}, opts ...interface{}) *MockClientService_ListUsersRolesWithParams_Call {
	return &MockClientService_ListUsersRolesWithParams_Call{Call: _e.mock.On("ListUsersRolesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListUsersRolesWithParams_Call) Run(run func(params *access_control.ListUsersRolesParams, opts ...access_control.ClientOption)) *MockClientService_ListUsersRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.ListUsersRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListUsersRolesWithParams_Call) Return(_a0 *access_control.ListUsersRolesOK, _a1 error) *MockClientService_ListUsersRolesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListUsersRolesWithParams_Call) RunAndReturn(run func(*access_control.ListUsersRolesParams, ...access_control.ClientOption) (*access_control.ListUsersRolesOK, error)) *MockClientService_ListUsersRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamRole provides a mock function with given fields: teamID, roleUID, opts
func (_m *MockClientService) RemoveTeamRole(teamID int64, roleUID string, opts ...access_control.ClientOption) (*access_control.RemoveTeamRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID, roleUID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamRole")
	}

	var r0 *access_control.RemoveTeamRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, ...access_control.ClientOption) (*access_control.RemoveTeamRoleOK, error)); ok {
		return rf(teamID, roleUID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, string, ...access_control.ClientOption) *access_control.RemoveTeamRoleOK); ok {
		r0 = rf(teamID, roleUID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.RemoveTeamRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, ...access_control.ClientOption) error); ok {
		r1 = rf(teamID, roleUID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RemoveTeamRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamRole'
type MockClientService_RemoveTeamRole_Call struct {
	*mock.Call
}

// RemoveTeamRole is a helper method to define mock.On call
//   - teamID int64
//   - roleUID string
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) RemoveTeamRole(teamID interface{}, roleUID interface{}, opts ...interface{}) *MockClientService_RemoveTeamRole_Call {
	return &MockClientService_RemoveTeamRole_Call{Call: _e.mock.On("RemoveTeamRole",
		append([]interface{}{teamID, roleUID}, opts...)...)}
}

func (_c *MockClientService_RemoveTeamRole_Call) Run(run func(teamID int64, roleUID string, opts ...access_control.ClientOption)) *MockClientService_RemoveTeamRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RemoveTeamRole_Call) Return(_a0 *access_control.RemoveTeamRoleOK, _a1 error) *MockClientService_RemoveTeamRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RemoveTeamRole_Call) RunAndReturn(run func(int64, string, ...access_control.ClientOption) (*access_control.RemoveTeamRoleOK, error)) *MockClientService_RemoveTeamRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamRoleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) RemoveTeamRoleWithParams(params *access_control.RemoveTeamRoleParams, opts ...access_control.ClientOption) (*access_control.RemoveTeamRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamRoleWithParams")
	}

	var r0 *access_control.RemoveTeamRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.RemoveTeamRoleParams, ...access_control.ClientOption) (*access_control.RemoveTeamRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.RemoveTeamRoleParams, ...access_control.ClientOption) *access_control.RemoveTeamRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.RemoveTeamRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.RemoveTeamRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RemoveTeamRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamRoleWithParams'
type MockClientService_RemoveTeamRoleWithParams_Call struct {
	*mock.Call
}

// RemoveTeamRoleWithParams is a helper method to define mock.On call
//   - params *access_control.RemoveTeamRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) RemoveTeamRoleWithParams(params interface{}, opts ...interface{}) *MockClientService_RemoveTeamRoleWithParams_Call {
	return &MockClientService_RemoveTeamRoleWithParams_Call{Call: _e.mock.On("RemoveTeamRoleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_RemoveTeamRoleWithParams_Call) Run(run func(params *access_control.RemoveTeamRoleParams, opts ...access_control.ClientOption)) *MockClientService_RemoveTeamRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.RemoveTeamRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RemoveTeamRoleWithParams_Call) Return(_a0 *access_control.RemoveTeamRoleOK, _a1 error) *MockClientService_RemoveTeamRoleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RemoveTeamRoleWithParams_Call) RunAndReturn(run func(*access_control.RemoveTeamRoleParams, ...access_control.ClientOption) (*access_control.RemoveTeamRoleOK, error)) *MockClientService_RemoveTeamRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserRole provides a mock function with given fields: params, opts
func (_m *MockClientService) RemoveUserRole(params *access_control.RemoveUserRoleParams, opts ...access_control.ClientOption) (*access_control.RemoveUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserRole")
	}

	var r0 *access_control.RemoveUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.RemoveUserRoleParams, ...access_control.ClientOption) (*access_control.RemoveUserRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.RemoveUserRoleParams, ...access_control.ClientOption) *access_control.RemoveUserRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.RemoveUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.RemoveUserRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RemoveUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserRole'
type MockClientService_RemoveUserRole_Call struct {
	*mock.Call
}

// RemoveUserRole is a helper method to define mock.On call
//   - params *access_control.RemoveUserRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) RemoveUserRole(params interface{}, opts ...interface{}) *MockClientService_RemoveUserRole_Call {
	return &MockClientService_RemoveUserRole_Call{Call: _e.mock.On("RemoveUserRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_RemoveUserRole_Call) Run(run func(params *access_control.RemoveUserRoleParams, opts ...access_control.ClientOption)) *MockClientService_RemoveUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.RemoveUserRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RemoveUserRole_Call) Return(_a0 *access_control.RemoveUserRoleOK, _a1 error) *MockClientService_RemoveUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RemoveUserRole_Call) RunAndReturn(run func(*access_control.RemoveUserRoleParams, ...access_control.ClientOption) (*access_control.RemoveUserRoleOK, error)) *MockClientService_RemoveUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SetResourcePermissions provides a mock function with given fields: params, opts
func (_m *MockClientService) SetResourcePermissions(params *access_control.SetResourcePermissionsParams, opts ...access_control.ClientOption) (*access_control.SetResourcePermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetResourcePermissions")
	}

	var r0 *access_control.SetResourcePermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) *access_control.SetResourcePermissionsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetResourcePermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetResourcePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourcePermissions'
type MockClientService_SetResourcePermissions_Call struct {
	*mock.Call
}

// SetResourcePermissions is a helper method to define mock.On call
//   - params *access_control.SetResourcePermissionsParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetResourcePermissions(params interface{}, opts ...interface{}) *MockClientService_SetResourcePermissions_Call {
	return &MockClientService_SetResourcePermissions_Call{Call: _e.mock.On("SetResourcePermissions",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetResourcePermissions_Call) Run(run func(params *access_control.SetResourcePermissionsParams, opts ...access_control.ClientOption)) *MockClientService_SetResourcePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetResourcePermissionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetResourcePermissions_Call) Return(_a0 *access_control.SetResourcePermissionsOK, _a1 error) *MockClientService_SetResourcePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetResourcePermissions_Call) RunAndReturn(run func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsOK, error)) *MockClientService_SetResourcePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// SetResourcePermissionsForBuiltInRole provides a mock function with given fields: params, opts
func (_m *MockClientService) SetResourcePermissionsForBuiltInRole(params *access_control.SetResourcePermissionsForBuiltInRoleParams, opts ...access_control.ClientOption) (*access_control.SetResourcePermissionsForBuiltInRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetResourcePermissionsForBuiltInRole")
	}

	var r0 *access_control.SetResourcePermissionsForBuiltInRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsForBuiltInRoleParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsForBuiltInRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsForBuiltInRoleParams, ...access_control.ClientOption) *access_control.SetResourcePermissionsForBuiltInRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetResourcePermissionsForBuiltInRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetResourcePermissionsForBuiltInRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetResourcePermissionsForBuiltInRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourcePermissionsForBuiltInRole'
type MockClientService_SetResourcePermissionsForBuiltInRole_Call struct {
	*mock.Call
}

// SetResourcePermissionsForBuiltInRole is a helper method to define mock.On call
//   - params *access_control.SetResourcePermissionsForBuiltInRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetResourcePermissionsForBuiltInRole(params interface{}, opts ...interface{}) *MockClientService_SetResourcePermissionsForBuiltInRole_Call {
	return &MockClientService_SetResourcePermissionsForBuiltInRole_Call{Call: _e.mock.On("SetResourcePermissionsForBuiltInRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetResourcePermissionsForBuiltInRole_Call) Run(run func(params *access_control.SetResourcePermissionsForBuiltInRoleParams, opts ...access_control.ClientOption)) *MockClientService_SetResourcePermissionsForBuiltInRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetResourcePermissionsForBuiltInRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetResourcePermissionsForBuiltInRole_Call) Return(_a0 *access_control.SetResourcePermissionsForBuiltInRoleOK, _a1 error) *MockClientService_SetResourcePermissionsForBuiltInRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetResourcePermissionsForBuiltInRole_Call) RunAndReturn(run func(*access_control.SetResourcePermissionsForBuiltInRoleParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsForBuiltInRoleOK, error)) *MockClientService_SetResourcePermissionsForBuiltInRole_Call {
	_c.Call.Return(run)
	return _c
}

// SetResourcePermissionsForTeam provides a mock function with given fields: params, opts
func (_m *MockClientService) SetResourcePermissionsForTeam(params *access_control.SetResourcePermissionsForTeamParams, opts ...access_control.ClientOption) (*access_control.SetResourcePermissionsForTeamOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetResourcePermissionsForTeam")
	}

	var r0 *access_control.SetResourcePermissionsForTeamOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsForTeamParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsForTeamOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsForTeamParams, ...access_control.ClientOption) *access_control.SetResourcePermissionsForTeamOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetResourcePermissionsForTeamOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetResourcePermissionsForTeamParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetResourcePermissionsForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourcePermissionsForTeam'
type MockClientService_SetResourcePermissionsForTeam_Call struct {
	*mock.Call
}

// SetResourcePermissionsForTeam is a helper method to define mock.On call
//   - params *access_control.SetResourcePermissionsForTeamParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetResourcePermissionsForTeam(params interface{}, opts ...interface{}) *MockClientService_SetResourcePermissionsForTeam_Call {
	return &MockClientService_SetResourcePermissionsForTeam_Call{Call: _e.mock.On("SetResourcePermissionsForTeam",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetResourcePermissionsForTeam_Call) Run(run func(params *access_control.SetResourcePermissionsForTeamParams, opts ...access_control.ClientOption)) *MockClientService_SetResourcePermissionsForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetResourcePermissionsForTeamParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetResourcePermissionsForTeam_Call) Return(_a0 *access_control.SetResourcePermissionsForTeamOK, _a1 error) *MockClientService_SetResourcePermissionsForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetResourcePermissionsForTeam_Call) RunAndReturn(run func(*access_control.SetResourcePermissionsForTeamParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsForTeamOK, error)) *MockClientService_SetResourcePermissionsForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetResourcePermissionsForUser provides a mock function with given fields: params, opts
func (_m *MockClientService) SetResourcePermissionsForUser(params *access_control.SetResourcePermissionsForUserParams, opts ...access_control.ClientOption) (*access_control.SetResourcePermissionsForUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetResourcePermissionsForUser")
	}

	var r0 *access_control.SetResourcePermissionsForUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsForUserParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsForUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsForUserParams, ...access_control.ClientOption) *access_control.SetResourcePermissionsForUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetResourcePermissionsForUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetResourcePermissionsForUserParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetResourcePermissionsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourcePermissionsForUser'
type MockClientService_SetResourcePermissionsForUser_Call struct {
	*mock.Call
}

// SetResourcePermissionsForUser is a helper method to define mock.On call
//   - params *access_control.SetResourcePermissionsForUserParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetResourcePermissionsForUser(params interface{}, opts ...interface{}) *MockClientService_SetResourcePermissionsForUser_Call {
	return &MockClientService_SetResourcePermissionsForUser_Call{Call: _e.mock.On("SetResourcePermissionsForUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetResourcePermissionsForUser_Call) Run(run func(params *access_control.SetResourcePermissionsForUserParams, opts ...access_control.ClientOption)) *MockClientService_SetResourcePermissionsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetResourcePermissionsForUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetResourcePermissionsForUser_Call) Return(_a0 *access_control.SetResourcePermissionsForUserOK, _a1 error) *MockClientService_SetResourcePermissionsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetResourcePermissionsForUser_Call) RunAndReturn(run func(*access_control.SetResourcePermissionsForUserParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsForUserOK, error)) *MockClientService_SetResourcePermissionsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoleAssignments provides a mock function with given fields: roleUID, body, opts
func (_m *MockClientService) SetRoleAssignments(roleUID string, body *models.SetRoleAssignmentsCommand, opts ...access_control.ClientOption) (*access_control.SetRoleAssignmentsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roleUID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetRoleAssignments")
	}

	var r0 *access_control.SetRoleAssignmentsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.SetRoleAssignmentsCommand, ...access_control.ClientOption) (*access_control.SetRoleAssignmentsOK, error)); ok {
		return rf(roleUID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, *models.SetRoleAssignmentsCommand, ...access_control.ClientOption) *access_control.SetRoleAssignmentsOK); ok {
		r0 = rf(roleUID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetRoleAssignmentsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.SetRoleAssignmentsCommand, ...access_control.ClientOption) error); ok {
		r1 = rf(roleUID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoleAssignments'
type MockClientService_SetRoleAssignments_Call struct {
	*mock.Call
}

// SetRoleAssignments is a helper method to define mock.On call
//   - roleUID string
//   - body *models.SetRoleAssignmentsCommand
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetRoleAssignments(roleUID interface{}, body interface{}, opts ...interface{}) *MockClientService_SetRoleAssignments_Call {
	return &MockClientService_SetRoleAssignments_Call{Call: _e.mock.On("SetRoleAssignments",
		append([]interface{}{roleUID, body}, opts...)...)}
}

func (_c *MockClientService_SetRoleAssignments_Call) Run(run func(roleUID string, body *models.SetRoleAssignmentsCommand, opts ...access_control.ClientOption)) *MockClientService_SetRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(string), args[1].(*models.SetRoleAssignmentsCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetRoleAssignments_Call) Return(_a0 *access_control.SetRoleAssignmentsOK, _a1 error) *MockClientService_SetRoleAssignments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetRoleAssignments_Call) RunAndReturn(run func(string, *models.SetRoleAssignmentsCommand, ...access_control.ClientOption) (*access_control.SetRoleAssignmentsOK, error)) *MockClientService_SetRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoleAssignmentsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) SetRoleAssignmentsWithParams(params *access_control.SetRoleAssignmentsParams, opts ...access_control.ClientOption) (*access_control.SetRoleAssignmentsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetRoleAssignmentsWithParams")
	}

	var r0 *access_control.SetRoleAssignmentsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetRoleAssignmentsParams, ...access_control.ClientOption) (*access_control.SetRoleAssignmentsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetRoleAssignmentsParams, ...access_control.ClientOption) *access_control.SetRoleAssignmentsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetRoleAssignmentsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetRoleAssignmentsParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetRoleAssignmentsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoleAssignmentsWithParams'
type MockClientService_SetRoleAssignmentsWithParams_Call struct {
	*mock.Call
}

// SetRoleAssignmentsWithParams is a helper method to define mock.On call
//   - params *access_control.SetRoleAssignmentsParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetRoleAssignmentsWithParams(params interface{}, opts ...interface{}) *MockClientService_SetRoleAssignmentsWithParams_Call {
	return &MockClientService_SetRoleAssignmentsWithParams_Call{Call: _e.mock.On("SetRoleAssignmentsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetRoleAssignmentsWithParams_Call) Run(run func(params *access_control.SetRoleAssignmentsParams, opts ...access_control.ClientOption)) *MockClientService_SetRoleAssignmentsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetRoleAssignmentsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetRoleAssignmentsWithParams_Call) Return(_a0 *access_control.SetRoleAssignmentsOK, _a1 error) *MockClientService_SetRoleAssignmentsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetRoleAssignmentsWithParams_Call) RunAndReturn(run func(*access_control.SetRoleAssignmentsParams, ...access_control.ClientOption) (*access_control.SetRoleAssignmentsOK, error)) *MockClientService_SetRoleAssignmentsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamRoles provides a mock function with given fields: teamID, opts
func (_m *MockClientService) SetTeamRoles(teamID int64, opts ...access_control.ClientOption) (*access_control.SetTeamRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamRoles")
	}

	var r0 *access_control.SetTeamRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...access_control.ClientOption) (*access_control.SetTeamRolesOK, error)); ok {
		return rf(teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...access_control.ClientOption) *access_control.SetTeamRolesOK); ok {
		r0 = rf(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetTeamRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...access_control.ClientOption) error); ok {
		r1 = rf(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetTeamRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamRoles'
type MockClientService_SetTeamRoles_Call struct {
	*mock.Call
}

// SetTeamRoles is a helper method to define mock.On call
//   - teamID int64
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetTeamRoles(teamID interface{}, opts ...interface{}) *MockClientService_SetTeamRoles_Call {
	return &MockClientService_SetTeamRoles_Call{Call: _e.mock.On("SetTeamRoles",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockClientService_SetTeamRoles_Call) Run(run func(teamID int64, opts ...access_control.ClientOption)) *MockClientService_SetTeamRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetTeamRoles_Call) Return(_a0 *access_control.SetTeamRolesOK, _a1 error) *MockClientService_SetTeamRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetTeamRoles_Call) RunAndReturn(run func(int64, ...access_control.ClientOption) (*access_control.SetTeamRolesOK, error)) *MockClientService_SetTeamRoles_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamRolesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) SetTeamRolesWithParams(params *access_control.SetTeamRolesParams, opts ...access_control.ClientOption) (*access_control.SetTeamRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamRolesWithParams")
	}

	var r0 *access_control.SetTeamRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetTeamRolesParams, ...access_control.ClientOption) (*access_control.SetTeamRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetTeamRolesParams, ...access_control.ClientOption) *access_control.SetTeamRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetTeamRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetTeamRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetTeamRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamRolesWithParams'
type MockClientService_SetTeamRolesWithParams_Call struct {
	*mock.Call
}

// SetTeamRolesWithParams is a helper method to define mock.On call
//   - params *access_control.SetTeamRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetTeamRolesWithParams(params interface{}, opts ...interface{}) *MockClientService_SetTeamRolesWithParams_Call {
	return &MockClientService_SetTeamRolesWithParams_Call{Call: _e.mock.On("SetTeamRolesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetTeamRolesWithParams_Call) Run(run func(params *access_control.SetTeamRolesParams, opts ...access_control.ClientOption)) *MockClientService_SetTeamRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetTeamRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetTeamRolesWithParams_Call) Return(_a0 *access_control.SetTeamRolesOK, _a1 error) *MockClientService_SetTeamRolesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetTeamRolesWithParams_Call) RunAndReturn(run func(*access_control.SetTeamRolesParams, ...access_control.ClientOption) (*access_control.SetTeamRolesOK, error)) *MockClientService_SetTeamRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserRoles provides a mock function with given fields: userID, body, opts
func (_m *MockClientService) SetUserRoles(userID int64, body *models.SetUserRolesCommand, opts ...access_control.ClientOption) (*access_control.SetUserRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUserRoles")
	}

	var r0 *access_control.SetUserRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.SetUserRolesCommand, ...access_control.ClientOption) (*access_control.SetUserRolesOK, error)); ok {
		return rf(userID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.SetUserRolesCommand, ...access_control.ClientOption) *access_control.SetUserRolesOK); ok {
		r0 = rf(userID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetUserRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.SetUserRolesCommand, ...access_control.ClientOption) error); ok {
		r1 = rf(userID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserRoles'
type MockClientService_SetUserRoles_Call struct {
	*mock.Call
}

// SetUserRoles is a helper method to define mock.On call
//   - userID int64
//   - body *models.SetUserRolesCommand
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetUserRoles(userID interface{}, body interface{}, opts ...interface{}) *MockClientService_SetUserRoles_Call {
	return &MockClientService_SetUserRoles_Call{Call: _e.mock.On("SetUserRoles",
		append([]interface{}{userID, body}, opts...)...)}
}

func (_c *MockClientService_SetUserRoles_Call) Run(run func(userID int64, body *models.SetUserRolesCommand, opts ...access_control.ClientOption)) *MockClientService_SetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.SetUserRolesCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetUserRoles_Call) Return(_a0 *access_control.SetUserRolesOK, _a1 error) *MockClientService_SetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetUserRoles_Call) RunAndReturn(run func(int64, *models.SetUserRolesCommand, ...access_control.ClientOption) (*access_control.SetUserRolesOK, error)) *MockClientService_SetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserRolesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) SetUserRolesWithParams(params *access_control.SetUserRolesParams, opts ...access_control.ClientOption) (*access_control.SetUserRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUserRolesWithParams")
	}

	var r0 *access_control.SetUserRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.SetUserRolesParams, ...access_control.ClientOption) (*access_control.SetUserRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.SetUserRolesParams, ...access_control.ClientOption) *access_control.SetUserRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetUserRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.SetUserRolesParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetUserRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserRolesWithParams'
type MockClientService_SetUserRolesWithParams_Call struct {
	*mock.Call
}

// SetUserRolesWithParams is a helper method to define mock.On call
//   - params *access_control.SetUserRolesParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) SetUserRolesWithParams(params interface{}, opts ...interface{}) *MockClientService_SetUserRolesWithParams_Call {
	return &MockClientService_SetUserRolesWithParams_Call{Call: _e.mock.On("SetUserRolesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetUserRolesWithParams_Call) Run(run func(params *access_control.SetUserRolesParams, opts ...access_control.ClientOption)) *MockClientService_SetUserRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.SetUserRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetUserRolesWithParams_Call) Return(_a0 *access_control.SetUserRolesOK, _a1 error) *MockClientService_SetUserRolesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetUserRolesWithParams_Call) RunAndReturn(run func(*access_control.SetUserRolesParams, ...access_control.ClientOption) (*access_control.SetUserRolesOK, error)) *MockClientService_SetUserRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: roleUID, body, opts
func (_m *MockClientService) UpdateRole(roleUID string, body *models.UpdateRoleCommand, opts ...access_control.ClientOption) (*access_control.UpdateRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roleUID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 *access_control.UpdateRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.UpdateRoleCommand, ...access_control.ClientOption) (*access_control.UpdateRoleOK, error)); ok {
		return rf(roleUID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, *models.UpdateRoleCommand, ...access_control.ClientOption) *access_control.UpdateRoleOK); ok {
		r0 = rf(roleUID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.UpdateRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.UpdateRoleCommand, ...access_control.ClientOption) error); ok {
		r1 = rf(roleUID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockClientService_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - roleUID string
//   - body *models.UpdateRoleCommand
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) UpdateRole(roleUID interface{}, body interface{}, opts ...interface{}) *MockClientService_UpdateRole_Call {
	return &MockClientService_UpdateRole_Call{Call: _e.mock.On("UpdateRole",
		append([]interface{}{roleUID, body}, opts...)...)}
}

func (_c *MockClientService_UpdateRole_Call) Run(run func(roleUID string, body *models.UpdateRoleCommand, opts ...access_control.ClientOption)) *MockClientService_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(string), args[1].(*models.UpdateRoleCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateRole_Call) Return(_a0 *access_control.UpdateRoleOK, _a1 error) *MockClientService_UpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateRole_Call) RunAndReturn(run func(string, *models.UpdateRoleCommand, ...access_control.ClientOption) (*access_control.UpdateRoleOK, error)) *MockClientService_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateRoleWithParams(params *access_control.UpdateRoleParams, opts ...access_control.ClientOption) (*access_control.UpdateRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleWithParams")
	}

	var r0 *access_control.UpdateRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*access_control.UpdateRoleParams, ...access_control.ClientOption) (*access_control.UpdateRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*access_control.UpdateRoleParams, ...access_control.ClientOption) *access_control.UpdateRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.UpdateRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*access_control.UpdateRoleParams, ...access_control.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleWithParams'
type MockClientService_UpdateRoleWithParams_Call struct {
	*mock.Call
}

// UpdateRoleWithParams is a helper method to define mock.On call
//   - params *access_control.UpdateRoleParams
//   - opts ...access_control.ClientOption
func (_e *MockClientService_Expecter) UpdateRoleWithParams(params interface{}, opts ...interface{}) *MockClientService_UpdateRoleWithParams_Call {
	return &MockClientService_UpdateRoleWithParams_Call{Call: _e.mock.On("UpdateRoleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateRoleWithParams_Call) Run(run func(params *access_control.UpdateRoleParams, opts ...access_control.ClientOption)) *MockClientService_UpdateRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]access_control.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(access_control.ClientOption)
			}
		}
		run(args[0].(*access_control.UpdateRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateRoleWithParams_Call) Return(_a0 *access_control.UpdateRoleOK, _a1 error) *MockClientService_UpdateRoleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateRoleWithParams_Call) RunAndReturn(run func(*access_control.UpdateRoleParams, ...access_control.ClientOption) (*access_control.UpdateRoleOK, error)) *MockClientService_UpdateRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
