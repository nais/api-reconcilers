// Code generated by mockery. DO NOT EDIT.

package grafana_mock_admin_users

import (
	admin_users "github.com/grafana/grafana-openapi-client-go/client/admin_users"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// AdminCreateUser provides a mock function with given fields: body, opts
func (_m *MockClientService) AdminCreateUser(body *models.AdminCreateUserForm, opts ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminCreateUser")
	}

	var r0 *admin_users.AdminCreateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.AdminCreateUserForm, ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error)); ok {
		return rf(body, opts...)
	}
	if rf, ok := ret.Get(0).(func(*models.AdminCreateUserForm, ...admin_users.ClientOption) *admin_users.AdminCreateUserOK); ok {
		r0 = rf(body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminCreateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.AdminCreateUserForm, ...admin_users.ClientOption) error); ok {
		r1 = rf(body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminCreateUser'
type MockClientService_AdminCreateUser_Call struct {
	*mock.Call
}

// AdminCreateUser is a helper method to define mock.On call
//   - body *models.AdminCreateUserForm
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminCreateUser(body interface{}, opts ...interface{}) *MockClientService_AdminCreateUser_Call {
	return &MockClientService_AdminCreateUser_Call{Call: _e.mock.On("AdminCreateUser",
		append([]interface{}{body}, opts...)...)}
}

func (_c *MockClientService_AdminCreateUser_Call) Run(run func(body *models.AdminCreateUserForm, opts ...admin_users.ClientOption)) *MockClientService_AdminCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*models.AdminCreateUserForm), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminCreateUser_Call) Return(_a0 *admin_users.AdminCreateUserOK, _a1 error) *MockClientService_AdminCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminCreateUser_Call) RunAndReturn(run func(*models.AdminCreateUserForm, ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error)) *MockClientService_AdminCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminCreateUserWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminCreateUserWithParams(params *admin_users.AdminCreateUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminCreateUserWithParams")
	}

	var r0 *admin_users.AdminCreateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) *admin_users.AdminCreateUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminCreateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminCreateUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminCreateUserWithParams'
type MockClientService_AdminCreateUserWithParams_Call struct {
	*mock.Call
}

// AdminCreateUserWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminCreateUserParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminCreateUserWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminCreateUserWithParams_Call {
	return &MockClientService_AdminCreateUserWithParams_Call{Call: _e.mock.On("AdminCreateUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminCreateUserWithParams_Call) Run(run func(params *admin_users.AdminCreateUserParams, opts ...admin_users.ClientOption)) *MockClientService_AdminCreateUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminCreateUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminCreateUserWithParams_Call) Return(_a0 *admin_users.AdminCreateUserOK, _a1 error) *MockClientService_AdminCreateUserWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminCreateUserWithParams_Call) RunAndReturn(run func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error)) *MockClientService_AdminCreateUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminDeleteUser provides a mock function with given fields: userID, opts
func (_m *MockClientService) AdminDeleteUser(userID int64, opts ...admin_users.ClientOption) (*admin_users.AdminDeleteUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDeleteUser")
	}

	var r0 *admin_users.AdminDeleteUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) (*admin_users.AdminDeleteUserOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) *admin_users.AdminDeleteUserOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminDeleteUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminDeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDeleteUser'
type MockClientService_AdminDeleteUser_Call struct {
	*mock.Call
}

// AdminDeleteUser is a helper method to define mock.On call
//   - userID int64
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminDeleteUser(userID interface{}, opts ...interface{}) *MockClientService_AdminDeleteUser_Call {
	return &MockClientService_AdminDeleteUser_Call{Call: _e.mock.On("AdminDeleteUser",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_AdminDeleteUser_Call) Run(run func(userID int64, opts ...admin_users.ClientOption)) *MockClientService_AdminDeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminDeleteUser_Call) Return(_a0 *admin_users.AdminDeleteUserOK, _a1 error) *MockClientService_AdminDeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminDeleteUser_Call) RunAndReturn(run func(int64, ...admin_users.ClientOption) (*admin_users.AdminDeleteUserOK, error)) *MockClientService_AdminDeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminDeleteUserWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminDeleteUserWithParams(params *admin_users.AdminDeleteUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminDeleteUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDeleteUserWithParams")
	}

	var r0 *admin_users.AdminDeleteUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminDeleteUserParams, ...admin_users.ClientOption) (*admin_users.AdminDeleteUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminDeleteUserParams, ...admin_users.ClientOption) *admin_users.AdminDeleteUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminDeleteUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminDeleteUserParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminDeleteUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDeleteUserWithParams'
type MockClientService_AdminDeleteUserWithParams_Call struct {
	*mock.Call
}

// AdminDeleteUserWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminDeleteUserParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminDeleteUserWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminDeleteUserWithParams_Call {
	return &MockClientService_AdminDeleteUserWithParams_Call{Call: _e.mock.On("AdminDeleteUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminDeleteUserWithParams_Call) Run(run func(params *admin_users.AdminDeleteUserParams, opts ...admin_users.ClientOption)) *MockClientService_AdminDeleteUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminDeleteUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminDeleteUserWithParams_Call) Return(_a0 *admin_users.AdminDeleteUserOK, _a1 error) *MockClientService_AdminDeleteUserWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminDeleteUserWithParams_Call) RunAndReturn(run func(*admin_users.AdminDeleteUserParams, ...admin_users.ClientOption) (*admin_users.AdminDeleteUserOK, error)) *MockClientService_AdminDeleteUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminDisableUser provides a mock function with given fields: userID, opts
func (_m *MockClientService) AdminDisableUser(userID int64, opts ...admin_users.ClientOption) (*admin_users.AdminDisableUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDisableUser")
	}

	var r0 *admin_users.AdminDisableUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) (*admin_users.AdminDisableUserOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) *admin_users.AdminDisableUserOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminDisableUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminDisableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDisableUser'
type MockClientService_AdminDisableUser_Call struct {
	*mock.Call
}

// AdminDisableUser is a helper method to define mock.On call
//   - userID int64
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminDisableUser(userID interface{}, opts ...interface{}) *MockClientService_AdminDisableUser_Call {
	return &MockClientService_AdminDisableUser_Call{Call: _e.mock.On("AdminDisableUser",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_AdminDisableUser_Call) Run(run func(userID int64, opts ...admin_users.ClientOption)) *MockClientService_AdminDisableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminDisableUser_Call) Return(_a0 *admin_users.AdminDisableUserOK, _a1 error) *MockClientService_AdminDisableUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminDisableUser_Call) RunAndReturn(run func(int64, ...admin_users.ClientOption) (*admin_users.AdminDisableUserOK, error)) *MockClientService_AdminDisableUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminDisableUserWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminDisableUserWithParams(params *admin_users.AdminDisableUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminDisableUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDisableUserWithParams")
	}

	var r0 *admin_users.AdminDisableUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminDisableUserParams, ...admin_users.ClientOption) (*admin_users.AdminDisableUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminDisableUserParams, ...admin_users.ClientOption) *admin_users.AdminDisableUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminDisableUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminDisableUserParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminDisableUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDisableUserWithParams'
type MockClientService_AdminDisableUserWithParams_Call struct {
	*mock.Call
}

// AdminDisableUserWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminDisableUserParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminDisableUserWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminDisableUserWithParams_Call {
	return &MockClientService_AdminDisableUserWithParams_Call{Call: _e.mock.On("AdminDisableUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminDisableUserWithParams_Call) Run(run func(params *admin_users.AdminDisableUserParams, opts ...admin_users.ClientOption)) *MockClientService_AdminDisableUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminDisableUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminDisableUserWithParams_Call) Return(_a0 *admin_users.AdminDisableUserOK, _a1 error) *MockClientService_AdminDisableUserWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminDisableUserWithParams_Call) RunAndReturn(run func(*admin_users.AdminDisableUserParams, ...admin_users.ClientOption) (*admin_users.AdminDisableUserOK, error)) *MockClientService_AdminDisableUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminEnableUser provides a mock function with given fields: userID, opts
func (_m *MockClientService) AdminEnableUser(userID int64, opts ...admin_users.ClientOption) (*admin_users.AdminEnableUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminEnableUser")
	}

	var r0 *admin_users.AdminEnableUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) (*admin_users.AdminEnableUserOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) *admin_users.AdminEnableUserOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminEnableUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminEnableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminEnableUser'
type MockClientService_AdminEnableUser_Call struct {
	*mock.Call
}

// AdminEnableUser is a helper method to define mock.On call
//   - userID int64
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminEnableUser(userID interface{}, opts ...interface{}) *MockClientService_AdminEnableUser_Call {
	return &MockClientService_AdminEnableUser_Call{Call: _e.mock.On("AdminEnableUser",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_AdminEnableUser_Call) Run(run func(userID int64, opts ...admin_users.ClientOption)) *MockClientService_AdminEnableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminEnableUser_Call) Return(_a0 *admin_users.AdminEnableUserOK, _a1 error) *MockClientService_AdminEnableUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminEnableUser_Call) RunAndReturn(run func(int64, ...admin_users.ClientOption) (*admin_users.AdminEnableUserOK, error)) *MockClientService_AdminEnableUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminEnableUserWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminEnableUserWithParams(params *admin_users.AdminEnableUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminEnableUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminEnableUserWithParams")
	}

	var r0 *admin_users.AdminEnableUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminEnableUserParams, ...admin_users.ClientOption) (*admin_users.AdminEnableUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminEnableUserParams, ...admin_users.ClientOption) *admin_users.AdminEnableUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminEnableUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminEnableUserParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminEnableUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminEnableUserWithParams'
type MockClientService_AdminEnableUserWithParams_Call struct {
	*mock.Call
}

// AdminEnableUserWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminEnableUserParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminEnableUserWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminEnableUserWithParams_Call {
	return &MockClientService_AdminEnableUserWithParams_Call{Call: _e.mock.On("AdminEnableUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminEnableUserWithParams_Call) Run(run func(params *admin_users.AdminEnableUserParams, opts ...admin_users.ClientOption)) *MockClientService_AdminEnableUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminEnableUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminEnableUserWithParams_Call) Return(_a0 *admin_users.AdminEnableUserOK, _a1 error) *MockClientService_AdminEnableUserWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminEnableUserWithParams_Call) RunAndReturn(run func(*admin_users.AdminEnableUserParams, ...admin_users.ClientOption) (*admin_users.AdminEnableUserOK, error)) *MockClientService_AdminEnableUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminGetUserAuthTokens provides a mock function with given fields: userID, opts
func (_m *MockClientService) AdminGetUserAuthTokens(userID int64, opts ...admin_users.ClientOption) (*admin_users.AdminGetUserAuthTokensOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetUserAuthTokens")
	}

	var r0 *admin_users.AdminGetUserAuthTokensOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) (*admin_users.AdminGetUserAuthTokensOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) *admin_users.AdminGetUserAuthTokensOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminGetUserAuthTokensOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminGetUserAuthTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminGetUserAuthTokens'
type MockClientService_AdminGetUserAuthTokens_Call struct {
	*mock.Call
}

// AdminGetUserAuthTokens is a helper method to define mock.On call
//   - userID int64
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminGetUserAuthTokens(userID interface{}, opts ...interface{}) *MockClientService_AdminGetUserAuthTokens_Call {
	return &MockClientService_AdminGetUserAuthTokens_Call{Call: _e.mock.On("AdminGetUserAuthTokens",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_AdminGetUserAuthTokens_Call) Run(run func(userID int64, opts ...admin_users.ClientOption)) *MockClientService_AdminGetUserAuthTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminGetUserAuthTokens_Call) Return(_a0 *admin_users.AdminGetUserAuthTokensOK, _a1 error) *MockClientService_AdminGetUserAuthTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminGetUserAuthTokens_Call) RunAndReturn(run func(int64, ...admin_users.ClientOption) (*admin_users.AdminGetUserAuthTokensOK, error)) *MockClientService_AdminGetUserAuthTokens_Call {
	_c.Call.Return(run)
	return _c
}

// AdminGetUserAuthTokensWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminGetUserAuthTokensWithParams(params *admin_users.AdminGetUserAuthTokensParams, opts ...admin_users.ClientOption) (*admin_users.AdminGetUserAuthTokensOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetUserAuthTokensWithParams")
	}

	var r0 *admin_users.AdminGetUserAuthTokensOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminGetUserAuthTokensParams, ...admin_users.ClientOption) (*admin_users.AdminGetUserAuthTokensOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminGetUserAuthTokensParams, ...admin_users.ClientOption) *admin_users.AdminGetUserAuthTokensOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminGetUserAuthTokensOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminGetUserAuthTokensParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminGetUserAuthTokensWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminGetUserAuthTokensWithParams'
type MockClientService_AdminGetUserAuthTokensWithParams_Call struct {
	*mock.Call
}

// AdminGetUserAuthTokensWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminGetUserAuthTokensParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminGetUserAuthTokensWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminGetUserAuthTokensWithParams_Call {
	return &MockClientService_AdminGetUserAuthTokensWithParams_Call{Call: _e.mock.On("AdminGetUserAuthTokensWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminGetUserAuthTokensWithParams_Call) Run(run func(params *admin_users.AdminGetUserAuthTokensParams, opts ...admin_users.ClientOption)) *MockClientService_AdminGetUserAuthTokensWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminGetUserAuthTokensParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminGetUserAuthTokensWithParams_Call) Return(_a0 *admin_users.AdminGetUserAuthTokensOK, _a1 error) *MockClientService_AdminGetUserAuthTokensWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminGetUserAuthTokensWithParams_Call) RunAndReturn(run func(*admin_users.AdminGetUserAuthTokensParams, ...admin_users.ClientOption) (*admin_users.AdminGetUserAuthTokensOK, error)) *MockClientService_AdminGetUserAuthTokensWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminLogoutUser provides a mock function with given fields: userID, opts
func (_m *MockClientService) AdminLogoutUser(userID int64, opts ...admin_users.ClientOption) (*admin_users.AdminLogoutUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminLogoutUser")
	}

	var r0 *admin_users.AdminLogoutUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) (*admin_users.AdminLogoutUserOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) *admin_users.AdminLogoutUserOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminLogoutUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminLogoutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminLogoutUser'
type MockClientService_AdminLogoutUser_Call struct {
	*mock.Call
}

// AdminLogoutUser is a helper method to define mock.On call
//   - userID int64
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminLogoutUser(userID interface{}, opts ...interface{}) *MockClientService_AdminLogoutUser_Call {
	return &MockClientService_AdminLogoutUser_Call{Call: _e.mock.On("AdminLogoutUser",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_AdminLogoutUser_Call) Run(run func(userID int64, opts ...admin_users.ClientOption)) *MockClientService_AdminLogoutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminLogoutUser_Call) Return(_a0 *admin_users.AdminLogoutUserOK, _a1 error) *MockClientService_AdminLogoutUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminLogoutUser_Call) RunAndReturn(run func(int64, ...admin_users.ClientOption) (*admin_users.AdminLogoutUserOK, error)) *MockClientService_AdminLogoutUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminLogoutUserWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminLogoutUserWithParams(params *admin_users.AdminLogoutUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminLogoutUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminLogoutUserWithParams")
	}

	var r0 *admin_users.AdminLogoutUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminLogoutUserParams, ...admin_users.ClientOption) (*admin_users.AdminLogoutUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminLogoutUserParams, ...admin_users.ClientOption) *admin_users.AdminLogoutUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminLogoutUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminLogoutUserParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminLogoutUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminLogoutUserWithParams'
type MockClientService_AdminLogoutUserWithParams_Call struct {
	*mock.Call
}

// AdminLogoutUserWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminLogoutUserParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminLogoutUserWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminLogoutUserWithParams_Call {
	return &MockClientService_AdminLogoutUserWithParams_Call{Call: _e.mock.On("AdminLogoutUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminLogoutUserWithParams_Call) Run(run func(params *admin_users.AdminLogoutUserParams, opts ...admin_users.ClientOption)) *MockClientService_AdminLogoutUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminLogoutUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminLogoutUserWithParams_Call) Return(_a0 *admin_users.AdminLogoutUserOK, _a1 error) *MockClientService_AdminLogoutUserWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminLogoutUserWithParams_Call) RunAndReturn(run func(*admin_users.AdminLogoutUserParams, ...admin_users.ClientOption) (*admin_users.AdminLogoutUserOK, error)) *MockClientService_AdminLogoutUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminRevokeUserAuthToken provides a mock function with given fields: userID, body, opts
func (_m *MockClientService) AdminRevokeUserAuthToken(userID int64, body *models.RevokeAuthTokenCmd, opts ...admin_users.ClientOption) (*admin_users.AdminRevokeUserAuthTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminRevokeUserAuthToken")
	}

	var r0 *admin_users.AdminRevokeUserAuthTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.RevokeAuthTokenCmd, ...admin_users.ClientOption) (*admin_users.AdminRevokeUserAuthTokenOK, error)); ok {
		return rf(userID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.RevokeAuthTokenCmd, ...admin_users.ClientOption) *admin_users.AdminRevokeUserAuthTokenOK); ok {
		r0 = rf(userID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminRevokeUserAuthTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.RevokeAuthTokenCmd, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminRevokeUserAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminRevokeUserAuthToken'
type MockClientService_AdminRevokeUserAuthToken_Call struct {
	*mock.Call
}

// AdminRevokeUserAuthToken is a helper method to define mock.On call
//   - userID int64
//   - body *models.RevokeAuthTokenCmd
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminRevokeUserAuthToken(userID interface{}, body interface{}, opts ...interface{}) *MockClientService_AdminRevokeUserAuthToken_Call {
	return &MockClientService_AdminRevokeUserAuthToken_Call{Call: _e.mock.On("AdminRevokeUserAuthToken",
		append([]interface{}{userID, body}, opts...)...)}
}

func (_c *MockClientService_AdminRevokeUserAuthToken_Call) Run(run func(userID int64, body *models.RevokeAuthTokenCmd, opts ...admin_users.ClientOption)) *MockClientService_AdminRevokeUserAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.RevokeAuthTokenCmd), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminRevokeUserAuthToken_Call) Return(_a0 *admin_users.AdminRevokeUserAuthTokenOK, _a1 error) *MockClientService_AdminRevokeUserAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminRevokeUserAuthToken_Call) RunAndReturn(run func(int64, *models.RevokeAuthTokenCmd, ...admin_users.ClientOption) (*admin_users.AdminRevokeUserAuthTokenOK, error)) *MockClientService_AdminRevokeUserAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// AdminRevokeUserAuthTokenWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminRevokeUserAuthTokenWithParams(params *admin_users.AdminRevokeUserAuthTokenParams, opts ...admin_users.ClientOption) (*admin_users.AdminRevokeUserAuthTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminRevokeUserAuthTokenWithParams")
	}

	var r0 *admin_users.AdminRevokeUserAuthTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminRevokeUserAuthTokenParams, ...admin_users.ClientOption) (*admin_users.AdminRevokeUserAuthTokenOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminRevokeUserAuthTokenParams, ...admin_users.ClientOption) *admin_users.AdminRevokeUserAuthTokenOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminRevokeUserAuthTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminRevokeUserAuthTokenParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminRevokeUserAuthTokenWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminRevokeUserAuthTokenWithParams'
type MockClientService_AdminRevokeUserAuthTokenWithParams_Call struct {
	*mock.Call
}

// AdminRevokeUserAuthTokenWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminRevokeUserAuthTokenParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminRevokeUserAuthTokenWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminRevokeUserAuthTokenWithParams_Call {
	return &MockClientService_AdminRevokeUserAuthTokenWithParams_Call{Call: _e.mock.On("AdminRevokeUserAuthTokenWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminRevokeUserAuthTokenWithParams_Call) Run(run func(params *admin_users.AdminRevokeUserAuthTokenParams, opts ...admin_users.ClientOption)) *MockClientService_AdminRevokeUserAuthTokenWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminRevokeUserAuthTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminRevokeUserAuthTokenWithParams_Call) Return(_a0 *admin_users.AdminRevokeUserAuthTokenOK, _a1 error) *MockClientService_AdminRevokeUserAuthTokenWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminRevokeUserAuthTokenWithParams_Call) RunAndReturn(run func(*admin_users.AdminRevokeUserAuthTokenParams, ...admin_users.ClientOption) (*admin_users.AdminRevokeUserAuthTokenOK, error)) *MockClientService_AdminRevokeUserAuthTokenWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminUpdateUserPassword provides a mock function with given fields: userID, body, opts
func (_m *MockClientService) AdminUpdateUserPassword(userID int64, body *models.AdminUpdateUserPasswordForm, opts ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPasswordOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateUserPassword")
	}

	var r0 *admin_users.AdminUpdateUserPasswordOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.AdminUpdateUserPasswordForm, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPasswordOK, error)); ok {
		return rf(userID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.AdminUpdateUserPasswordForm, ...admin_users.ClientOption) *admin_users.AdminUpdateUserPasswordOK); ok {
		r0 = rf(userID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminUpdateUserPasswordOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.AdminUpdateUserPasswordForm, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminUpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminUpdateUserPassword'
type MockClientService_AdminUpdateUserPassword_Call struct {
	*mock.Call
}

// AdminUpdateUserPassword is a helper method to define mock.On call
//   - userID int64
//   - body *models.AdminUpdateUserPasswordForm
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminUpdateUserPassword(userID interface{}, body interface{}, opts ...interface{}) *MockClientService_AdminUpdateUserPassword_Call {
	return &MockClientService_AdminUpdateUserPassword_Call{Call: _e.mock.On("AdminUpdateUserPassword",
		append([]interface{}{userID, body}, opts...)...)}
}

func (_c *MockClientService_AdminUpdateUserPassword_Call) Run(run func(userID int64, body *models.AdminUpdateUserPasswordForm, opts ...admin_users.ClientOption)) *MockClientService_AdminUpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.AdminUpdateUserPasswordForm), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminUpdateUserPassword_Call) Return(_a0 *admin_users.AdminUpdateUserPasswordOK, _a1 error) *MockClientService_AdminUpdateUserPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminUpdateUserPassword_Call) RunAndReturn(run func(int64, *models.AdminUpdateUserPasswordForm, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPasswordOK, error)) *MockClientService_AdminUpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// AdminUpdateUserPasswordWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminUpdateUserPasswordWithParams(params *admin_users.AdminUpdateUserPasswordParams, opts ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPasswordOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateUserPasswordWithParams")
	}

	var r0 *admin_users.AdminUpdateUserPasswordOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminUpdateUserPasswordParams, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPasswordOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminUpdateUserPasswordParams, ...admin_users.ClientOption) *admin_users.AdminUpdateUserPasswordOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminUpdateUserPasswordOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminUpdateUserPasswordParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminUpdateUserPasswordWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminUpdateUserPasswordWithParams'
type MockClientService_AdminUpdateUserPasswordWithParams_Call struct {
	*mock.Call
}

// AdminUpdateUserPasswordWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminUpdateUserPasswordParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminUpdateUserPasswordWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminUpdateUserPasswordWithParams_Call {
	return &MockClientService_AdminUpdateUserPasswordWithParams_Call{Call: _e.mock.On("AdminUpdateUserPasswordWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminUpdateUserPasswordWithParams_Call) Run(run func(params *admin_users.AdminUpdateUserPasswordParams, opts ...admin_users.ClientOption)) *MockClientService_AdminUpdateUserPasswordWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminUpdateUserPasswordParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminUpdateUserPasswordWithParams_Call) Return(_a0 *admin_users.AdminUpdateUserPasswordOK, _a1 error) *MockClientService_AdminUpdateUserPasswordWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminUpdateUserPasswordWithParams_Call) RunAndReturn(run func(*admin_users.AdminUpdateUserPasswordParams, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPasswordOK, error)) *MockClientService_AdminUpdateUserPasswordWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AdminUpdateUserPermissions provides a mock function with given fields: userID, body, opts
func (_m *MockClientService) AdminUpdateUserPermissions(userID int64, body *models.AdminUpdateUserPermissionsForm, opts ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateUserPermissions")
	}

	var r0 *admin_users.AdminUpdateUserPermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.AdminUpdateUserPermissionsForm, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPermissionsOK, error)); ok {
		return rf(userID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.AdminUpdateUserPermissionsForm, ...admin_users.ClientOption) *admin_users.AdminUpdateUserPermissionsOK); ok {
		r0 = rf(userID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminUpdateUserPermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.AdminUpdateUserPermissionsForm, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminUpdateUserPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminUpdateUserPermissions'
type MockClientService_AdminUpdateUserPermissions_Call struct {
	*mock.Call
}

// AdminUpdateUserPermissions is a helper method to define mock.On call
//   - userID int64
//   - body *models.AdminUpdateUserPermissionsForm
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminUpdateUserPermissions(userID interface{}, body interface{}, opts ...interface{}) *MockClientService_AdminUpdateUserPermissions_Call {
	return &MockClientService_AdminUpdateUserPermissions_Call{Call: _e.mock.On("AdminUpdateUserPermissions",
		append([]interface{}{userID, body}, opts...)...)}
}

func (_c *MockClientService_AdminUpdateUserPermissions_Call) Run(run func(userID int64, body *models.AdminUpdateUserPermissionsForm, opts ...admin_users.ClientOption)) *MockClientService_AdminUpdateUserPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.AdminUpdateUserPermissionsForm), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminUpdateUserPermissions_Call) Return(_a0 *admin_users.AdminUpdateUserPermissionsOK, _a1 error) *MockClientService_AdminUpdateUserPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminUpdateUserPermissions_Call) RunAndReturn(run func(int64, *models.AdminUpdateUserPermissionsForm, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPermissionsOK, error)) *MockClientService_AdminUpdateUserPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// AdminUpdateUserPermissionsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AdminUpdateUserPermissionsWithParams(params *admin_users.AdminUpdateUserPermissionsParams, opts ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateUserPermissionsWithParams")
	}

	var r0 *admin_users.AdminUpdateUserPermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.AdminUpdateUserPermissionsParams, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPermissionsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.AdminUpdateUserPermissionsParams, ...admin_users.ClientOption) *admin_users.AdminUpdateUserPermissionsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminUpdateUserPermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.AdminUpdateUserPermissionsParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AdminUpdateUserPermissionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminUpdateUserPermissionsWithParams'
type MockClientService_AdminUpdateUserPermissionsWithParams_Call struct {
	*mock.Call
}

// AdminUpdateUserPermissionsWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminUpdateUserPermissionsParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) AdminUpdateUserPermissionsWithParams(params interface{}, opts ...interface{}) *MockClientService_AdminUpdateUserPermissionsWithParams_Call {
	return &MockClientService_AdminUpdateUserPermissionsWithParams_Call{Call: _e.mock.On("AdminUpdateUserPermissionsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AdminUpdateUserPermissionsWithParams_Call) Run(run func(params *admin_users.AdminUpdateUserPermissionsParams, opts ...admin_users.ClientOption)) *MockClientService_AdminUpdateUserPermissionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.AdminUpdateUserPermissionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AdminUpdateUserPermissionsWithParams_Call) Return(_a0 *admin_users.AdminUpdateUserPermissionsOK, _a1 error) *MockClientService_AdminUpdateUserPermissionsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AdminUpdateUserPermissionsWithParams_Call) RunAndReturn(run func(*admin_users.AdminUpdateUserPermissionsParams, ...admin_users.ClientOption) (*admin_users.AdminUpdateUserPermissionsOK, error)) *MockClientService_AdminUpdateUserPermissionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserQuota provides a mock function with given fields: userID, opts
func (_m *MockClientService) GetUserQuota(userID int64, opts ...admin_users.ClientOption) (*admin_users.GetUserQuotaOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserQuota")
	}

	var r0 *admin_users.GetUserQuotaOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) (*admin_users.GetUserQuotaOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...admin_users.ClientOption) *admin_users.GetUserQuotaOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.GetUserQuotaOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...admin_users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserQuota'
type MockClientService_GetUserQuota_Call struct {
	*mock.Call
}

// GetUserQuota is a helper method to define mock.On call
//   - userID int64
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) GetUserQuota(userID interface{}, opts ...interface{}) *MockClientService_GetUserQuota_Call {
	return &MockClientService_GetUserQuota_Call{Call: _e.mock.On("GetUserQuota",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_GetUserQuota_Call) Run(run func(userID int64, opts ...admin_users.ClientOption)) *MockClientService_GetUserQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserQuota_Call) Return(_a0 *admin_users.GetUserQuotaOK, _a1 error) *MockClientService_GetUserQuota_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserQuota_Call) RunAndReturn(run func(int64, ...admin_users.ClientOption) (*admin_users.GetUserQuotaOK, error)) *MockClientService_GetUserQuota_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserQuotaWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetUserQuotaWithParams(params *admin_users.GetUserQuotaParams, opts ...admin_users.ClientOption) (*admin_users.GetUserQuotaOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserQuotaWithParams")
	}

	var r0 *admin_users.GetUserQuotaOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.GetUserQuotaParams, ...admin_users.ClientOption) (*admin_users.GetUserQuotaOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.GetUserQuotaParams, ...admin_users.ClientOption) *admin_users.GetUserQuotaOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.GetUserQuotaOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.GetUserQuotaParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserQuotaWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserQuotaWithParams'
type MockClientService_GetUserQuotaWithParams_Call struct {
	*mock.Call
}

// GetUserQuotaWithParams is a helper method to define mock.On call
//   - params *admin_users.GetUserQuotaParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) GetUserQuotaWithParams(params interface{}, opts ...interface{}) *MockClientService_GetUserQuotaWithParams_Call {
	return &MockClientService_GetUserQuotaWithParams_Call{Call: _e.mock.On("GetUserQuotaWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetUserQuotaWithParams_Call) Run(run func(params *admin_users.GetUserQuotaParams, opts ...admin_users.ClientOption)) *MockClientService_GetUserQuotaWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.GetUserQuotaParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserQuotaWithParams_Call) Return(_a0 *admin_users.GetUserQuotaOK, _a1 error) *MockClientService_GetUserQuotaWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserQuotaWithParams_Call) RunAndReturn(run func(*admin_users.GetUserQuotaParams, ...admin_users.ClientOption) (*admin_users.GetUserQuotaOK, error)) *MockClientService_GetUserQuotaWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserQuota provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateUserQuota(params *admin_users.UpdateUserQuotaParams, opts ...admin_users.ClientOption) (*admin_users.UpdateUserQuotaOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserQuota")
	}

	var r0 *admin_users.UpdateUserQuotaOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin_users.UpdateUserQuotaParams, ...admin_users.ClientOption) (*admin_users.UpdateUserQuotaOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*admin_users.UpdateUserQuotaParams, ...admin_users.ClientOption) *admin_users.UpdateUserQuotaOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.UpdateUserQuotaOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin_users.UpdateUserQuotaParams, ...admin_users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateUserQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserQuota'
type MockClientService_UpdateUserQuota_Call struct {
	*mock.Call
}

// UpdateUserQuota is a helper method to define mock.On call
//   - params *admin_users.UpdateUserQuotaParams
//   - opts ...admin_users.ClientOption
func (_e *MockClientService_Expecter) UpdateUserQuota(params interface{}, opts ...interface{}) *MockClientService_UpdateUserQuota_Call {
	return &MockClientService_UpdateUserQuota_Call{Call: _e.mock.On("UpdateUserQuota",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateUserQuota_Call) Run(run func(params *admin_users.UpdateUserQuotaParams, opts ...admin_users.ClientOption)) *MockClientService_UpdateUserQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]admin_users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(admin_users.ClientOption)
			}
		}
		run(args[0].(*admin_users.UpdateUserQuotaParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateUserQuota_Call) Return(_a0 *admin_users.UpdateUserQuotaOK, _a1 error) *MockClientService_UpdateUserQuota_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateUserQuota_Call) RunAndReturn(run func(*admin_users.UpdateUserQuotaParams, ...admin_users.ClientOption) (*admin_users.UpdateUserQuotaOK, error)) *MockClientService_UpdateUserQuota_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
