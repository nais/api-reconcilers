// Code generated by mockery. DO NOT EDIT.

package grafana_mock_provisioning

import (
	runtime "github.com/go-openapi/runtime"
	provisioning "github.com/grafana/grafana-openapi-client-go/client/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// DeleteAlertRule provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteAlertRule(params *provisioning.DeleteAlertRuleParams, opts ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertRule")
	}

	var r0 *provisioning.DeleteAlertRuleNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteAlertRuleParams, ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleNoContent, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteAlertRuleParams, ...provisioning.ClientOption) *provisioning.DeleteAlertRuleNoContent); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteAlertRuleNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.DeleteAlertRuleParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAlertRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertRule'
type MockClientService_DeleteAlertRule_Call struct {
	*mock.Call
}

// DeleteAlertRule is a helper method to define mock.On call
//   - params *provisioning.DeleteAlertRuleParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteAlertRule(params interface{}, opts ...interface{}) *MockClientService_DeleteAlertRule_Call {
	return &MockClientService_DeleteAlertRule_Call{Call: _e.mock.On("DeleteAlertRule",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteAlertRule_Call) Run(run func(params *provisioning.DeleteAlertRuleParams, opts ...provisioning.ClientOption)) *MockClientService_DeleteAlertRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.DeleteAlertRuleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAlertRule_Call) Return(_a0 *provisioning.DeleteAlertRuleNoContent, _a1 error) *MockClientService_DeleteAlertRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAlertRule_Call) RunAndReturn(run func(*provisioning.DeleteAlertRuleParams, ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleNoContent, error)) *MockClientService_DeleteAlertRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertRuleGroup provides a mock function with given fields: group, folderUID, opts
func (_m *MockClientService) DeleteAlertRuleGroup(group string, folderUID string, opts ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleGroupNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, folderUID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertRuleGroup")
	}

	var r0 *provisioning.DeleteAlertRuleGroupNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleGroupNoContent, error)); ok {
		return rf(group, folderUID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...provisioning.ClientOption) *provisioning.DeleteAlertRuleGroupNoContent); ok {
		r0 = rf(group, folderUID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteAlertRuleGroupNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, ...provisioning.ClientOption) error); ok {
		r1 = rf(group, folderUID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAlertRuleGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertRuleGroup'
type MockClientService_DeleteAlertRuleGroup_Call struct {
	*mock.Call
}

// DeleteAlertRuleGroup is a helper method to define mock.On call
//   - group string
//   - folderUID string
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteAlertRuleGroup(group interface{}, folderUID interface{}, opts ...interface{}) *MockClientService_DeleteAlertRuleGroup_Call {
	return &MockClientService_DeleteAlertRuleGroup_Call{Call: _e.mock.On("DeleteAlertRuleGroup",
		append([]interface{}{group, folderUID}, opts...)...)}
}

func (_c *MockClientService_DeleteAlertRuleGroup_Call) Run(run func(group string, folderUID string, opts ...provisioning.ClientOption)) *MockClientService_DeleteAlertRuleGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAlertRuleGroup_Call) Return(_a0 *provisioning.DeleteAlertRuleGroupNoContent, _a1 error) *MockClientService_DeleteAlertRuleGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAlertRuleGroup_Call) RunAndReturn(run func(string, string, ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleGroupNoContent, error)) *MockClientService_DeleteAlertRuleGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertRuleGroupWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteAlertRuleGroupWithParams(params *provisioning.DeleteAlertRuleGroupParams, opts ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleGroupNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertRuleGroupWithParams")
	}

	var r0 *provisioning.DeleteAlertRuleGroupNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteAlertRuleGroupParams, ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleGroupNoContent, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteAlertRuleGroupParams, ...provisioning.ClientOption) *provisioning.DeleteAlertRuleGroupNoContent); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteAlertRuleGroupNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.DeleteAlertRuleGroupParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAlertRuleGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertRuleGroupWithParams'
type MockClientService_DeleteAlertRuleGroupWithParams_Call struct {
	*mock.Call
}

// DeleteAlertRuleGroupWithParams is a helper method to define mock.On call
//   - params *provisioning.DeleteAlertRuleGroupParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteAlertRuleGroupWithParams(params interface{}, opts ...interface{}) *MockClientService_DeleteAlertRuleGroupWithParams_Call {
	return &MockClientService_DeleteAlertRuleGroupWithParams_Call{Call: _e.mock.On("DeleteAlertRuleGroupWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteAlertRuleGroupWithParams_Call) Run(run func(params *provisioning.DeleteAlertRuleGroupParams, opts ...provisioning.ClientOption)) *MockClientService_DeleteAlertRuleGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.DeleteAlertRuleGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAlertRuleGroupWithParams_Call) Return(_a0 *provisioning.DeleteAlertRuleGroupNoContent, _a1 error) *MockClientService_DeleteAlertRuleGroupWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAlertRuleGroupWithParams_Call) RunAndReturn(run func(*provisioning.DeleteAlertRuleGroupParams, ...provisioning.ClientOption) (*provisioning.DeleteAlertRuleGroupNoContent, error)) *MockClientService_DeleteAlertRuleGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContactpoints provides a mock function with given fields: uid, opts
func (_m *MockClientService) DeleteContactpoints(uid string, opts ...provisioning.ClientOption) (*provisioning.DeleteContactpointsAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, uid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactpoints")
	}

	var r0 *provisioning.DeleteContactpointsAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) (*provisioning.DeleteContactpointsAccepted, error)); ok {
		return rf(uid, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) *provisioning.DeleteContactpointsAccepted); ok {
		r0 = rf(uid, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteContactpointsAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...provisioning.ClientOption) error); ok {
		r1 = rf(uid, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteContactpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContactpoints'
type MockClientService_DeleteContactpoints_Call struct {
	*mock.Call
}

// DeleteContactpoints is a helper method to define mock.On call
//   - uid string
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteContactpoints(uid interface{}, opts ...interface{}) *MockClientService_DeleteContactpoints_Call {
	return &MockClientService_DeleteContactpoints_Call{Call: _e.mock.On("DeleteContactpoints",
		append([]interface{}{uid}, opts...)...)}
}

func (_c *MockClientService_DeleteContactpoints_Call) Run(run func(uid string, opts ...provisioning.ClientOption)) *MockClientService_DeleteContactpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteContactpoints_Call) Return(_a0 *provisioning.DeleteContactpointsAccepted, _a1 error) *MockClientService_DeleteContactpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteContactpoints_Call) RunAndReturn(run func(string, ...provisioning.ClientOption) (*provisioning.DeleteContactpointsAccepted, error)) *MockClientService_DeleteContactpoints_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContactpointsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteContactpointsWithParams(params *provisioning.DeleteContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.DeleteContactpointsAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactpointsWithParams")
	}

	var r0 *provisioning.DeleteContactpointsAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteContactpointsParams, ...provisioning.ClientOption) (*provisioning.DeleteContactpointsAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteContactpointsParams, ...provisioning.ClientOption) *provisioning.DeleteContactpointsAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteContactpointsAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.DeleteContactpointsParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteContactpointsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContactpointsWithParams'
type MockClientService_DeleteContactpointsWithParams_Call struct {
	*mock.Call
}

// DeleteContactpointsWithParams is a helper method to define mock.On call
//   - params *provisioning.DeleteContactpointsParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteContactpointsWithParams(params interface{}, opts ...interface{}) *MockClientService_DeleteContactpointsWithParams_Call {
	return &MockClientService_DeleteContactpointsWithParams_Call{Call: _e.mock.On("DeleteContactpointsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteContactpointsWithParams_Call) Run(run func(params *provisioning.DeleteContactpointsParams, opts ...provisioning.ClientOption)) *MockClientService_DeleteContactpointsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.DeleteContactpointsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteContactpointsWithParams_Call) Return(_a0 *provisioning.DeleteContactpointsAccepted, _a1 error) *MockClientService_DeleteContactpointsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteContactpointsWithParams_Call) RunAndReturn(run func(*provisioning.DeleteContactpointsParams, ...provisioning.ClientOption) (*provisioning.DeleteContactpointsAccepted, error)) *MockClientService_DeleteContactpointsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMuteTiming provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteMuteTiming(params *provisioning.DeleteMuteTimingParams, opts ...provisioning.ClientOption) (*provisioning.DeleteMuteTimingNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMuteTiming")
	}

	var r0 *provisioning.DeleteMuteTimingNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteMuteTimingParams, ...provisioning.ClientOption) (*provisioning.DeleteMuteTimingNoContent, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteMuteTimingParams, ...provisioning.ClientOption) *provisioning.DeleteMuteTimingNoContent); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteMuteTimingNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.DeleteMuteTimingParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteMuteTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMuteTiming'
type MockClientService_DeleteMuteTiming_Call struct {
	*mock.Call
}

// DeleteMuteTiming is a helper method to define mock.On call
//   - params *provisioning.DeleteMuteTimingParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteMuteTiming(params interface{}, opts ...interface{}) *MockClientService_DeleteMuteTiming_Call {
	return &MockClientService_DeleteMuteTiming_Call{Call: _e.mock.On("DeleteMuteTiming",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteMuteTiming_Call) Run(run func(params *provisioning.DeleteMuteTimingParams, opts ...provisioning.ClientOption)) *MockClientService_DeleteMuteTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.DeleteMuteTimingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteMuteTiming_Call) Return(_a0 *provisioning.DeleteMuteTimingNoContent, _a1 error) *MockClientService_DeleteMuteTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteMuteTiming_Call) RunAndReturn(run func(*provisioning.DeleteMuteTimingParams, ...provisioning.ClientOption) (*provisioning.DeleteMuteTimingNoContent, error)) *MockClientService_DeleteMuteTiming_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplate provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteTemplate(params *provisioning.DeleteTemplateParams, opts ...provisioning.ClientOption) (*provisioning.DeleteTemplateNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 *provisioning.DeleteTemplateNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteTemplateParams, ...provisioning.ClientOption) (*provisioning.DeleteTemplateNoContent, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.DeleteTemplateParams, ...provisioning.ClientOption) *provisioning.DeleteTemplateNoContent); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.DeleteTemplateNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.DeleteTemplateParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type MockClientService_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - params *provisioning.DeleteTemplateParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) DeleteTemplate(params interface{}, opts ...interface{}) *MockClientService_DeleteTemplate_Call {
	return &MockClientService_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteTemplate_Call) Run(run func(params *provisioning.DeleteTemplateParams, opts ...provisioning.ClientOption)) *MockClientService_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.DeleteTemplateParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteTemplate_Call) Return(_a0 *provisioning.DeleteTemplateNoContent, _a1 error) *MockClientService_DeleteTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteTemplate_Call) RunAndReturn(run func(*provisioning.DeleteTemplateParams, ...provisioning.ClientOption) (*provisioning.DeleteTemplateNoContent, error)) *MockClientService_DeleteTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ExportMuteTiming provides a mock function with given fields: params, opts
func (_m *MockClientService) ExportMuteTiming(params *provisioning.ExportMuteTimingParams, opts ...provisioning.ClientOption) (*provisioning.ExportMuteTimingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportMuteTiming")
	}

	var r0 *provisioning.ExportMuteTimingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.ExportMuteTimingParams, ...provisioning.ClientOption) (*provisioning.ExportMuteTimingOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.ExportMuteTimingParams, ...provisioning.ClientOption) *provisioning.ExportMuteTimingOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.ExportMuteTimingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.ExportMuteTimingParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExportMuteTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportMuteTiming'
type MockClientService_ExportMuteTiming_Call struct {
	*mock.Call
}

// ExportMuteTiming is a helper method to define mock.On call
//   - params *provisioning.ExportMuteTimingParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) ExportMuteTiming(params interface{}, opts ...interface{}) *MockClientService_ExportMuteTiming_Call {
	return &MockClientService_ExportMuteTiming_Call{Call: _e.mock.On("ExportMuteTiming",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ExportMuteTiming_Call) Run(run func(params *provisioning.ExportMuteTimingParams, opts ...provisioning.ClientOption)) *MockClientService_ExportMuteTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.ExportMuteTimingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExportMuteTiming_Call) Return(_a0 *provisioning.ExportMuteTimingOK, _a1 error) *MockClientService_ExportMuteTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExportMuteTiming_Call) RunAndReturn(run func(*provisioning.ExportMuteTimingParams, ...provisioning.ClientOption) (*provisioning.ExportMuteTimingOK, error)) *MockClientService_ExportMuteTiming_Call {
	_c.Call.Return(run)
	return _c
}

// ExportMuteTimings provides a mock function with given fields: params, opts
func (_m *MockClientService) ExportMuteTimings(params *provisioning.ExportMuteTimingsParams, opts ...provisioning.ClientOption) (*provisioning.ExportMuteTimingsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportMuteTimings")
	}

	var r0 *provisioning.ExportMuteTimingsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.ExportMuteTimingsParams, ...provisioning.ClientOption) (*provisioning.ExportMuteTimingsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.ExportMuteTimingsParams, ...provisioning.ClientOption) *provisioning.ExportMuteTimingsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.ExportMuteTimingsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.ExportMuteTimingsParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExportMuteTimings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportMuteTimings'
type MockClientService_ExportMuteTimings_Call struct {
	*mock.Call
}

// ExportMuteTimings is a helper method to define mock.On call
//   - params *provisioning.ExportMuteTimingsParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) ExportMuteTimings(params interface{}, opts ...interface{}) *MockClientService_ExportMuteTimings_Call {
	return &MockClientService_ExportMuteTimings_Call{Call: _e.mock.On("ExportMuteTimings",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ExportMuteTimings_Call) Run(run func(params *provisioning.ExportMuteTimingsParams, opts ...provisioning.ClientOption)) *MockClientService_ExportMuteTimings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.ExportMuteTimingsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExportMuteTimings_Call) Return(_a0 *provisioning.ExportMuteTimingsOK, _a1 error) *MockClientService_ExportMuteTimings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExportMuteTimings_Call) RunAndReturn(run func(*provisioning.ExportMuteTimingsParams, ...provisioning.ClientOption) (*provisioning.ExportMuteTimingsOK, error)) *MockClientService_ExportMuteTimings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRule provides a mock function with given fields: uid, opts
func (_m *MockClientService) GetAlertRule(uid string, opts ...provisioning.ClientOption) (*provisioning.GetAlertRuleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, uid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRule")
	}

	var r0 *provisioning.GetAlertRuleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) (*provisioning.GetAlertRuleOK, error)); ok {
		return rf(uid, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) *provisioning.GetAlertRuleOK); ok {
		r0 = rf(uid, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRuleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...provisioning.ClientOption) error); ok {
		r1 = rf(uid, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRule'
type MockClientService_GetAlertRule_Call struct {
	*mock.Call
}

// GetAlertRule is a helper method to define mock.On call
//   - uid string
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRule(uid interface{}, opts ...interface{}) *MockClientService_GetAlertRule_Call {
	return &MockClientService_GetAlertRule_Call{Call: _e.mock.On("GetAlertRule",
		append([]interface{}{uid}, opts...)...)}
}

func (_c *MockClientService_GetAlertRule_Call) Run(run func(uid string, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRule_Call) Return(_a0 *provisioning.GetAlertRuleOK, _a1 error) *MockClientService_GetAlertRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRule_Call) RunAndReturn(run func(string, ...provisioning.ClientOption) (*provisioning.GetAlertRuleOK, error)) *MockClientService_GetAlertRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRuleExport provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAlertRuleExport(params *provisioning.GetAlertRuleExportParams, opts ...provisioning.ClientOption) (*provisioning.GetAlertRuleExportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRuleExport")
	}

	var r0 *provisioning.GetAlertRuleExportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleExportParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleExportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleExportParams, ...provisioning.ClientOption) *provisioning.GetAlertRuleExportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRuleExportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetAlertRuleExportParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRuleExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRuleExport'
type MockClientService_GetAlertRuleExport_Call struct {
	*mock.Call
}

// GetAlertRuleExport is a helper method to define mock.On call
//   - params *provisioning.GetAlertRuleExportParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRuleExport(params interface{}, opts ...interface{}) *MockClientService_GetAlertRuleExport_Call {
	return &MockClientService_GetAlertRuleExport_Call{Call: _e.mock.On("GetAlertRuleExport",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAlertRuleExport_Call) Run(run func(params *provisioning.GetAlertRuleExportParams, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRuleExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetAlertRuleExportParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRuleExport_Call) Return(_a0 *provisioning.GetAlertRuleExportOK, _a1 error) *MockClientService_GetAlertRuleExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRuleExport_Call) RunAndReturn(run func(*provisioning.GetAlertRuleExportParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleExportOK, error)) *MockClientService_GetAlertRuleExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRuleGroup provides a mock function with given fields: group, folderUID, opts
func (_m *MockClientService) GetAlertRuleGroup(group string, folderUID string, opts ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, folderUID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRuleGroup")
	}

	var r0 *provisioning.GetAlertRuleGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupOK, error)); ok {
		return rf(group, folderUID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...provisioning.ClientOption) *provisioning.GetAlertRuleGroupOK); ok {
		r0 = rf(group, folderUID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRuleGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, ...provisioning.ClientOption) error); ok {
		r1 = rf(group, folderUID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRuleGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRuleGroup'
type MockClientService_GetAlertRuleGroup_Call struct {
	*mock.Call
}

// GetAlertRuleGroup is a helper method to define mock.On call
//   - group string
//   - folderUID string
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRuleGroup(group interface{}, folderUID interface{}, opts ...interface{}) *MockClientService_GetAlertRuleGroup_Call {
	return &MockClientService_GetAlertRuleGroup_Call{Call: _e.mock.On("GetAlertRuleGroup",
		append([]interface{}{group, folderUID}, opts...)...)}
}

func (_c *MockClientService_GetAlertRuleGroup_Call) Run(run func(group string, folderUID string, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRuleGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRuleGroup_Call) Return(_a0 *provisioning.GetAlertRuleGroupOK, _a1 error) *MockClientService_GetAlertRuleGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRuleGroup_Call) RunAndReturn(run func(string, string, ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupOK, error)) *MockClientService_GetAlertRuleGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRuleGroupExport provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAlertRuleGroupExport(params *provisioning.GetAlertRuleGroupExportParams, opts ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupExportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRuleGroupExport")
	}

	var r0 *provisioning.GetAlertRuleGroupExportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleGroupExportParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupExportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleGroupExportParams, ...provisioning.ClientOption) *provisioning.GetAlertRuleGroupExportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRuleGroupExportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetAlertRuleGroupExportParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRuleGroupExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRuleGroupExport'
type MockClientService_GetAlertRuleGroupExport_Call struct {
	*mock.Call
}

// GetAlertRuleGroupExport is a helper method to define mock.On call
//   - params *provisioning.GetAlertRuleGroupExportParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRuleGroupExport(params interface{}, opts ...interface{}) *MockClientService_GetAlertRuleGroupExport_Call {
	return &MockClientService_GetAlertRuleGroupExport_Call{Call: _e.mock.On("GetAlertRuleGroupExport",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAlertRuleGroupExport_Call) Run(run func(params *provisioning.GetAlertRuleGroupExportParams, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRuleGroupExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetAlertRuleGroupExportParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRuleGroupExport_Call) Return(_a0 *provisioning.GetAlertRuleGroupExportOK, _a1 error) *MockClientService_GetAlertRuleGroupExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRuleGroupExport_Call) RunAndReturn(run func(*provisioning.GetAlertRuleGroupExportParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupExportOK, error)) *MockClientService_GetAlertRuleGroupExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRuleGroupWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAlertRuleGroupWithParams(params *provisioning.GetAlertRuleGroupParams, opts ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRuleGroupWithParams")
	}

	var r0 *provisioning.GetAlertRuleGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleGroupParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleGroupParams, ...provisioning.ClientOption) *provisioning.GetAlertRuleGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRuleGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetAlertRuleGroupParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRuleGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRuleGroupWithParams'
type MockClientService_GetAlertRuleGroupWithParams_Call struct {
	*mock.Call
}

// GetAlertRuleGroupWithParams is a helper method to define mock.On call
//   - params *provisioning.GetAlertRuleGroupParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRuleGroupWithParams(params interface{}, opts ...interface{}) *MockClientService_GetAlertRuleGroupWithParams_Call {
	return &MockClientService_GetAlertRuleGroupWithParams_Call{Call: _e.mock.On("GetAlertRuleGroupWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAlertRuleGroupWithParams_Call) Run(run func(params *provisioning.GetAlertRuleGroupParams, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRuleGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetAlertRuleGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRuleGroupWithParams_Call) Return(_a0 *provisioning.GetAlertRuleGroupOK, _a1 error) *MockClientService_GetAlertRuleGroupWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRuleGroupWithParams_Call) RunAndReturn(run func(*provisioning.GetAlertRuleGroupParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleGroupOK, error)) *MockClientService_GetAlertRuleGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRuleWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAlertRuleWithParams(params *provisioning.GetAlertRuleParams, opts ...provisioning.ClientOption) (*provisioning.GetAlertRuleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRuleWithParams")
	}

	var r0 *provisioning.GetAlertRuleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRuleParams, ...provisioning.ClientOption) *provisioning.GetAlertRuleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRuleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetAlertRuleParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRuleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRuleWithParams'
type MockClientService_GetAlertRuleWithParams_Call struct {
	*mock.Call
}

// GetAlertRuleWithParams is a helper method to define mock.On call
//   - params *provisioning.GetAlertRuleParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRuleWithParams(params interface{}, opts ...interface{}) *MockClientService_GetAlertRuleWithParams_Call {
	return &MockClientService_GetAlertRuleWithParams_Call{Call: _e.mock.On("GetAlertRuleWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAlertRuleWithParams_Call) Run(run func(params *provisioning.GetAlertRuleParams, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRuleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetAlertRuleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRuleWithParams_Call) Return(_a0 *provisioning.GetAlertRuleOK, _a1 error) *MockClientService_GetAlertRuleWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRuleWithParams_Call) RunAndReturn(run func(*provisioning.GetAlertRuleParams, ...provisioning.ClientOption) (*provisioning.GetAlertRuleOK, error)) *MockClientService_GetAlertRuleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRules provides a mock function with given fields: opts
func (_m *MockClientService) GetAlertRules(opts ...provisioning.ClientOption) (*provisioning.GetAlertRulesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRules")
	}

	var r0 *provisioning.GetAlertRulesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.GetAlertRulesOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.GetAlertRulesOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRulesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRules'
type MockClientService_GetAlertRules_Call struct {
	*mock.Call
}

// GetAlertRules is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRules(opts ...interface{}) *MockClientService_GetAlertRules_Call {
	return &MockClientService_GetAlertRules_Call{Call: _e.mock.On("GetAlertRules",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_GetAlertRules_Call) Run(run func(opts ...provisioning.ClientOption)) *MockClientService_GetAlertRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRules_Call) Return(_a0 *provisioning.GetAlertRulesOK, _a1 error) *MockClientService_GetAlertRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRules_Call) RunAndReturn(run func(...provisioning.ClientOption) (*provisioning.GetAlertRulesOK, error)) *MockClientService_GetAlertRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRulesExport provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAlertRulesExport(params *provisioning.GetAlertRulesExportParams, opts ...provisioning.ClientOption) (*provisioning.GetAlertRulesExportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRulesExport")
	}

	var r0 *provisioning.GetAlertRulesExportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRulesExportParams, ...provisioning.ClientOption) (*provisioning.GetAlertRulesExportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRulesExportParams, ...provisioning.ClientOption) *provisioning.GetAlertRulesExportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRulesExportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetAlertRulesExportParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRulesExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRulesExport'
type MockClientService_GetAlertRulesExport_Call struct {
	*mock.Call
}

// GetAlertRulesExport is a helper method to define mock.On call
//   - params *provisioning.GetAlertRulesExportParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRulesExport(params interface{}, opts ...interface{}) *MockClientService_GetAlertRulesExport_Call {
	return &MockClientService_GetAlertRulesExport_Call{Call: _e.mock.On("GetAlertRulesExport",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAlertRulesExport_Call) Run(run func(params *provisioning.GetAlertRulesExportParams, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRulesExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetAlertRulesExportParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRulesExport_Call) Return(_a0 *provisioning.GetAlertRulesExportOK, _a1 error) *MockClientService_GetAlertRulesExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRulesExport_Call) RunAndReturn(run func(*provisioning.GetAlertRulesExportParams, ...provisioning.ClientOption) (*provisioning.GetAlertRulesExportOK, error)) *MockClientService_GetAlertRulesExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertRulesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetAlertRulesWithParams(params *provisioning.GetAlertRulesParams, opts ...provisioning.ClientOption) (*provisioning.GetAlertRulesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertRulesWithParams")
	}

	var r0 *provisioning.GetAlertRulesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRulesParams, ...provisioning.ClientOption) (*provisioning.GetAlertRulesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetAlertRulesParams, ...provisioning.ClientOption) *provisioning.GetAlertRulesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetAlertRulesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetAlertRulesParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAlertRulesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertRulesWithParams'
type MockClientService_GetAlertRulesWithParams_Call struct {
	*mock.Call
}

// GetAlertRulesWithParams is a helper method to define mock.On call
//   - params *provisioning.GetAlertRulesParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetAlertRulesWithParams(params interface{}, opts ...interface{}) *MockClientService_GetAlertRulesWithParams_Call {
	return &MockClientService_GetAlertRulesWithParams_Call{Call: _e.mock.On("GetAlertRulesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetAlertRulesWithParams_Call) Run(run func(params *provisioning.GetAlertRulesParams, opts ...provisioning.ClientOption)) *MockClientService_GetAlertRulesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetAlertRulesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAlertRulesWithParams_Call) Return(_a0 *provisioning.GetAlertRulesOK, _a1 error) *MockClientService_GetAlertRulesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAlertRulesWithParams_Call) RunAndReturn(run func(*provisioning.GetAlertRulesParams, ...provisioning.ClientOption) (*provisioning.GetAlertRulesOK, error)) *MockClientService_GetAlertRulesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetContactpoints provides a mock function with given fields: params, opts
func (_m *MockClientService) GetContactpoints(params *provisioning.GetContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.GetContactpointsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactpoints")
	}

	var r0 *provisioning.GetContactpointsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) (*provisioning.GetContactpointsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) *provisioning.GetContactpointsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetContactpointsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetContactpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactpoints'
type MockClientService_GetContactpoints_Call struct {
	*mock.Call
}

// GetContactpoints is a helper method to define mock.On call
//   - params *provisioning.GetContactpointsParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetContactpoints(params interface{}, opts ...interface{}) *MockClientService_GetContactpoints_Call {
	return &MockClientService_GetContactpoints_Call{Call: _e.mock.On("GetContactpoints",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetContactpoints_Call) Run(run func(params *provisioning.GetContactpointsParams, opts ...provisioning.ClientOption)) *MockClientService_GetContactpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetContactpointsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetContactpoints_Call) Return(_a0 *provisioning.GetContactpointsOK, _a1 error) *MockClientService_GetContactpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetContactpoints_Call) RunAndReturn(run func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) (*provisioning.GetContactpointsOK, error)) *MockClientService_GetContactpoints_Call {
	_c.Call.Return(run)
	return _c
}

// GetContactpointsExport provides a mock function with given fields: params, opts
func (_m *MockClientService) GetContactpointsExport(params *provisioning.GetContactpointsExportParams, opts ...provisioning.ClientOption) (*provisioning.GetContactpointsExportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactpointsExport")
	}

	var r0 *provisioning.GetContactpointsExportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetContactpointsExportParams, ...provisioning.ClientOption) (*provisioning.GetContactpointsExportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetContactpointsExportParams, ...provisioning.ClientOption) *provisioning.GetContactpointsExportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetContactpointsExportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetContactpointsExportParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetContactpointsExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactpointsExport'
type MockClientService_GetContactpointsExport_Call struct {
	*mock.Call
}

// GetContactpointsExport is a helper method to define mock.On call
//   - params *provisioning.GetContactpointsExportParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetContactpointsExport(params interface{}, opts ...interface{}) *MockClientService_GetContactpointsExport_Call {
	return &MockClientService_GetContactpointsExport_Call{Call: _e.mock.On("GetContactpointsExport",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetContactpointsExport_Call) Run(run func(params *provisioning.GetContactpointsExportParams, opts ...provisioning.ClientOption)) *MockClientService_GetContactpointsExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetContactpointsExportParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetContactpointsExport_Call) Return(_a0 *provisioning.GetContactpointsExportOK, _a1 error) *MockClientService_GetContactpointsExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetContactpointsExport_Call) RunAndReturn(run func(*provisioning.GetContactpointsExportParams, ...provisioning.ClientOption) (*provisioning.GetContactpointsExportOK, error)) *MockClientService_GetContactpointsExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetMuteTiming provides a mock function with given fields: name, opts
func (_m *MockClientService) GetMuteTiming(name string, opts ...provisioning.ClientOption) (*provisioning.GetMuteTimingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMuteTiming")
	}

	var r0 *provisioning.GetMuteTimingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) (*provisioning.GetMuteTimingOK, error)); ok {
		return rf(name, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) *provisioning.GetMuteTimingOK); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetMuteTimingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...provisioning.ClientOption) error); ok {
		r1 = rf(name, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetMuteTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMuteTiming'
type MockClientService_GetMuteTiming_Call struct {
	*mock.Call
}

// GetMuteTiming is a helper method to define mock.On call
//   - name string
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetMuteTiming(name interface{}, opts ...interface{}) *MockClientService_GetMuteTiming_Call {
	return &MockClientService_GetMuteTiming_Call{Call: _e.mock.On("GetMuteTiming",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockClientService_GetMuteTiming_Call) Run(run func(name string, opts ...provisioning.ClientOption)) *MockClientService_GetMuteTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetMuteTiming_Call) Return(_a0 *provisioning.GetMuteTimingOK, _a1 error) *MockClientService_GetMuteTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetMuteTiming_Call) RunAndReturn(run func(string, ...provisioning.ClientOption) (*provisioning.GetMuteTimingOK, error)) *MockClientService_GetMuteTiming_Call {
	_c.Call.Return(run)
	return _c
}

// GetMuteTimingWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetMuteTimingWithParams(params *provisioning.GetMuteTimingParams, opts ...provisioning.ClientOption) (*provisioning.GetMuteTimingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMuteTimingWithParams")
	}

	var r0 *provisioning.GetMuteTimingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetMuteTimingParams, ...provisioning.ClientOption) (*provisioning.GetMuteTimingOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetMuteTimingParams, ...provisioning.ClientOption) *provisioning.GetMuteTimingOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetMuteTimingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetMuteTimingParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetMuteTimingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMuteTimingWithParams'
type MockClientService_GetMuteTimingWithParams_Call struct {
	*mock.Call
}

// GetMuteTimingWithParams is a helper method to define mock.On call
//   - params *provisioning.GetMuteTimingParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetMuteTimingWithParams(params interface{}, opts ...interface{}) *MockClientService_GetMuteTimingWithParams_Call {
	return &MockClientService_GetMuteTimingWithParams_Call{Call: _e.mock.On("GetMuteTimingWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetMuteTimingWithParams_Call) Run(run func(params *provisioning.GetMuteTimingParams, opts ...provisioning.ClientOption)) *MockClientService_GetMuteTimingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetMuteTimingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetMuteTimingWithParams_Call) Return(_a0 *provisioning.GetMuteTimingOK, _a1 error) *MockClientService_GetMuteTimingWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetMuteTimingWithParams_Call) RunAndReturn(run func(*provisioning.GetMuteTimingParams, ...provisioning.ClientOption) (*provisioning.GetMuteTimingOK, error)) *MockClientService_GetMuteTimingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetMuteTimings provides a mock function with given fields: opts
func (_m *MockClientService) GetMuteTimings(opts ...provisioning.ClientOption) (*provisioning.GetMuteTimingsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMuteTimings")
	}

	var r0 *provisioning.GetMuteTimingsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.GetMuteTimingsOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.GetMuteTimingsOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetMuteTimingsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetMuteTimings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMuteTimings'
type MockClientService_GetMuteTimings_Call struct {
	*mock.Call
}

// GetMuteTimings is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetMuteTimings(opts ...interface{}) *MockClientService_GetMuteTimings_Call {
	return &MockClientService_GetMuteTimings_Call{Call: _e.mock.On("GetMuteTimings",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_GetMuteTimings_Call) Run(run func(opts ...provisioning.ClientOption)) *MockClientService_GetMuteTimings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetMuteTimings_Call) Return(_a0 *provisioning.GetMuteTimingsOK, _a1 error) *MockClientService_GetMuteTimings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetMuteTimings_Call) RunAndReturn(run func(...provisioning.ClientOption) (*provisioning.GetMuteTimingsOK, error)) *MockClientService_GetMuteTimings_Call {
	_c.Call.Return(run)
	return _c
}

// GetMuteTimingsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetMuteTimingsWithParams(params *provisioning.GetMuteTimingsParams, opts ...provisioning.ClientOption) (*provisioning.GetMuteTimingsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMuteTimingsWithParams")
	}

	var r0 *provisioning.GetMuteTimingsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetMuteTimingsParams, ...provisioning.ClientOption) (*provisioning.GetMuteTimingsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetMuteTimingsParams, ...provisioning.ClientOption) *provisioning.GetMuteTimingsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetMuteTimingsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetMuteTimingsParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetMuteTimingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMuteTimingsWithParams'
type MockClientService_GetMuteTimingsWithParams_Call struct {
	*mock.Call
}

// GetMuteTimingsWithParams is a helper method to define mock.On call
//   - params *provisioning.GetMuteTimingsParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetMuteTimingsWithParams(params interface{}, opts ...interface{}) *MockClientService_GetMuteTimingsWithParams_Call {
	return &MockClientService_GetMuteTimingsWithParams_Call{Call: _e.mock.On("GetMuteTimingsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetMuteTimingsWithParams_Call) Run(run func(params *provisioning.GetMuteTimingsParams, opts ...provisioning.ClientOption)) *MockClientService_GetMuteTimingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetMuteTimingsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetMuteTimingsWithParams_Call) Return(_a0 *provisioning.GetMuteTimingsOK, _a1 error) *MockClientService_GetMuteTimingsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetMuteTimingsWithParams_Call) RunAndReturn(run func(*provisioning.GetMuteTimingsParams, ...provisioning.ClientOption) (*provisioning.GetMuteTimingsOK, error)) *MockClientService_GetMuteTimingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyTree provides a mock function with given fields: opts
func (_m *MockClientService) GetPolicyTree(opts ...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyTree")
	}

	var r0 *provisioning.GetPolicyTreeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.GetPolicyTreeOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetPolicyTreeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetPolicyTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyTree'
type MockClientService_GetPolicyTree_Call struct {
	*mock.Call
}

// GetPolicyTree is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetPolicyTree(opts ...interface{}) *MockClientService_GetPolicyTree_Call {
	return &MockClientService_GetPolicyTree_Call{Call: _e.mock.On("GetPolicyTree",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_GetPolicyTree_Call) Run(run func(opts ...provisioning.ClientOption)) *MockClientService_GetPolicyTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetPolicyTree_Call) Return(_a0 *provisioning.GetPolicyTreeOK, _a1 error) *MockClientService_GetPolicyTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetPolicyTree_Call) RunAndReturn(run func(...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error)) *MockClientService_GetPolicyTree_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyTreeExport provides a mock function with given fields: opts
func (_m *MockClientService) GetPolicyTreeExport(opts ...provisioning.ClientOption) (*provisioning.GetPolicyTreeExportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyTreeExport")
	}

	var r0 *provisioning.GetPolicyTreeExportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.GetPolicyTreeExportOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.GetPolicyTreeExportOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetPolicyTreeExportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetPolicyTreeExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyTreeExport'
type MockClientService_GetPolicyTreeExport_Call struct {
	*mock.Call
}

// GetPolicyTreeExport is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetPolicyTreeExport(opts ...interface{}) *MockClientService_GetPolicyTreeExport_Call {
	return &MockClientService_GetPolicyTreeExport_Call{Call: _e.mock.On("GetPolicyTreeExport",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_GetPolicyTreeExport_Call) Run(run func(opts ...provisioning.ClientOption)) *MockClientService_GetPolicyTreeExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetPolicyTreeExport_Call) Return(_a0 *provisioning.GetPolicyTreeExportOK, _a1 error) *MockClientService_GetPolicyTreeExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetPolicyTreeExport_Call) RunAndReturn(run func(...provisioning.ClientOption) (*provisioning.GetPolicyTreeExportOK, error)) *MockClientService_GetPolicyTreeExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyTreeExportWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetPolicyTreeExportWithParams(params *provisioning.GetPolicyTreeExportParams, opts ...provisioning.ClientOption) (*provisioning.GetPolicyTreeExportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyTreeExportWithParams")
	}

	var r0 *provisioning.GetPolicyTreeExportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetPolicyTreeExportParams, ...provisioning.ClientOption) (*provisioning.GetPolicyTreeExportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetPolicyTreeExportParams, ...provisioning.ClientOption) *provisioning.GetPolicyTreeExportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetPolicyTreeExportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetPolicyTreeExportParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetPolicyTreeExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyTreeExportWithParams'
type MockClientService_GetPolicyTreeExportWithParams_Call struct {
	*mock.Call
}

// GetPolicyTreeExportWithParams is a helper method to define mock.On call
//   - params *provisioning.GetPolicyTreeExportParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetPolicyTreeExportWithParams(params interface{}, opts ...interface{}) *MockClientService_GetPolicyTreeExportWithParams_Call {
	return &MockClientService_GetPolicyTreeExportWithParams_Call{Call: _e.mock.On("GetPolicyTreeExportWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetPolicyTreeExportWithParams_Call) Run(run func(params *provisioning.GetPolicyTreeExportParams, opts ...provisioning.ClientOption)) *MockClientService_GetPolicyTreeExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetPolicyTreeExportParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetPolicyTreeExportWithParams_Call) Return(_a0 *provisioning.GetPolicyTreeExportOK, _a1 error) *MockClientService_GetPolicyTreeExportWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetPolicyTreeExportWithParams_Call) RunAndReturn(run func(*provisioning.GetPolicyTreeExportParams, ...provisioning.ClientOption) (*provisioning.GetPolicyTreeExportOK, error)) *MockClientService_GetPolicyTreeExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyTreeWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetPolicyTreeWithParams(params *provisioning.GetPolicyTreeParams, opts ...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyTreeWithParams")
	}

	var r0 *provisioning.GetPolicyTreeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetPolicyTreeParams, ...provisioning.ClientOption) *provisioning.GetPolicyTreeOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetPolicyTreeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetPolicyTreeParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetPolicyTreeWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyTreeWithParams'
type MockClientService_GetPolicyTreeWithParams_Call struct {
	*mock.Call
}

// GetPolicyTreeWithParams is a helper method to define mock.On call
//   - params *provisioning.GetPolicyTreeParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetPolicyTreeWithParams(params interface{}, opts ...interface{}) *MockClientService_GetPolicyTreeWithParams_Call {
	return &MockClientService_GetPolicyTreeWithParams_Call{Call: _e.mock.On("GetPolicyTreeWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetPolicyTreeWithParams_Call) Run(run func(params *provisioning.GetPolicyTreeParams, opts ...provisioning.ClientOption)) *MockClientService_GetPolicyTreeWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetPolicyTreeParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetPolicyTreeWithParams_Call) Return(_a0 *provisioning.GetPolicyTreeOK, _a1 error) *MockClientService_GetPolicyTreeWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetPolicyTreeWithParams_Call) RunAndReturn(run func(*provisioning.GetPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error)) *MockClientService_GetPolicyTreeWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplate provides a mock function with given fields: name, opts
func (_m *MockClientService) GetTemplate(name string, opts ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *provisioning.GetTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error)); ok {
		return rf(name, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) *provisioning.GetTemplateOK); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...provisioning.ClientOption) error); ok {
		r1 = rf(name, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type MockClientService_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - name string
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetTemplate(name interface{}, opts ...interface{}) *MockClientService_GetTemplate_Call {
	return &MockClientService_GetTemplate_Call{Call: _e.mock.On("GetTemplate",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockClientService_GetTemplate_Call) Run(run func(name string, opts ...provisioning.ClientOption)) *MockClientService_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTemplate_Call) Return(_a0 *provisioning.GetTemplateOK, _a1 error) *MockClientService_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTemplate_Call) RunAndReturn(run func(string, ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error)) *MockClientService_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetTemplateWithParams(params *provisioning.GetTemplateParams, opts ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateWithParams")
	}

	var r0 *provisioning.GetTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetTemplateParams, ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetTemplateParams, ...provisioning.ClientOption) *provisioning.GetTemplateOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetTemplateParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTemplateWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateWithParams'
type MockClientService_GetTemplateWithParams_Call struct {
	*mock.Call
}

// GetTemplateWithParams is a helper method to define mock.On call
//   - params *provisioning.GetTemplateParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetTemplateWithParams(params interface{}, opts ...interface{}) *MockClientService_GetTemplateWithParams_Call {
	return &MockClientService_GetTemplateWithParams_Call{Call: _e.mock.On("GetTemplateWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetTemplateWithParams_Call) Run(run func(params *provisioning.GetTemplateParams, opts ...provisioning.ClientOption)) *MockClientService_GetTemplateWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetTemplateParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTemplateWithParams_Call) Return(_a0 *provisioning.GetTemplateOK, _a1 error) *MockClientService_GetTemplateWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTemplateWithParams_Call) RunAndReturn(run func(*provisioning.GetTemplateParams, ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error)) *MockClientService_GetTemplateWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplates provides a mock function with given fields: opts
func (_m *MockClientService) GetTemplates(opts ...provisioning.ClientOption) (*provisioning.GetTemplatesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplates")
	}

	var r0 *provisioning.GetTemplatesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.GetTemplatesOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.GetTemplatesOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetTemplatesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplates'
type MockClientService_GetTemplates_Call struct {
	*mock.Call
}

// GetTemplates is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetTemplates(opts ...interface{}) *MockClientService_GetTemplates_Call {
	return &MockClientService_GetTemplates_Call{Call: _e.mock.On("GetTemplates",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_GetTemplates_Call) Run(run func(opts ...provisioning.ClientOption)) *MockClientService_GetTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTemplates_Call) Return(_a0 *provisioning.GetTemplatesOK, _a1 error) *MockClientService_GetTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTemplates_Call) RunAndReturn(run func(...provisioning.ClientOption) (*provisioning.GetTemplatesOK, error)) *MockClientService_GetTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplatesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetTemplatesWithParams(params *provisioning.GetTemplatesParams, opts ...provisioning.ClientOption) (*provisioning.GetTemplatesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplatesWithParams")
	}

	var r0 *provisioning.GetTemplatesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.GetTemplatesParams, ...provisioning.ClientOption) (*provisioning.GetTemplatesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.GetTemplatesParams, ...provisioning.ClientOption) *provisioning.GetTemplatesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetTemplatesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.GetTemplatesParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTemplatesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplatesWithParams'
type MockClientService_GetTemplatesWithParams_Call struct {
	*mock.Call
}

// GetTemplatesWithParams is a helper method to define mock.On call
//   - params *provisioning.GetTemplatesParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) GetTemplatesWithParams(params interface{}, opts ...interface{}) *MockClientService_GetTemplatesWithParams_Call {
	return &MockClientService_GetTemplatesWithParams_Call{Call: _e.mock.On("GetTemplatesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetTemplatesWithParams_Call) Run(run func(params *provisioning.GetTemplatesParams, opts ...provisioning.ClientOption)) *MockClientService_GetTemplatesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.GetTemplatesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTemplatesWithParams_Call) Return(_a0 *provisioning.GetTemplatesOK, _a1 error) *MockClientService_GetTemplatesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTemplatesWithParams_Call) RunAndReturn(run func(*provisioning.GetTemplatesParams, ...provisioning.ClientOption) (*provisioning.GetTemplatesOK, error)) *MockClientService_GetTemplatesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PostAlertRule provides a mock function with given fields: params, opts
func (_m *MockClientService) PostAlertRule(params *provisioning.PostAlertRuleParams, opts ...provisioning.ClientOption) (*provisioning.PostAlertRuleCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAlertRule")
	}

	var r0 *provisioning.PostAlertRuleCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PostAlertRuleParams, ...provisioning.ClientOption) (*provisioning.PostAlertRuleCreated, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PostAlertRuleParams, ...provisioning.ClientOption) *provisioning.PostAlertRuleCreated); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PostAlertRuleCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PostAlertRuleParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PostAlertRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAlertRule'
type MockClientService_PostAlertRule_Call struct {
	*mock.Call
}

// PostAlertRule is a helper method to define mock.On call
//   - params *provisioning.PostAlertRuleParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PostAlertRule(params interface{}, opts ...interface{}) *MockClientService_PostAlertRule_Call {
	return &MockClientService_PostAlertRule_Call{Call: _e.mock.On("PostAlertRule",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PostAlertRule_Call) Run(run func(params *provisioning.PostAlertRuleParams, opts ...provisioning.ClientOption)) *MockClientService_PostAlertRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PostAlertRuleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PostAlertRule_Call) Return(_a0 *provisioning.PostAlertRuleCreated, _a1 error) *MockClientService_PostAlertRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PostAlertRule_Call) RunAndReturn(run func(*provisioning.PostAlertRuleParams, ...provisioning.ClientOption) (*provisioning.PostAlertRuleCreated, error)) *MockClientService_PostAlertRule_Call {
	_c.Call.Return(run)
	return _c
}

// PostContactpoints provides a mock function with given fields: params, opts
func (_m *MockClientService) PostContactpoints(params *provisioning.PostContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.PostContactpointsAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostContactpoints")
	}

	var r0 *provisioning.PostContactpointsAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) (*provisioning.PostContactpointsAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) *provisioning.PostContactpointsAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PostContactpointsAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PostContactpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostContactpoints'
type MockClientService_PostContactpoints_Call struct {
	*mock.Call
}

// PostContactpoints is a helper method to define mock.On call
//   - params *provisioning.PostContactpointsParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PostContactpoints(params interface{}, opts ...interface{}) *MockClientService_PostContactpoints_Call {
	return &MockClientService_PostContactpoints_Call{Call: _e.mock.On("PostContactpoints",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PostContactpoints_Call) Run(run func(params *provisioning.PostContactpointsParams, opts ...provisioning.ClientOption)) *MockClientService_PostContactpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PostContactpointsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PostContactpoints_Call) Return(_a0 *provisioning.PostContactpointsAccepted, _a1 error) *MockClientService_PostContactpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PostContactpoints_Call) RunAndReturn(run func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) (*provisioning.PostContactpointsAccepted, error)) *MockClientService_PostContactpoints_Call {
	_c.Call.Return(run)
	return _c
}

// PostMuteTiming provides a mock function with given fields: params, opts
func (_m *MockClientService) PostMuteTiming(params *provisioning.PostMuteTimingParams, opts ...provisioning.ClientOption) (*provisioning.PostMuteTimingCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostMuteTiming")
	}

	var r0 *provisioning.PostMuteTimingCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PostMuteTimingParams, ...provisioning.ClientOption) (*provisioning.PostMuteTimingCreated, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PostMuteTimingParams, ...provisioning.ClientOption) *provisioning.PostMuteTimingCreated); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PostMuteTimingCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PostMuteTimingParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PostMuteTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMuteTiming'
type MockClientService_PostMuteTiming_Call struct {
	*mock.Call
}

// PostMuteTiming is a helper method to define mock.On call
//   - params *provisioning.PostMuteTimingParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PostMuteTiming(params interface{}, opts ...interface{}) *MockClientService_PostMuteTiming_Call {
	return &MockClientService_PostMuteTiming_Call{Call: _e.mock.On("PostMuteTiming",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PostMuteTiming_Call) Run(run func(params *provisioning.PostMuteTimingParams, opts ...provisioning.ClientOption)) *MockClientService_PostMuteTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PostMuteTimingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PostMuteTiming_Call) Return(_a0 *provisioning.PostMuteTimingCreated, _a1 error) *MockClientService_PostMuteTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PostMuteTiming_Call) RunAndReturn(run func(*provisioning.PostMuteTimingParams, ...provisioning.ClientOption) (*provisioning.PostMuteTimingCreated, error)) *MockClientService_PostMuteTiming_Call {
	_c.Call.Return(run)
	return _c
}

// PutAlertRule provides a mock function with given fields: params, opts
func (_m *MockClientService) PutAlertRule(params *provisioning.PutAlertRuleParams, opts ...provisioning.ClientOption) (*provisioning.PutAlertRuleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAlertRule")
	}

	var r0 *provisioning.PutAlertRuleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PutAlertRuleParams, ...provisioning.ClientOption) (*provisioning.PutAlertRuleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PutAlertRuleParams, ...provisioning.ClientOption) *provisioning.PutAlertRuleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutAlertRuleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PutAlertRuleParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PutAlertRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAlertRule'
type MockClientService_PutAlertRule_Call struct {
	*mock.Call
}

// PutAlertRule is a helper method to define mock.On call
//   - params *provisioning.PutAlertRuleParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PutAlertRule(params interface{}, opts ...interface{}) *MockClientService_PutAlertRule_Call {
	return &MockClientService_PutAlertRule_Call{Call: _e.mock.On("PutAlertRule",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PutAlertRule_Call) Run(run func(params *provisioning.PutAlertRuleParams, opts ...provisioning.ClientOption)) *MockClientService_PutAlertRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PutAlertRuleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PutAlertRule_Call) Return(_a0 *provisioning.PutAlertRuleOK, _a1 error) *MockClientService_PutAlertRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PutAlertRule_Call) RunAndReturn(run func(*provisioning.PutAlertRuleParams, ...provisioning.ClientOption) (*provisioning.PutAlertRuleOK, error)) *MockClientService_PutAlertRule_Call {
	_c.Call.Return(run)
	return _c
}

// PutAlertRuleGroup provides a mock function with given fields: params, opts
func (_m *MockClientService) PutAlertRuleGroup(params *provisioning.PutAlertRuleGroupParams, opts ...provisioning.ClientOption) (*provisioning.PutAlertRuleGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAlertRuleGroup")
	}

	var r0 *provisioning.PutAlertRuleGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PutAlertRuleGroupParams, ...provisioning.ClientOption) (*provisioning.PutAlertRuleGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PutAlertRuleGroupParams, ...provisioning.ClientOption) *provisioning.PutAlertRuleGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutAlertRuleGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PutAlertRuleGroupParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PutAlertRuleGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAlertRuleGroup'
type MockClientService_PutAlertRuleGroup_Call struct {
	*mock.Call
}

// PutAlertRuleGroup is a helper method to define mock.On call
//   - params *provisioning.PutAlertRuleGroupParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PutAlertRuleGroup(params interface{}, opts ...interface{}) *MockClientService_PutAlertRuleGroup_Call {
	return &MockClientService_PutAlertRuleGroup_Call{Call: _e.mock.On("PutAlertRuleGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PutAlertRuleGroup_Call) Run(run func(params *provisioning.PutAlertRuleGroupParams, opts ...provisioning.ClientOption)) *MockClientService_PutAlertRuleGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PutAlertRuleGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PutAlertRuleGroup_Call) Return(_a0 *provisioning.PutAlertRuleGroupOK, _a1 error) *MockClientService_PutAlertRuleGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PutAlertRuleGroup_Call) RunAndReturn(run func(*provisioning.PutAlertRuleGroupParams, ...provisioning.ClientOption) (*provisioning.PutAlertRuleGroupOK, error)) *MockClientService_PutAlertRuleGroup_Call {
	_c.Call.Return(run)
	return _c
}

// PutContactpoint provides a mock function with given fields: params, opts
func (_m *MockClientService) PutContactpoint(params *provisioning.PutContactpointParams, opts ...provisioning.ClientOption) (*provisioning.PutContactpointAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutContactpoint")
	}

	var r0 *provisioning.PutContactpointAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) (*provisioning.PutContactpointAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) *provisioning.PutContactpointAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutContactpointAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PutContactpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutContactpoint'
type MockClientService_PutContactpoint_Call struct {
	*mock.Call
}

// PutContactpoint is a helper method to define mock.On call
//   - params *provisioning.PutContactpointParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PutContactpoint(params interface{}, opts ...interface{}) *MockClientService_PutContactpoint_Call {
	return &MockClientService_PutContactpoint_Call{Call: _e.mock.On("PutContactpoint",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PutContactpoint_Call) Run(run func(params *provisioning.PutContactpointParams, opts ...provisioning.ClientOption)) *MockClientService_PutContactpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PutContactpointParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PutContactpoint_Call) Return(_a0 *provisioning.PutContactpointAccepted, _a1 error) *MockClientService_PutContactpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PutContactpoint_Call) RunAndReturn(run func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) (*provisioning.PutContactpointAccepted, error)) *MockClientService_PutContactpoint_Call {
	_c.Call.Return(run)
	return _c
}

// PutMuteTiming provides a mock function with given fields: params, opts
func (_m *MockClientService) PutMuteTiming(params *provisioning.PutMuteTimingParams, opts ...provisioning.ClientOption) (*provisioning.PutMuteTimingAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMuteTiming")
	}

	var r0 *provisioning.PutMuteTimingAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PutMuteTimingParams, ...provisioning.ClientOption) (*provisioning.PutMuteTimingAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PutMuteTimingParams, ...provisioning.ClientOption) *provisioning.PutMuteTimingAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutMuteTimingAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PutMuteTimingParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PutMuteTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMuteTiming'
type MockClientService_PutMuteTiming_Call struct {
	*mock.Call
}

// PutMuteTiming is a helper method to define mock.On call
//   - params *provisioning.PutMuteTimingParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PutMuteTiming(params interface{}, opts ...interface{}) *MockClientService_PutMuteTiming_Call {
	return &MockClientService_PutMuteTiming_Call{Call: _e.mock.On("PutMuteTiming",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PutMuteTiming_Call) Run(run func(params *provisioning.PutMuteTimingParams, opts ...provisioning.ClientOption)) *MockClientService_PutMuteTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PutMuteTimingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PutMuteTiming_Call) Return(_a0 *provisioning.PutMuteTimingAccepted, _a1 error) *MockClientService_PutMuteTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PutMuteTiming_Call) RunAndReturn(run func(*provisioning.PutMuteTimingParams, ...provisioning.ClientOption) (*provisioning.PutMuteTimingAccepted, error)) *MockClientService_PutMuteTiming_Call {
	_c.Call.Return(run)
	return _c
}

// PutPolicyTree provides a mock function with given fields: params, opts
func (_m *MockClientService) PutPolicyTree(params *provisioning.PutPolicyTreeParams, opts ...provisioning.ClientOption) (*provisioning.PutPolicyTreeAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPolicyTree")
	}

	var r0 *provisioning.PutPolicyTreeAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.PutPolicyTreeAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) *provisioning.PutPolicyTreeAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutPolicyTreeAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PutPolicyTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPolicyTree'
type MockClientService_PutPolicyTree_Call struct {
	*mock.Call
}

// PutPolicyTree is a helper method to define mock.On call
//   - params *provisioning.PutPolicyTreeParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PutPolicyTree(params interface{}, opts ...interface{}) *MockClientService_PutPolicyTree_Call {
	return &MockClientService_PutPolicyTree_Call{Call: _e.mock.On("PutPolicyTree",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PutPolicyTree_Call) Run(run func(params *provisioning.PutPolicyTreeParams, opts ...provisioning.ClientOption)) *MockClientService_PutPolicyTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PutPolicyTreeParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PutPolicyTree_Call) Return(_a0 *provisioning.PutPolicyTreeAccepted, _a1 error) *MockClientService_PutPolicyTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PutPolicyTree_Call) RunAndReturn(run func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.PutPolicyTreeAccepted, error)) *MockClientService_PutPolicyTree_Call {
	_c.Call.Return(run)
	return _c
}

// PutTemplate provides a mock function with given fields: params, opts
func (_m *MockClientService) PutTemplate(params *provisioning.PutTemplateParams, opts ...provisioning.ClientOption) (*provisioning.PutTemplateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutTemplate")
	}

	var r0 *provisioning.PutTemplateAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) (*provisioning.PutTemplateAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) *provisioning.PutTemplateAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutTemplateAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_PutTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTemplate'
type MockClientService_PutTemplate_Call struct {
	*mock.Call
}

// PutTemplate is a helper method to define mock.On call
//   - params *provisioning.PutTemplateParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) PutTemplate(params interface{}, opts ...interface{}) *MockClientService_PutTemplate_Call {
	return &MockClientService_PutTemplate_Call{Call: _e.mock.On("PutTemplate",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_PutTemplate_Call) Run(run func(params *provisioning.PutTemplateParams, opts ...provisioning.ClientOption)) *MockClientService_PutTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.PutTemplateParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_PutTemplate_Call) Return(_a0 *provisioning.PutTemplateAccepted, _a1 error) *MockClientService_PutTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_PutTemplate_Call) RunAndReturn(run func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) (*provisioning.PutTemplateAccepted, error)) *MockClientService_PutTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPolicyTree provides a mock function with given fields: opts
func (_m *MockClientService) ResetPolicyTree(opts ...provisioning.ClientOption) (*provisioning.ResetPolicyTreeAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetPolicyTree")
	}

	var r0 *provisioning.ResetPolicyTreeAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.ResetPolicyTreeAccepted, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.ResetPolicyTreeAccepted); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.ResetPolicyTreeAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ResetPolicyTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPolicyTree'
type MockClientService_ResetPolicyTree_Call struct {
	*mock.Call
}

// ResetPolicyTree is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) ResetPolicyTree(opts ...interface{}) *MockClientService_ResetPolicyTree_Call {
	return &MockClientService_ResetPolicyTree_Call{Call: _e.mock.On("ResetPolicyTree",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_ResetPolicyTree_Call) Run(run func(opts ...provisioning.ClientOption)) *MockClientService_ResetPolicyTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ResetPolicyTree_Call) Return(_a0 *provisioning.ResetPolicyTreeAccepted, _a1 error) *MockClientService_ResetPolicyTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ResetPolicyTree_Call) RunAndReturn(run func(...provisioning.ClientOption) (*provisioning.ResetPolicyTreeAccepted, error)) *MockClientService_ResetPolicyTree_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPolicyTreeWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) ResetPolicyTreeWithParams(params *provisioning.ResetPolicyTreeParams, opts ...provisioning.ClientOption) (*provisioning.ResetPolicyTreeAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetPolicyTreeWithParams")
	}

	var r0 *provisioning.ResetPolicyTreeAccepted
	var r1 error
	if rf, ok := ret.Get(0).(func(*provisioning.ResetPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.ResetPolicyTreeAccepted, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*provisioning.ResetPolicyTreeParams, ...provisioning.ClientOption) *provisioning.ResetPolicyTreeAccepted); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.ResetPolicyTreeAccepted)
		}
	}

	if rf, ok := ret.Get(1).(func(*provisioning.ResetPolicyTreeParams, ...provisioning.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ResetPolicyTreeWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPolicyTreeWithParams'
type MockClientService_ResetPolicyTreeWithParams_Call struct {
	*mock.Call
}

// ResetPolicyTreeWithParams is a helper method to define mock.On call
//   - params *provisioning.ResetPolicyTreeParams
//   - opts ...provisioning.ClientOption
func (_e *MockClientService_Expecter) ResetPolicyTreeWithParams(params interface{}, opts ...interface{}) *MockClientService_ResetPolicyTreeWithParams_Call {
	return &MockClientService_ResetPolicyTreeWithParams_Call{Call: _e.mock.On("ResetPolicyTreeWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ResetPolicyTreeWithParams_Call) Run(run func(params *provisioning.ResetPolicyTreeParams, opts ...provisioning.ClientOption)) *MockClientService_ResetPolicyTreeWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]provisioning.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(provisioning.ClientOption)
			}
		}
		run(args[0].(*provisioning.ResetPolicyTreeParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ResetPolicyTreeWithParams_Call) Return(_a0 *provisioning.ResetPolicyTreeAccepted, _a1 error) *MockClientService_ResetPolicyTreeWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ResetPolicyTreeWithParams_Call) RunAndReturn(run func(*provisioning.ResetPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.ResetPolicyTreeAccepted, error)) *MockClientService_ResetPolicyTreeWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
