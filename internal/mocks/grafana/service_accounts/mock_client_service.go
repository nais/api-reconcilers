// Code generated by mockery. DO NOT EDIT.

package grafana_mock_service_accounts

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	service_accounts "github.com/grafana/grafana-openapi-client-go/client/service_accounts"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// CreateServiceAccount provides a mock function with given fields: params, opts
func (_m *MockClientService) CreateServiceAccount(params *service_accounts.CreateServiceAccountParams, opts ...service_accounts.ClientOption) (*service_accounts.CreateServiceAccountCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *service_accounts.CreateServiceAccountCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.CreateServiceAccountCreated, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) *service_accounts.CreateServiceAccountCreated); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.CreateServiceAccountCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type MockClientService_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - params *service_accounts.CreateServiceAccountParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) CreateServiceAccount(params interface{}, opts ...interface{}) *MockClientService_CreateServiceAccount_Call {
	return &MockClientService_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_CreateServiceAccount_Call) Run(run func(params *service_accounts.CreateServiceAccountParams, opts ...service_accounts.ClientOption)) *MockClientService_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.CreateServiceAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateServiceAccount_Call) Return(_a0 *service_accounts.CreateServiceAccountCreated, _a1 error) *MockClientService_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateServiceAccount_Call) RunAndReturn(run func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.CreateServiceAccountCreated, error)) *MockClientService_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateToken provides a mock function with given fields: params, opts
func (_m *MockClientService) CreateToken(params *service_accounts.CreateTokenParams, opts ...service_accounts.ClientOption) (*service_accounts.CreateTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *service_accounts.CreateTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.CreateTokenParams, ...service_accounts.ClientOption) (*service_accounts.CreateTokenOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.CreateTokenParams, ...service_accounts.ClientOption) *service_accounts.CreateTokenOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.CreateTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.CreateTokenParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockClientService_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - params *service_accounts.CreateTokenParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) CreateToken(params interface{}, opts ...interface{}) *MockClientService_CreateToken_Call {
	return &MockClientService_CreateToken_Call{Call: _e.mock.On("CreateToken",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_CreateToken_Call) Run(run func(params *service_accounts.CreateTokenParams, opts ...service_accounts.ClientOption)) *MockClientService_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.CreateTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateToken_Call) Return(_a0 *service_accounts.CreateTokenOK, _a1 error) *MockClientService_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateToken_Call) RunAndReturn(run func(*service_accounts.CreateTokenParams, ...service_accounts.ClientOption) (*service_accounts.CreateTokenOK, error)) *MockClientService_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: serviceAccountID, opts
func (_m *MockClientService) DeleteServiceAccount(serviceAccountID int64, opts ...service_accounts.ClientOption) (*service_accounts.DeleteServiceAccountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, serviceAccountID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 *service_accounts.DeleteServiceAccountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...service_accounts.ClientOption) (*service_accounts.DeleteServiceAccountOK, error)); ok {
		return rf(serviceAccountID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...service_accounts.ClientOption) *service_accounts.DeleteServiceAccountOK); ok {
		r0 = rf(serviceAccountID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.DeleteServiceAccountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...service_accounts.ClientOption) error); ok {
		r1 = rf(serviceAccountID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type MockClientService_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - serviceAccountID int64
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) DeleteServiceAccount(serviceAccountID interface{}, opts ...interface{}) *MockClientService_DeleteServiceAccount_Call {
	return &MockClientService_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount",
		append([]interface{}{serviceAccountID}, opts...)...)}
}

func (_c *MockClientService_DeleteServiceAccount_Call) Run(run func(serviceAccountID int64, opts ...service_accounts.ClientOption)) *MockClientService_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteServiceAccount_Call) Return(_a0 *service_accounts.DeleteServiceAccountOK, _a1 error) *MockClientService_DeleteServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteServiceAccount_Call) RunAndReturn(run func(int64, ...service_accounts.ClientOption) (*service_accounts.DeleteServiceAccountOK, error)) *MockClientService_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteServiceAccountWithParams(params *service_accounts.DeleteServiceAccountParams, opts ...service_accounts.ClientOption) (*service_accounts.DeleteServiceAccountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountWithParams")
	}

	var r0 *service_accounts.DeleteServiceAccountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.DeleteServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.DeleteServiceAccountOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.DeleteServiceAccountParams, ...service_accounts.ClientOption) *service_accounts.DeleteServiceAccountOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.DeleteServiceAccountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.DeleteServiceAccountParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountWithParams'
type MockClientService_DeleteServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteServiceAccountWithParams is a helper method to define mock.On call
//   - params *service_accounts.DeleteServiceAccountParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) DeleteServiceAccountWithParams(params interface{}, opts ...interface{}) *MockClientService_DeleteServiceAccountWithParams_Call {
	return &MockClientService_DeleteServiceAccountWithParams_Call{Call: _e.mock.On("DeleteServiceAccountWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteServiceAccountWithParams_Call) Run(run func(params *service_accounts.DeleteServiceAccountParams, opts ...service_accounts.ClientOption)) *MockClientService_DeleteServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.DeleteServiceAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteServiceAccountWithParams_Call) Return(_a0 *service_accounts.DeleteServiceAccountOK, _a1 error) *MockClientService_DeleteServiceAccountWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteServiceAccountWithParams_Call) RunAndReturn(run func(*service_accounts.DeleteServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.DeleteServiceAccountOK, error)) *MockClientService_DeleteServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteToken provides a mock function with given fields: tokenID, serviceAccountID, opts
func (_m *MockClientService) DeleteToken(tokenID int64, serviceAccountID int64, opts ...service_accounts.ClientOption) (*service_accounts.DeleteTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tokenID, serviceAccountID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 *service_accounts.DeleteTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, ...service_accounts.ClientOption) (*service_accounts.DeleteTokenOK, error)); ok {
		return rf(tokenID, serviceAccountID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, ...service_accounts.ClientOption) *service_accounts.DeleteTokenOK); ok {
		r0 = rf(tokenID, serviceAccountID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.DeleteTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, ...service_accounts.ClientOption) error); ok {
		r1 = rf(tokenID, serviceAccountID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockClientService_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - tokenID int64
//   - serviceAccountID int64
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) DeleteToken(tokenID interface{}, serviceAccountID interface{}, opts ...interface{}) *MockClientService_DeleteToken_Call {
	return &MockClientService_DeleteToken_Call{Call: _e.mock.On("DeleteToken",
		append([]interface{}{tokenID, serviceAccountID}, opts...)...)}
}

func (_c *MockClientService_DeleteToken_Call) Run(run func(tokenID int64, serviceAccountID int64, opts ...service_accounts.ClientOption)) *MockClientService_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteToken_Call) Return(_a0 *service_accounts.DeleteTokenOK, _a1 error) *MockClientService_DeleteToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteToken_Call) RunAndReturn(run func(int64, int64, ...service_accounts.ClientOption) (*service_accounts.DeleteTokenOK, error)) *MockClientService_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTokenWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteTokenWithParams(params *service_accounts.DeleteTokenParams, opts ...service_accounts.ClientOption) (*service_accounts.DeleteTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokenWithParams")
	}

	var r0 *service_accounts.DeleteTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.DeleteTokenParams, ...service_accounts.ClientOption) (*service_accounts.DeleteTokenOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.DeleteTokenParams, ...service_accounts.ClientOption) *service_accounts.DeleteTokenOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.DeleteTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.DeleteTokenParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteTokenWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTokenWithParams'
type MockClientService_DeleteTokenWithParams_Call struct {
	*mock.Call
}

// DeleteTokenWithParams is a helper method to define mock.On call
//   - params *service_accounts.DeleteTokenParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) DeleteTokenWithParams(params interface{}, opts ...interface{}) *MockClientService_DeleteTokenWithParams_Call {
	return &MockClientService_DeleteTokenWithParams_Call{Call: _e.mock.On("DeleteTokenWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteTokenWithParams_Call) Run(run func(params *service_accounts.DeleteTokenParams, opts ...service_accounts.ClientOption)) *MockClientService_DeleteTokenWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.DeleteTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteTokenWithParams_Call) Return(_a0 *service_accounts.DeleteTokenOK, _a1 error) *MockClientService_DeleteTokenWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteTokenWithParams_Call) RunAndReturn(run func(*service_accounts.DeleteTokenParams, ...service_accounts.ClientOption) (*service_accounts.DeleteTokenOK, error)) *MockClientService_DeleteTokenWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListTokens provides a mock function with given fields: serviceAccountID, opts
func (_m *MockClientService) ListTokens(serviceAccountID int64, opts ...service_accounts.ClientOption) (*service_accounts.ListTokensOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, serviceAccountID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTokens")
	}

	var r0 *service_accounts.ListTokensOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...service_accounts.ClientOption) (*service_accounts.ListTokensOK, error)); ok {
		return rf(serviceAccountID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...service_accounts.ClientOption) *service_accounts.ListTokensOK); ok {
		r0 = rf(serviceAccountID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.ListTokensOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...service_accounts.ClientOption) error); ok {
		r1 = rf(serviceAccountID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTokens'
type MockClientService_ListTokens_Call struct {
	*mock.Call
}

// ListTokens is a helper method to define mock.On call
//   - serviceAccountID int64
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) ListTokens(serviceAccountID interface{}, opts ...interface{}) *MockClientService_ListTokens_Call {
	return &MockClientService_ListTokens_Call{Call: _e.mock.On("ListTokens",
		append([]interface{}{serviceAccountID}, opts...)...)}
}

func (_c *MockClientService_ListTokens_Call) Run(run func(serviceAccountID int64, opts ...service_accounts.ClientOption)) *MockClientService_ListTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTokens_Call) Return(_a0 *service_accounts.ListTokensOK, _a1 error) *MockClientService_ListTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTokens_Call) RunAndReturn(run func(int64, ...service_accounts.ClientOption) (*service_accounts.ListTokensOK, error)) *MockClientService_ListTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListTokensWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) ListTokensWithParams(params *service_accounts.ListTokensParams, opts ...service_accounts.ClientOption) (*service_accounts.ListTokensOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTokensWithParams")
	}

	var r0 *service_accounts.ListTokensOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.ListTokensParams, ...service_accounts.ClientOption) (*service_accounts.ListTokensOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.ListTokensParams, ...service_accounts.ClientOption) *service_accounts.ListTokensOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.ListTokensOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.ListTokensParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTokensWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTokensWithParams'
type MockClientService_ListTokensWithParams_Call struct {
	*mock.Call
}

// ListTokensWithParams is a helper method to define mock.On call
//   - params *service_accounts.ListTokensParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) ListTokensWithParams(params interface{}, opts ...interface{}) *MockClientService_ListTokensWithParams_Call {
	return &MockClientService_ListTokensWithParams_Call{Call: _e.mock.On("ListTokensWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListTokensWithParams_Call) Run(run func(params *service_accounts.ListTokensParams, opts ...service_accounts.ClientOption)) *MockClientService_ListTokensWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.ListTokensParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTokensWithParams_Call) Return(_a0 *service_accounts.ListTokensOK, _a1 error) *MockClientService_ListTokensWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTokensWithParams_Call) RunAndReturn(run func(*service_accounts.ListTokensParams, ...service_accounts.ClientOption) (*service_accounts.ListTokensOK, error)) *MockClientService_ListTokensWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveServiceAccount provides a mock function with given fields: serviceAccountID, opts
func (_m *MockClientService) RetrieveServiceAccount(serviceAccountID int64, opts ...service_accounts.ClientOption) (*service_accounts.RetrieveServiceAccountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, serviceAccountID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveServiceAccount")
	}

	var r0 *service_accounts.RetrieveServiceAccountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...service_accounts.ClientOption) (*service_accounts.RetrieveServiceAccountOK, error)); ok {
		return rf(serviceAccountID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...service_accounts.ClientOption) *service_accounts.RetrieveServiceAccountOK); ok {
		r0 = rf(serviceAccountID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.RetrieveServiceAccountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...service_accounts.ClientOption) error); ok {
		r1 = rf(serviceAccountID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RetrieveServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveServiceAccount'
type MockClientService_RetrieveServiceAccount_Call struct {
	*mock.Call
}

// RetrieveServiceAccount is a helper method to define mock.On call
//   - serviceAccountID int64
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) RetrieveServiceAccount(serviceAccountID interface{}, opts ...interface{}) *MockClientService_RetrieveServiceAccount_Call {
	return &MockClientService_RetrieveServiceAccount_Call{Call: _e.mock.On("RetrieveServiceAccount",
		append([]interface{}{serviceAccountID}, opts...)...)}
}

func (_c *MockClientService_RetrieveServiceAccount_Call) Run(run func(serviceAccountID int64, opts ...service_accounts.ClientOption)) *MockClientService_RetrieveServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RetrieveServiceAccount_Call) Return(_a0 *service_accounts.RetrieveServiceAccountOK, _a1 error) *MockClientService_RetrieveServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RetrieveServiceAccount_Call) RunAndReturn(run func(int64, ...service_accounts.ClientOption) (*service_accounts.RetrieveServiceAccountOK, error)) *MockClientService_RetrieveServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveServiceAccountWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) RetrieveServiceAccountWithParams(params *service_accounts.RetrieveServiceAccountParams, opts ...service_accounts.ClientOption) (*service_accounts.RetrieveServiceAccountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveServiceAccountWithParams")
	}

	var r0 *service_accounts.RetrieveServiceAccountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.RetrieveServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.RetrieveServiceAccountOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.RetrieveServiceAccountParams, ...service_accounts.ClientOption) *service_accounts.RetrieveServiceAccountOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.RetrieveServiceAccountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.RetrieveServiceAccountParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RetrieveServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveServiceAccountWithParams'
type MockClientService_RetrieveServiceAccountWithParams_Call struct {
	*mock.Call
}

// RetrieveServiceAccountWithParams is a helper method to define mock.On call
//   - params *service_accounts.RetrieveServiceAccountParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) RetrieveServiceAccountWithParams(params interface{}, opts ...interface{}) *MockClientService_RetrieveServiceAccountWithParams_Call {
	return &MockClientService_RetrieveServiceAccountWithParams_Call{Call: _e.mock.On("RetrieveServiceAccountWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_RetrieveServiceAccountWithParams_Call) Run(run func(params *service_accounts.RetrieveServiceAccountParams, opts ...service_accounts.ClientOption)) *MockClientService_RetrieveServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.RetrieveServiceAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RetrieveServiceAccountWithParams_Call) Return(_a0 *service_accounts.RetrieveServiceAccountOK, _a1 error) *MockClientService_RetrieveServiceAccountWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RetrieveServiceAccountWithParams_Call) RunAndReturn(run func(*service_accounts.RetrieveServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.RetrieveServiceAccountOK, error)) *MockClientService_RetrieveServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SearchOrgServiceAccountsWithPaging provides a mock function with given fields: params, opts
func (_m *MockClientService) SearchOrgServiceAccountsWithPaging(params *service_accounts.SearchOrgServiceAccountsWithPagingParams, opts ...service_accounts.ClientOption) (*service_accounts.SearchOrgServiceAccountsWithPagingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchOrgServiceAccountsWithPaging")
	}

	var r0 *service_accounts.SearchOrgServiceAccountsWithPagingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) (*service_accounts.SearchOrgServiceAccountsWithPagingOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) *service_accounts.SearchOrgServiceAccountsWithPagingOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.SearchOrgServiceAccountsWithPagingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SearchOrgServiceAccountsWithPaging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchOrgServiceAccountsWithPaging'
type MockClientService_SearchOrgServiceAccountsWithPaging_Call struct {
	*mock.Call
}

// SearchOrgServiceAccountsWithPaging is a helper method to define mock.On call
//   - params *service_accounts.SearchOrgServiceAccountsWithPagingParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) SearchOrgServiceAccountsWithPaging(params interface{}, opts ...interface{}) *MockClientService_SearchOrgServiceAccountsWithPaging_Call {
	return &MockClientService_SearchOrgServiceAccountsWithPaging_Call{Call: _e.mock.On("SearchOrgServiceAccountsWithPaging",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SearchOrgServiceAccountsWithPaging_Call) Run(run func(params *service_accounts.SearchOrgServiceAccountsWithPagingParams, opts ...service_accounts.ClientOption)) *MockClientService_SearchOrgServiceAccountsWithPaging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.SearchOrgServiceAccountsWithPagingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SearchOrgServiceAccountsWithPaging_Call) Return(_a0 *service_accounts.SearchOrgServiceAccountsWithPagingOK, _a1 error) *MockClientService_SearchOrgServiceAccountsWithPaging_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SearchOrgServiceAccountsWithPaging_Call) RunAndReturn(run func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) (*service_accounts.SearchOrgServiceAccountsWithPagingOK, error)) *MockClientService_SearchOrgServiceAccountsWithPaging_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccount provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateServiceAccount(params *service_accounts.UpdateServiceAccountParams, opts ...service_accounts.ClientOption) (*service_accounts.UpdateServiceAccountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccount")
	}

	var r0 *service_accounts.UpdateServiceAccountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*service_accounts.UpdateServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.UpdateServiceAccountOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*service_accounts.UpdateServiceAccountParams, ...service_accounts.ClientOption) *service_accounts.UpdateServiceAccountOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.UpdateServiceAccountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*service_accounts.UpdateServiceAccountParams, ...service_accounts.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccount'
type MockClientService_UpdateServiceAccount_Call struct {
	*mock.Call
}

// UpdateServiceAccount is a helper method to define mock.On call
//   - params *service_accounts.UpdateServiceAccountParams
//   - opts ...service_accounts.ClientOption
func (_e *MockClientService_Expecter) UpdateServiceAccount(params interface{}, opts ...interface{}) *MockClientService_UpdateServiceAccount_Call {
	return &MockClientService_UpdateServiceAccount_Call{Call: _e.mock.On("UpdateServiceAccount",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateServiceAccount_Call) Run(run func(params *service_accounts.UpdateServiceAccountParams, opts ...service_accounts.ClientOption)) *MockClientService_UpdateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]service_accounts.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(service_accounts.ClientOption)
			}
		}
		run(args[0].(*service_accounts.UpdateServiceAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateServiceAccount_Call) Return(_a0 *service_accounts.UpdateServiceAccountOK, _a1 error) *MockClientService_UpdateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateServiceAccount_Call) RunAndReturn(run func(*service_accounts.UpdateServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.UpdateServiceAccountOK, error)) *MockClientService_UpdateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
