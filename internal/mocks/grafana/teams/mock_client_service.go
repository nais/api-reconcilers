// Code generated by mockery. DO NOT EDIT.

package grafana_mock_teams

import (
	runtime "github.com/go-openapi/runtime"
	models "github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"

	teams "github.com/grafana/grafana-openapi-client-go/client/teams"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// AddTeamMember provides a mock function with given fields: teamID, body, opts
func (_m *MockClientService) AddTeamMember(teamID string, body *models.AddTeamMemberCommand, opts ...teams.ClientOption) (*teams.AddTeamMemberOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamMember")
	}

	var r0 *teams.AddTeamMemberOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.AddTeamMemberCommand, ...teams.ClientOption) (*teams.AddTeamMemberOK, error)); ok {
		return rf(teamID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, *models.AddTeamMemberCommand, ...teams.ClientOption) *teams.AddTeamMemberOK); ok {
		r0 = rf(teamID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.AddTeamMemberOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.AddTeamMemberCommand, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AddTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamMember'
type MockClientService_AddTeamMember_Call struct {
	*mock.Call
}

// AddTeamMember is a helper method to define mock.On call
//   - teamID string
//   - body *models.AddTeamMemberCommand
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) AddTeamMember(teamID interface{}, body interface{}, opts ...interface{}) *MockClientService_AddTeamMember_Call {
	return &MockClientService_AddTeamMember_Call{Call: _e.mock.On("AddTeamMember",
		append([]interface{}{teamID, body}, opts...)...)}
}

func (_c *MockClientService_AddTeamMember_Call) Run(run func(teamID string, body *models.AddTeamMemberCommand, opts ...teams.ClientOption)) *MockClientService_AddTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), args[1].(*models.AddTeamMemberCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AddTeamMember_Call) Return(_a0 *teams.AddTeamMemberOK, _a1 error) *MockClientService_AddTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AddTeamMember_Call) RunAndReturn(run func(string, *models.AddTeamMemberCommand, ...teams.ClientOption) (*teams.AddTeamMemberOK, error)) *MockClientService_AddTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamMemberWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) AddTeamMemberWithParams(params *teams.AddTeamMemberParams, opts ...teams.ClientOption) (*teams.AddTeamMemberOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamMemberWithParams")
	}

	var r0 *teams.AddTeamMemberOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.AddTeamMemberParams, ...teams.ClientOption) (*teams.AddTeamMemberOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.AddTeamMemberParams, ...teams.ClientOption) *teams.AddTeamMemberOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.AddTeamMemberOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.AddTeamMemberParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_AddTeamMemberWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamMemberWithParams'
type MockClientService_AddTeamMemberWithParams_Call struct {
	*mock.Call
}

// AddTeamMemberWithParams is a helper method to define mock.On call
//   - params *teams.AddTeamMemberParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) AddTeamMemberWithParams(params interface{}, opts ...interface{}) *MockClientService_AddTeamMemberWithParams_Call {
	return &MockClientService_AddTeamMemberWithParams_Call{Call: _e.mock.On("AddTeamMemberWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_AddTeamMemberWithParams_Call) Run(run func(params *teams.AddTeamMemberParams, opts ...teams.ClientOption)) *MockClientService_AddTeamMemberWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.AddTeamMemberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_AddTeamMemberWithParams_Call) Return(_a0 *teams.AddTeamMemberOK, _a1 error) *MockClientService_AddTeamMemberWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_AddTeamMemberWithParams_Call) RunAndReturn(run func(*teams.AddTeamMemberParams, ...teams.ClientOption) (*teams.AddTeamMemberOK, error)) *MockClientService_AddTeamMemberWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: body, opts
func (_m *MockClientService) CreateTeam(body *models.CreateTeamCommand, opts ...teams.ClientOption) (*teams.CreateTeamOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *teams.CreateTeamOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.CreateTeamCommand, ...teams.ClientOption) (*teams.CreateTeamOK, error)); ok {
		return rf(body, opts...)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateTeamCommand, ...teams.ClientOption) *teams.CreateTeamOK); ok {
		r0 = rf(body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.CreateTeamOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.CreateTeamCommand, ...teams.ClientOption) error); ok {
		r1 = rf(body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockClientService_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - body *models.CreateTeamCommand
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) CreateTeam(body interface{}, opts ...interface{}) *MockClientService_CreateTeam_Call {
	return &MockClientService_CreateTeam_Call{Call: _e.mock.On("CreateTeam",
		append([]interface{}{body}, opts...)...)}
}

func (_c *MockClientService_CreateTeam_Call) Run(run func(body *models.CreateTeamCommand, opts ...teams.ClientOption)) *MockClientService_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*models.CreateTeamCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateTeam_Call) Return(_a0 *teams.CreateTeamOK, _a1 error) *MockClientService_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateTeam_Call) RunAndReturn(run func(*models.CreateTeamCommand, ...teams.ClientOption) (*teams.CreateTeamOK, error)) *MockClientService_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) CreateTeamWithParams(params *teams.CreateTeamParams, opts ...teams.ClientOption) (*teams.CreateTeamOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamWithParams")
	}

	var r0 *teams.CreateTeamOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.CreateTeamParams, ...teams.ClientOption) (*teams.CreateTeamOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.CreateTeamParams, ...teams.ClientOption) *teams.CreateTeamOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.CreateTeamOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.CreateTeamParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamWithParams'
type MockClientService_CreateTeamWithParams_Call struct {
	*mock.Call
}

// CreateTeamWithParams is a helper method to define mock.On call
//   - params *teams.CreateTeamParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) CreateTeamWithParams(params interface{}, opts ...interface{}) *MockClientService_CreateTeamWithParams_Call {
	return &MockClientService_CreateTeamWithParams_Call{Call: _e.mock.On("CreateTeamWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_CreateTeamWithParams_Call) Run(run func(params *teams.CreateTeamParams, opts ...teams.ClientOption)) *MockClientService_CreateTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.CreateTeamParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateTeamWithParams_Call) Return(_a0 *teams.CreateTeamOK, _a1 error) *MockClientService_CreateTeamWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateTeamWithParams_Call) RunAndReturn(run func(*teams.CreateTeamParams, ...teams.ClientOption) (*teams.CreateTeamOK, error)) *MockClientService_CreateTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamByID provides a mock function with given fields: teamID, opts
func (_m *MockClientService) DeleteTeamByID(teamID string, opts ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamByID")
	}

	var r0 *teams.DeleteTeamByIDOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error)); ok {
		return rf(teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) *teams.DeleteTeamByIDOK); ok {
		r0 = rf(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.DeleteTeamByIDOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteTeamByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamByID'
type MockClientService_DeleteTeamByID_Call struct {
	*mock.Call
}

// DeleteTeamByID is a helper method to define mock.On call
//   - teamID string
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) DeleteTeamByID(teamID interface{}, opts ...interface{}) *MockClientService_DeleteTeamByID_Call {
	return &MockClientService_DeleteTeamByID_Call{Call: _e.mock.On("DeleteTeamByID",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockClientService_DeleteTeamByID_Call) Run(run func(teamID string, opts ...teams.ClientOption)) *MockClientService_DeleteTeamByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteTeamByID_Call) Return(_a0 *teams.DeleteTeamByIDOK, _a1 error) *MockClientService_DeleteTeamByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteTeamByID_Call) RunAndReturn(run func(string, ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error)) *MockClientService_DeleteTeamByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamByIDWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) DeleteTeamByIDWithParams(params *teams.DeleteTeamByIDParams, opts ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamByIDWithParams")
	}

	var r0 *teams.DeleteTeamByIDOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.DeleteTeamByIDParams, ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.DeleteTeamByIDParams, ...teams.ClientOption) *teams.DeleteTeamByIDOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.DeleteTeamByIDOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.DeleteTeamByIDParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteTeamByIDWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamByIDWithParams'
type MockClientService_DeleteTeamByIDWithParams_Call struct {
	*mock.Call
}

// DeleteTeamByIDWithParams is a helper method to define mock.On call
//   - params *teams.DeleteTeamByIDParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) DeleteTeamByIDWithParams(params interface{}, opts ...interface{}) *MockClientService_DeleteTeamByIDWithParams_Call {
	return &MockClientService_DeleteTeamByIDWithParams_Call{Call: _e.mock.On("DeleteTeamByIDWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_DeleteTeamByIDWithParams_Call) Run(run func(params *teams.DeleteTeamByIDParams, opts ...teams.ClientOption)) *MockClientService_DeleteTeamByIDWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.DeleteTeamByIDParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteTeamByIDWithParams_Call) Return(_a0 *teams.DeleteTeamByIDOK, _a1 error) *MockClientService_DeleteTeamByIDWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteTeamByIDWithParams_Call) RunAndReturn(run func(*teams.DeleteTeamByIDParams, ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error)) *MockClientService_DeleteTeamByIDWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByID provides a mock function with given fields: teamID, opts
func (_m *MockClientService) GetTeamByID(teamID string, opts ...teams.ClientOption) (*teams.GetTeamByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByID")
	}

	var r0 *teams.GetTeamByIDOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) (*teams.GetTeamByIDOK, error)); ok {
		return rf(teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) *teams.GetTeamByIDOK); ok {
		r0 = rf(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamByIDOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTeamByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByID'
type MockClientService_GetTeamByID_Call struct {
	*mock.Call
}

// GetTeamByID is a helper method to define mock.On call
//   - teamID string
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) GetTeamByID(teamID interface{}, opts ...interface{}) *MockClientService_GetTeamByID_Call {
	return &MockClientService_GetTeamByID_Call{Call: _e.mock.On("GetTeamByID",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockClientService_GetTeamByID_Call) Run(run func(teamID string, opts ...teams.ClientOption)) *MockClientService_GetTeamByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTeamByID_Call) Return(_a0 *teams.GetTeamByIDOK, _a1 error) *MockClientService_GetTeamByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTeamByID_Call) RunAndReturn(run func(string, ...teams.ClientOption) (*teams.GetTeamByIDOK, error)) *MockClientService_GetTeamByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByIDWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetTeamByIDWithParams(params *teams.GetTeamByIDParams, opts ...teams.ClientOption) (*teams.GetTeamByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByIDWithParams")
	}

	var r0 *teams.GetTeamByIDOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.GetTeamByIDParams, ...teams.ClientOption) (*teams.GetTeamByIDOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.GetTeamByIDParams, ...teams.ClientOption) *teams.GetTeamByIDOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamByIDOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.GetTeamByIDParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTeamByIDWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByIDWithParams'
type MockClientService_GetTeamByIDWithParams_Call struct {
	*mock.Call
}

// GetTeamByIDWithParams is a helper method to define mock.On call
//   - params *teams.GetTeamByIDParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) GetTeamByIDWithParams(params interface{}, opts ...interface{}) *MockClientService_GetTeamByIDWithParams_Call {
	return &MockClientService_GetTeamByIDWithParams_Call{Call: _e.mock.On("GetTeamByIDWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetTeamByIDWithParams_Call) Run(run func(params *teams.GetTeamByIDParams, opts ...teams.ClientOption)) *MockClientService_GetTeamByIDWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.GetTeamByIDParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTeamByIDWithParams_Call) Return(_a0 *teams.GetTeamByIDOK, _a1 error) *MockClientService_GetTeamByIDWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTeamByIDWithParams_Call) RunAndReturn(run func(*teams.GetTeamByIDParams, ...teams.ClientOption) (*teams.GetTeamByIDOK, error)) *MockClientService_GetTeamByIDWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembers provides a mock function with given fields: teamID, opts
func (_m *MockClientService) GetTeamMembers(teamID string, opts ...teams.ClientOption) (*teams.GetTeamMembersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembers")
	}

	var r0 *teams.GetTeamMembersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) (*teams.GetTeamMembersOK, error)); ok {
		return rf(teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) *teams.GetTeamMembersOK); ok {
		r0 = rf(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamMembersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembers'
type MockClientService_GetTeamMembers_Call struct {
	*mock.Call
}

// GetTeamMembers is a helper method to define mock.On call
//   - teamID string
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) GetTeamMembers(teamID interface{}, opts ...interface{}) *MockClientService_GetTeamMembers_Call {
	return &MockClientService_GetTeamMembers_Call{Call: _e.mock.On("GetTeamMembers",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockClientService_GetTeamMembers_Call) Run(run func(teamID string, opts ...teams.ClientOption)) *MockClientService_GetTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTeamMembers_Call) Return(_a0 *teams.GetTeamMembersOK, _a1 error) *MockClientService_GetTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTeamMembers_Call) RunAndReturn(run func(string, ...teams.ClientOption) (*teams.GetTeamMembersOK, error)) *MockClientService_GetTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembersWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetTeamMembersWithParams(params *teams.GetTeamMembersParams, opts ...teams.ClientOption) (*teams.GetTeamMembersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembersWithParams")
	}

	var r0 *teams.GetTeamMembersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.GetTeamMembersParams, ...teams.ClientOption) (*teams.GetTeamMembersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.GetTeamMembersParams, ...teams.ClientOption) *teams.GetTeamMembersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamMembersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.GetTeamMembersParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTeamMembersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembersWithParams'
type MockClientService_GetTeamMembersWithParams_Call struct {
	*mock.Call
}

// GetTeamMembersWithParams is a helper method to define mock.On call
//   - params *teams.GetTeamMembersParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) GetTeamMembersWithParams(params interface{}, opts ...interface{}) *MockClientService_GetTeamMembersWithParams_Call {
	return &MockClientService_GetTeamMembersWithParams_Call{Call: _e.mock.On("GetTeamMembersWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetTeamMembersWithParams_Call) Run(run func(params *teams.GetTeamMembersParams, opts ...teams.ClientOption)) *MockClientService_GetTeamMembersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.GetTeamMembersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTeamMembersWithParams_Call) Return(_a0 *teams.GetTeamMembersOK, _a1 error) *MockClientService_GetTeamMembersWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTeamMembersWithParams_Call) RunAndReturn(run func(*teams.GetTeamMembersParams, ...teams.ClientOption) (*teams.GetTeamMembersOK, error)) *MockClientService_GetTeamMembersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamPreferences provides a mock function with given fields: teamID, opts
func (_m *MockClientService) GetTeamPreferences(teamID string, opts ...teams.ClientOption) (*teams.GetTeamPreferencesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamPreferences")
	}

	var r0 *teams.GetTeamPreferencesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) (*teams.GetTeamPreferencesOK, error)); ok {
		return rf(teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...teams.ClientOption) *teams.GetTeamPreferencesOK); ok {
		r0 = rf(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamPreferencesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTeamPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamPreferences'
type MockClientService_GetTeamPreferences_Call struct {
	*mock.Call
}

// GetTeamPreferences is a helper method to define mock.On call
//   - teamID string
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) GetTeamPreferences(teamID interface{}, opts ...interface{}) *MockClientService_GetTeamPreferences_Call {
	return &MockClientService_GetTeamPreferences_Call{Call: _e.mock.On("GetTeamPreferences",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockClientService_GetTeamPreferences_Call) Run(run func(teamID string, opts ...teams.ClientOption)) *MockClientService_GetTeamPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTeamPreferences_Call) Return(_a0 *teams.GetTeamPreferencesOK, _a1 error) *MockClientService_GetTeamPreferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTeamPreferences_Call) RunAndReturn(run func(string, ...teams.ClientOption) (*teams.GetTeamPreferencesOK, error)) *MockClientService_GetTeamPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamPreferencesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetTeamPreferencesWithParams(params *teams.GetTeamPreferencesParams, opts ...teams.ClientOption) (*teams.GetTeamPreferencesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamPreferencesWithParams")
	}

	var r0 *teams.GetTeamPreferencesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.GetTeamPreferencesParams, ...teams.ClientOption) (*teams.GetTeamPreferencesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.GetTeamPreferencesParams, ...teams.ClientOption) *teams.GetTeamPreferencesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamPreferencesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.GetTeamPreferencesParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTeamPreferencesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamPreferencesWithParams'
type MockClientService_GetTeamPreferencesWithParams_Call struct {
	*mock.Call
}

// GetTeamPreferencesWithParams is a helper method to define mock.On call
//   - params *teams.GetTeamPreferencesParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) GetTeamPreferencesWithParams(params interface{}, opts ...interface{}) *MockClientService_GetTeamPreferencesWithParams_Call {
	return &MockClientService_GetTeamPreferencesWithParams_Call{Call: _e.mock.On("GetTeamPreferencesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetTeamPreferencesWithParams_Call) Run(run func(params *teams.GetTeamPreferencesParams, opts ...teams.ClientOption)) *MockClientService_GetTeamPreferencesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.GetTeamPreferencesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTeamPreferencesWithParams_Call) Return(_a0 *teams.GetTeamPreferencesOK, _a1 error) *MockClientService_GetTeamPreferencesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTeamPreferencesWithParams_Call) RunAndReturn(run func(*teams.GetTeamPreferencesParams, ...teams.ClientOption) (*teams.GetTeamPreferencesOK, error)) *MockClientService_GetTeamPreferencesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamMember provides a mock function with given fields: userID, teamID, opts
func (_m *MockClientService) RemoveTeamMember(userID int64, teamID string, opts ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, teamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamMember")
	}

	var r0 *teams.RemoveTeamMemberOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error)); ok {
		return rf(userID, teamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, string, ...teams.ClientOption) *teams.RemoveTeamMemberOK); ok {
		r0 = rf(userID, teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.RemoveTeamMemberOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, ...teams.ClientOption) error); ok {
		r1 = rf(userID, teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RemoveTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamMember'
type MockClientService_RemoveTeamMember_Call struct {
	*mock.Call
}

// RemoveTeamMember is a helper method to define mock.On call
//   - userID int64
//   - teamID string
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) RemoveTeamMember(userID interface{}, teamID interface{}, opts ...interface{}) *MockClientService_RemoveTeamMember_Call {
	return &MockClientService_RemoveTeamMember_Call{Call: _e.mock.On("RemoveTeamMember",
		append([]interface{}{userID, teamID}, opts...)...)}
}

func (_c *MockClientService_RemoveTeamMember_Call) Run(run func(userID int64, teamID string, opts ...teams.ClientOption)) *MockClientService_RemoveTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RemoveTeamMember_Call) Return(_a0 *teams.RemoveTeamMemberOK, _a1 error) *MockClientService_RemoveTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RemoveTeamMember_Call) RunAndReturn(run func(int64, string, ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error)) *MockClientService_RemoveTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamMemberWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) RemoveTeamMemberWithParams(params *teams.RemoveTeamMemberParams, opts ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamMemberWithParams")
	}

	var r0 *teams.RemoveTeamMemberOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) *teams.RemoveTeamMemberOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.RemoveTeamMemberOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RemoveTeamMemberWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamMemberWithParams'
type MockClientService_RemoveTeamMemberWithParams_Call struct {
	*mock.Call
}

// RemoveTeamMemberWithParams is a helper method to define mock.On call
//   - params *teams.RemoveTeamMemberParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) RemoveTeamMemberWithParams(params interface{}, opts ...interface{}) *MockClientService_RemoveTeamMemberWithParams_Call {
	return &MockClientService_RemoveTeamMemberWithParams_Call{Call: _e.mock.On("RemoveTeamMemberWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_RemoveTeamMemberWithParams_Call) Run(run func(params *teams.RemoveTeamMemberParams, opts ...teams.ClientOption)) *MockClientService_RemoveTeamMemberWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.RemoveTeamMemberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RemoveTeamMemberWithParams_Call) Return(_a0 *teams.RemoveTeamMemberOK, _a1 error) *MockClientService_RemoveTeamMemberWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RemoveTeamMemberWithParams_Call) RunAndReturn(run func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error)) *MockClientService_RemoveTeamMemberWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTeams provides a mock function with given fields: params, opts
func (_m *MockClientService) SearchTeams(params *teams.SearchTeamsParams, opts ...teams.ClientOption) (*teams.SearchTeamsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchTeams")
	}

	var r0 *teams.SearchTeamsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.SearchTeamsParams, ...teams.ClientOption) (*teams.SearchTeamsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.SearchTeamsParams, ...teams.ClientOption) *teams.SearchTeamsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.SearchTeamsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.SearchTeamsParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SearchTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTeams'
type MockClientService_SearchTeams_Call struct {
	*mock.Call
}

// SearchTeams is a helper method to define mock.On call
//   - params *teams.SearchTeamsParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) SearchTeams(params interface{}, opts ...interface{}) *MockClientService_SearchTeams_Call {
	return &MockClientService_SearchTeams_Call{Call: _e.mock.On("SearchTeams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SearchTeams_Call) Run(run func(params *teams.SearchTeamsParams, opts ...teams.ClientOption)) *MockClientService_SearchTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.SearchTeamsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SearchTeams_Call) Return(_a0 *teams.SearchTeamsOK, _a1 error) *MockClientService_SearchTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SearchTeams_Call) RunAndReturn(run func(*teams.SearchTeamsParams, ...teams.ClientOption) (*teams.SearchTeamsOK, error)) *MockClientService_SearchTeams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamMemberships provides a mock function with given fields: teamID, body, opts
func (_m *MockClientService) SetTeamMemberships(teamID string, body *models.SetTeamMembershipsCommand, opts ...teams.ClientOption) (*teams.SetTeamMembershipsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamMemberships")
	}

	var r0 *teams.SetTeamMembershipsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.SetTeamMembershipsCommand, ...teams.ClientOption) (*teams.SetTeamMembershipsOK, error)); ok {
		return rf(teamID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, *models.SetTeamMembershipsCommand, ...teams.ClientOption) *teams.SetTeamMembershipsOK); ok {
		r0 = rf(teamID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.SetTeamMembershipsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.SetTeamMembershipsCommand, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetTeamMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamMemberships'
type MockClientService_SetTeamMemberships_Call struct {
	*mock.Call
}

// SetTeamMemberships is a helper method to define mock.On call
//   - teamID string
//   - body *models.SetTeamMembershipsCommand
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) SetTeamMemberships(teamID interface{}, body interface{}, opts ...interface{}) *MockClientService_SetTeamMemberships_Call {
	return &MockClientService_SetTeamMemberships_Call{Call: _e.mock.On("SetTeamMemberships",
		append([]interface{}{teamID, body}, opts...)...)}
}

func (_c *MockClientService_SetTeamMemberships_Call) Run(run func(teamID string, body *models.SetTeamMembershipsCommand, opts ...teams.ClientOption)) *MockClientService_SetTeamMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), args[1].(*models.SetTeamMembershipsCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetTeamMemberships_Call) Return(_a0 *teams.SetTeamMembershipsOK, _a1 error) *MockClientService_SetTeamMemberships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetTeamMemberships_Call) RunAndReturn(run func(string, *models.SetTeamMembershipsCommand, ...teams.ClientOption) (*teams.SetTeamMembershipsOK, error)) *MockClientService_SetTeamMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamMembershipsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) SetTeamMembershipsWithParams(params *teams.SetTeamMembershipsParams, opts ...teams.ClientOption) (*teams.SetTeamMembershipsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamMembershipsWithParams")
	}

	var r0 *teams.SetTeamMembershipsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.SetTeamMembershipsParams, ...teams.ClientOption) (*teams.SetTeamMembershipsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.SetTeamMembershipsParams, ...teams.ClientOption) *teams.SetTeamMembershipsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.SetTeamMembershipsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.SetTeamMembershipsParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetTeamMembershipsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamMembershipsWithParams'
type MockClientService_SetTeamMembershipsWithParams_Call struct {
	*mock.Call
}

// SetTeamMembershipsWithParams is a helper method to define mock.On call
//   - params *teams.SetTeamMembershipsParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) SetTeamMembershipsWithParams(params interface{}, opts ...interface{}) *MockClientService_SetTeamMembershipsWithParams_Call {
	return &MockClientService_SetTeamMembershipsWithParams_Call{Call: _e.mock.On("SetTeamMembershipsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SetTeamMembershipsWithParams_Call) Run(run func(params *teams.SetTeamMembershipsParams, opts ...teams.ClientOption)) *MockClientService_SetTeamMembershipsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.SetTeamMembershipsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetTeamMembershipsWithParams_Call) Return(_a0 *teams.SetTeamMembershipsOK, _a1 error) *MockClientService_SetTeamMembershipsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetTeamMembershipsWithParams_Call) RunAndReturn(run func(*teams.SetTeamMembershipsParams, ...teams.ClientOption) (*teams.SetTeamMembershipsOK, error)) *MockClientService_SetTeamMembershipsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function with given fields: teamID, body, opts
func (_m *MockClientService) UpdateTeam(teamID string, body *models.UpdateTeamCommand, opts ...teams.ClientOption) (*teams.UpdateTeamOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *teams.UpdateTeamOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.UpdateTeamCommand, ...teams.ClientOption) (*teams.UpdateTeamOK, error)); ok {
		return rf(teamID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, *models.UpdateTeamCommand, ...teams.ClientOption) *teams.UpdateTeamOK); ok {
		r0 = rf(teamID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.UpdateTeamOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.UpdateTeamCommand, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockClientService_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - teamID string
//   - body *models.UpdateTeamCommand
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) UpdateTeam(teamID interface{}, body interface{}, opts ...interface{}) *MockClientService_UpdateTeam_Call {
	return &MockClientService_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam",
		append([]interface{}{teamID, body}, opts...)...)}
}

func (_c *MockClientService_UpdateTeam_Call) Run(run func(teamID string, body *models.UpdateTeamCommand, opts ...teams.ClientOption)) *MockClientService_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), args[1].(*models.UpdateTeamCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTeam_Call) Return(_a0 *teams.UpdateTeamOK, _a1 error) *MockClientService_UpdateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTeam_Call) RunAndReturn(run func(string, *models.UpdateTeamCommand, ...teams.ClientOption) (*teams.UpdateTeamOK, error)) *MockClientService_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamMember provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateTeamMember(params *teams.UpdateTeamMemberParams, opts ...teams.ClientOption) (*teams.UpdateTeamMemberOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamMember")
	}

	var r0 *teams.UpdateTeamMemberOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.UpdateTeamMemberParams, ...teams.ClientOption) (*teams.UpdateTeamMemberOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.UpdateTeamMemberParams, ...teams.ClientOption) *teams.UpdateTeamMemberOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.UpdateTeamMemberOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.UpdateTeamMemberParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamMember'
type MockClientService_UpdateTeamMember_Call struct {
	*mock.Call
}

// UpdateTeamMember is a helper method to define mock.On call
//   - params *teams.UpdateTeamMemberParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) UpdateTeamMember(params interface{}, opts ...interface{}) *MockClientService_UpdateTeamMember_Call {
	return &MockClientService_UpdateTeamMember_Call{Call: _e.mock.On("UpdateTeamMember",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateTeamMember_Call) Run(run func(params *teams.UpdateTeamMemberParams, opts ...teams.ClientOption)) *MockClientService_UpdateTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.UpdateTeamMemberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTeamMember_Call) Return(_a0 *teams.UpdateTeamMemberOK, _a1 error) *MockClientService_UpdateTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTeamMember_Call) RunAndReturn(run func(*teams.UpdateTeamMemberParams, ...teams.ClientOption) (*teams.UpdateTeamMemberOK, error)) *MockClientService_UpdateTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamPreferences provides a mock function with given fields: teamID, body, opts
func (_m *MockClientService) UpdateTeamPreferences(teamID string, body *models.UpdatePrefsCmd, opts ...teams.ClientOption) (*teams.UpdateTeamPreferencesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, teamID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamPreferences")
	}

	var r0 *teams.UpdateTeamPreferencesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.UpdatePrefsCmd, ...teams.ClientOption) (*teams.UpdateTeamPreferencesOK, error)); ok {
		return rf(teamID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, *models.UpdatePrefsCmd, ...teams.ClientOption) *teams.UpdateTeamPreferencesOK); ok {
		r0 = rf(teamID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.UpdateTeamPreferencesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.UpdatePrefsCmd, ...teams.ClientOption) error); ok {
		r1 = rf(teamID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTeamPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamPreferences'
type MockClientService_UpdateTeamPreferences_Call struct {
	*mock.Call
}

// UpdateTeamPreferences is a helper method to define mock.On call
//   - teamID string
//   - body *models.UpdatePrefsCmd
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) UpdateTeamPreferences(teamID interface{}, body interface{}, opts ...interface{}) *MockClientService_UpdateTeamPreferences_Call {
	return &MockClientService_UpdateTeamPreferences_Call{Call: _e.mock.On("UpdateTeamPreferences",
		append([]interface{}{teamID, body}, opts...)...)}
}

func (_c *MockClientService_UpdateTeamPreferences_Call) Run(run func(teamID string, body *models.UpdatePrefsCmd, opts ...teams.ClientOption)) *MockClientService_UpdateTeamPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(string), args[1].(*models.UpdatePrefsCmd), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTeamPreferences_Call) Return(_a0 *teams.UpdateTeamPreferencesOK, _a1 error) *MockClientService_UpdateTeamPreferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTeamPreferences_Call) RunAndReturn(run func(string, *models.UpdatePrefsCmd, ...teams.ClientOption) (*teams.UpdateTeamPreferencesOK, error)) *MockClientService_UpdateTeamPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamPreferencesWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateTeamPreferencesWithParams(params *teams.UpdateTeamPreferencesParams, opts ...teams.ClientOption) (*teams.UpdateTeamPreferencesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamPreferencesWithParams")
	}

	var r0 *teams.UpdateTeamPreferencesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.UpdateTeamPreferencesParams, ...teams.ClientOption) (*teams.UpdateTeamPreferencesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.UpdateTeamPreferencesParams, ...teams.ClientOption) *teams.UpdateTeamPreferencesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.UpdateTeamPreferencesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.UpdateTeamPreferencesParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTeamPreferencesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamPreferencesWithParams'
type MockClientService_UpdateTeamPreferencesWithParams_Call struct {
	*mock.Call
}

// UpdateTeamPreferencesWithParams is a helper method to define mock.On call
//   - params *teams.UpdateTeamPreferencesParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) UpdateTeamPreferencesWithParams(params interface{}, opts ...interface{}) *MockClientService_UpdateTeamPreferencesWithParams_Call {
	return &MockClientService_UpdateTeamPreferencesWithParams_Call{Call: _e.mock.On("UpdateTeamPreferencesWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateTeamPreferencesWithParams_Call) Run(run func(params *teams.UpdateTeamPreferencesParams, opts ...teams.ClientOption)) *MockClientService_UpdateTeamPreferencesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.UpdateTeamPreferencesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTeamPreferencesWithParams_Call) Return(_a0 *teams.UpdateTeamPreferencesOK, _a1 error) *MockClientService_UpdateTeamPreferencesWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTeamPreferencesWithParams_Call) RunAndReturn(run func(*teams.UpdateTeamPreferencesParams, ...teams.ClientOption) (*teams.UpdateTeamPreferencesOK, error)) *MockClientService_UpdateTeamPreferencesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateTeamWithParams(params *teams.UpdateTeamParams, opts ...teams.ClientOption) (*teams.UpdateTeamOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamWithParams")
	}

	var r0 *teams.UpdateTeamOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*teams.UpdateTeamParams, ...teams.ClientOption) (*teams.UpdateTeamOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*teams.UpdateTeamParams, ...teams.ClientOption) *teams.UpdateTeamOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.UpdateTeamOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*teams.UpdateTeamParams, ...teams.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamWithParams'
type MockClientService_UpdateTeamWithParams_Call struct {
	*mock.Call
}

// UpdateTeamWithParams is a helper method to define mock.On call
//   - params *teams.UpdateTeamParams
//   - opts ...teams.ClientOption
func (_e *MockClientService_Expecter) UpdateTeamWithParams(params interface{}, opts ...interface{}) *MockClientService_UpdateTeamWithParams_Call {
	return &MockClientService_UpdateTeamWithParams_Call{Call: _e.mock.On("UpdateTeamWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateTeamWithParams_Call) Run(run func(params *teams.UpdateTeamParams, opts ...teams.ClientOption)) *MockClientService_UpdateTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]teams.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(teams.ClientOption)
			}
		}
		run(args[0].(*teams.UpdateTeamParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTeamWithParams_Call) Return(_a0 *teams.UpdateTeamOK, _a1 error) *MockClientService_UpdateTeamWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTeamWithParams_Call) RunAndReturn(run func(*teams.UpdateTeamParams, ...teams.ClientOption) (*teams.UpdateTeamOK, error)) *MockClientService_UpdateTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
