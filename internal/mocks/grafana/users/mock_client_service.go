// Code generated by mockery. DO NOT EDIT.

package grafana_mock_users

import (
	runtime "github.com/go-openapi/runtime"
	models "github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"

	users "github.com/grafana/grafana-openapi-client-go/client/users"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: userID, opts
func (_m *MockClientService) GetUserByID(userID int64, opts ...users.ClientOption) (*users.GetUserByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *users.GetUserByIDOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...users.ClientOption) (*users.GetUserByIDOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...users.ClientOption) *users.GetUserByIDOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserByIDOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockClientService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - userID int64
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserByID(userID interface{}, opts ...interface{}) *MockClientService_GetUserByID_Call {
	return &MockClientService_GetUserByID_Call{Call: _e.mock.On("GetUserByID",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_GetUserByID_Call) Run(run func(userID int64, opts ...users.ClientOption)) *MockClientService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserByID_Call) Return(_a0 *users.GetUserByIDOK, _a1 error) *MockClientService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserByID_Call) RunAndReturn(run func(int64, ...users.ClientOption) (*users.GetUserByIDOK, error)) *MockClientService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByIDWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetUserByIDWithParams(params *users.GetUserByIDParams, opts ...users.ClientOption) (*users.GetUserByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByIDWithParams")
	}

	var r0 *users.GetUserByIDOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.GetUserByIDParams, ...users.ClientOption) (*users.GetUserByIDOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.GetUserByIDParams, ...users.ClientOption) *users.GetUserByIDOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserByIDOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.GetUserByIDParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserByIDWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByIDWithParams'
type MockClientService_GetUserByIDWithParams_Call struct {
	*mock.Call
}

// GetUserByIDWithParams is a helper method to define mock.On call
//   - params *users.GetUserByIDParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserByIDWithParams(params interface{}, opts ...interface{}) *MockClientService_GetUserByIDWithParams_Call {
	return &MockClientService_GetUserByIDWithParams_Call{Call: _e.mock.On("GetUserByIDWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetUserByIDWithParams_Call) Run(run func(params *users.GetUserByIDParams, opts ...users.ClientOption)) *MockClientService_GetUserByIDWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.GetUserByIDParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserByIDWithParams_Call) Return(_a0 *users.GetUserByIDOK, _a1 error) *MockClientService_GetUserByIDWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserByIDWithParams_Call) RunAndReturn(run func(*users.GetUserByIDParams, ...users.ClientOption) (*users.GetUserByIDOK, error)) *MockClientService_GetUserByIDWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLoginOrEmail provides a mock function with given fields: loginOrEmail, opts
func (_m *MockClientService) GetUserByLoginOrEmail(loginOrEmail string, opts ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, loginOrEmail)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLoginOrEmail")
	}

	var r0 *users.GetUserByLoginOrEmailOK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error)); ok {
		return rf(loginOrEmail, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...users.ClientOption) *users.GetUserByLoginOrEmailOK); ok {
		r0 = rf(loginOrEmail, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserByLoginOrEmailOK)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...users.ClientOption) error); ok {
		r1 = rf(loginOrEmail, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserByLoginOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLoginOrEmail'
type MockClientService_GetUserByLoginOrEmail_Call struct {
	*mock.Call
}

// GetUserByLoginOrEmail is a helper method to define mock.On call
//   - loginOrEmail string
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserByLoginOrEmail(loginOrEmail interface{}, opts ...interface{}) *MockClientService_GetUserByLoginOrEmail_Call {
	return &MockClientService_GetUserByLoginOrEmail_Call{Call: _e.mock.On("GetUserByLoginOrEmail",
		append([]interface{}{loginOrEmail}, opts...)...)}
}

func (_c *MockClientService_GetUserByLoginOrEmail_Call) Run(run func(loginOrEmail string, opts ...users.ClientOption)) *MockClientService_GetUserByLoginOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserByLoginOrEmail_Call) Return(_a0 *users.GetUserByLoginOrEmailOK, _a1 error) *MockClientService_GetUserByLoginOrEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserByLoginOrEmail_Call) RunAndReturn(run func(string, ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error)) *MockClientService_GetUserByLoginOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLoginOrEmailWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetUserByLoginOrEmailWithParams(params *users.GetUserByLoginOrEmailParams, opts ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLoginOrEmailWithParams")
	}

	var r0 *users.GetUserByLoginOrEmailOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) *users.GetUserByLoginOrEmailOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserByLoginOrEmailOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserByLoginOrEmailWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLoginOrEmailWithParams'
type MockClientService_GetUserByLoginOrEmailWithParams_Call struct {
	*mock.Call
}

// GetUserByLoginOrEmailWithParams is a helper method to define mock.On call
//   - params *users.GetUserByLoginOrEmailParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserByLoginOrEmailWithParams(params interface{}, opts ...interface{}) *MockClientService_GetUserByLoginOrEmailWithParams_Call {
	return &MockClientService_GetUserByLoginOrEmailWithParams_Call{Call: _e.mock.On("GetUserByLoginOrEmailWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetUserByLoginOrEmailWithParams_Call) Run(run func(params *users.GetUserByLoginOrEmailParams, opts ...users.ClientOption)) *MockClientService_GetUserByLoginOrEmailWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.GetUserByLoginOrEmailParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserByLoginOrEmailWithParams_Call) Return(_a0 *users.GetUserByLoginOrEmailOK, _a1 error) *MockClientService_GetUserByLoginOrEmailWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserByLoginOrEmailWithParams_Call) RunAndReturn(run func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error)) *MockClientService_GetUserByLoginOrEmailWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrgList provides a mock function with given fields: userID, opts
func (_m *MockClientService) GetUserOrgList(userID int64, opts ...users.ClientOption) (*users.GetUserOrgListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrgList")
	}

	var r0 *users.GetUserOrgListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...users.ClientOption) (*users.GetUserOrgListOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...users.ClientOption) *users.GetUserOrgListOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserOrgListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserOrgList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrgList'
type MockClientService_GetUserOrgList_Call struct {
	*mock.Call
}

// GetUserOrgList is a helper method to define mock.On call
//   - userID int64
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserOrgList(userID interface{}, opts ...interface{}) *MockClientService_GetUserOrgList_Call {
	return &MockClientService_GetUserOrgList_Call{Call: _e.mock.On("GetUserOrgList",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_GetUserOrgList_Call) Run(run func(userID int64, opts ...users.ClientOption)) *MockClientService_GetUserOrgList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserOrgList_Call) Return(_a0 *users.GetUserOrgListOK, _a1 error) *MockClientService_GetUserOrgList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserOrgList_Call) RunAndReturn(run func(int64, ...users.ClientOption) (*users.GetUserOrgListOK, error)) *MockClientService_GetUserOrgList_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrgListWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetUserOrgListWithParams(params *users.GetUserOrgListParams, opts ...users.ClientOption) (*users.GetUserOrgListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrgListWithParams")
	}

	var r0 *users.GetUserOrgListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.GetUserOrgListParams, ...users.ClientOption) (*users.GetUserOrgListOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.GetUserOrgListParams, ...users.ClientOption) *users.GetUserOrgListOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserOrgListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.GetUserOrgListParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserOrgListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrgListWithParams'
type MockClientService_GetUserOrgListWithParams_Call struct {
	*mock.Call
}

// GetUserOrgListWithParams is a helper method to define mock.On call
//   - params *users.GetUserOrgListParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserOrgListWithParams(params interface{}, opts ...interface{}) *MockClientService_GetUserOrgListWithParams_Call {
	return &MockClientService_GetUserOrgListWithParams_Call{Call: _e.mock.On("GetUserOrgListWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetUserOrgListWithParams_Call) Run(run func(params *users.GetUserOrgListParams, opts ...users.ClientOption)) *MockClientService_GetUserOrgListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.GetUserOrgListParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserOrgListWithParams_Call) Return(_a0 *users.GetUserOrgListOK, _a1 error) *MockClientService_GetUserOrgListWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserOrgListWithParams_Call) RunAndReturn(run func(*users.GetUserOrgListParams, ...users.ClientOption) (*users.GetUserOrgListOK, error)) *MockClientService_GetUserOrgListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeams provides a mock function with given fields: userID, opts
func (_m *MockClientService) GetUserTeams(userID int64, opts ...users.ClientOption) (*users.GetUserTeamsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTeams")
	}

	var r0 *users.GetUserTeamsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, ...users.ClientOption) (*users.GetUserTeamsOK, error)); ok {
		return rf(userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, ...users.ClientOption) *users.GetUserTeamsOK); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserTeamsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, ...users.ClientOption) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeams'
type MockClientService_GetUserTeams_Call struct {
	*mock.Call
}

// GetUserTeams is a helper method to define mock.On call
//   - userID int64
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserTeams(userID interface{}, opts ...interface{}) *MockClientService_GetUserTeams_Call {
	return &MockClientService_GetUserTeams_Call{Call: _e.mock.On("GetUserTeams",
		append([]interface{}{userID}, opts...)...)}
}

func (_c *MockClientService_GetUserTeams_Call) Run(run func(userID int64, opts ...users.ClientOption)) *MockClientService_GetUserTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserTeams_Call) Return(_a0 *users.GetUserTeamsOK, _a1 error) *MockClientService_GetUserTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserTeams_Call) RunAndReturn(run func(int64, ...users.ClientOption) (*users.GetUserTeamsOK, error)) *MockClientService_GetUserTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeamsWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) GetUserTeamsWithParams(params *users.GetUserTeamsParams, opts ...users.ClientOption) (*users.GetUserTeamsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTeamsWithParams")
	}

	var r0 *users.GetUserTeamsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.GetUserTeamsParams, ...users.ClientOption) (*users.GetUserTeamsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.GetUserTeamsParams, ...users.ClientOption) *users.GetUserTeamsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserTeamsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.GetUserTeamsParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUserTeamsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeamsWithParams'
type MockClientService_GetUserTeamsWithParams_Call struct {
	*mock.Call
}

// GetUserTeamsWithParams is a helper method to define mock.On call
//   - params *users.GetUserTeamsParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) GetUserTeamsWithParams(params interface{}, opts ...interface{}) *MockClientService_GetUserTeamsWithParams_Call {
	return &MockClientService_GetUserTeamsWithParams_Call{Call: _e.mock.On("GetUserTeamsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetUserTeamsWithParams_Call) Run(run func(params *users.GetUserTeamsParams, opts ...users.ClientOption)) *MockClientService_GetUserTeamsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.GetUserTeamsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUserTeamsWithParams_Call) Return(_a0 *users.GetUserTeamsOK, _a1 error) *MockClientService_GetUserTeamsWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUserTeamsWithParams_Call) RunAndReturn(run func(*users.GetUserTeamsParams, ...users.ClientOption) (*users.GetUserTeamsOK, error)) *MockClientService_GetUserTeamsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUsers provides a mock function with given fields: params, opts
func (_m *MockClientService) SearchUsers(params *users.SearchUsersParams, opts ...users.ClientOption) (*users.SearchUsersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 *users.SearchUsersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.SearchUsersParams, ...users.ClientOption) (*users.SearchUsersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.SearchUsersParams, ...users.ClientOption) *users.SearchUsersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.SearchUsersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.SearchUsersParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SearchUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUsers'
type MockClientService_SearchUsers_Call struct {
	*mock.Call
}

// SearchUsers is a helper method to define mock.On call
//   - params *users.SearchUsersParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) SearchUsers(params interface{}, opts ...interface{}) *MockClientService_SearchUsers_Call {
	return &MockClientService_SearchUsers_Call{Call: _e.mock.On("SearchUsers",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SearchUsers_Call) Run(run func(params *users.SearchUsersParams, opts ...users.ClientOption)) *MockClientService_SearchUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.SearchUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SearchUsers_Call) Return(_a0 *users.SearchUsersOK, _a1 error) *MockClientService_SearchUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SearchUsers_Call) RunAndReturn(run func(*users.SearchUsersParams, ...users.ClientOption) (*users.SearchUsersOK, error)) *MockClientService_SearchUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUsersWithPaging provides a mock function with given fields: opts
func (_m *MockClientService) SearchUsersWithPaging(opts ...users.ClientOption) (*users.SearchUsersWithPagingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsersWithPaging")
	}

	var r0 *users.SearchUsersWithPagingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(...users.ClientOption) (*users.SearchUsersWithPagingOK, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...users.ClientOption) *users.SearchUsersWithPagingOK); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.SearchUsersWithPagingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(...users.ClientOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SearchUsersWithPaging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUsersWithPaging'
type MockClientService_SearchUsersWithPaging_Call struct {
	*mock.Call
}

// SearchUsersWithPaging is a helper method to define mock.On call
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) SearchUsersWithPaging(opts ...interface{}) *MockClientService_SearchUsersWithPaging_Call {
	return &MockClientService_SearchUsersWithPaging_Call{Call: _e.mock.On("SearchUsersWithPaging",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockClientService_SearchUsersWithPaging_Call) Run(run func(opts ...users.ClientOption)) *MockClientService_SearchUsersWithPaging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SearchUsersWithPaging_Call) Return(_a0 *users.SearchUsersWithPagingOK, _a1 error) *MockClientService_SearchUsersWithPaging_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SearchUsersWithPaging_Call) RunAndReturn(run func(...users.ClientOption) (*users.SearchUsersWithPagingOK, error)) *MockClientService_SearchUsersWithPaging_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUsersWithPagingWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) SearchUsersWithPagingWithParams(params *users.SearchUsersWithPagingParams, opts ...users.ClientOption) (*users.SearchUsersWithPagingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsersWithPagingWithParams")
	}

	var r0 *users.SearchUsersWithPagingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.SearchUsersWithPagingParams, ...users.ClientOption) (*users.SearchUsersWithPagingOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.SearchUsersWithPagingParams, ...users.ClientOption) *users.SearchUsersWithPagingOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.SearchUsersWithPagingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.SearchUsersWithPagingParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SearchUsersWithPagingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUsersWithPagingWithParams'
type MockClientService_SearchUsersWithPagingWithParams_Call struct {
	*mock.Call
}

// SearchUsersWithPagingWithParams is a helper method to define mock.On call
//   - params *users.SearchUsersWithPagingParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) SearchUsersWithPagingWithParams(params interface{}, opts ...interface{}) *MockClientService_SearchUsersWithPagingWithParams_Call {
	return &MockClientService_SearchUsersWithPagingWithParams_Call{Call: _e.mock.On("SearchUsersWithPagingWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_SearchUsersWithPagingWithParams_Call) Run(run func(params *users.SearchUsersWithPagingParams, opts ...users.ClientOption)) *MockClientService_SearchUsersWithPagingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.SearchUsersWithPagingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SearchUsersWithPagingWithParams_Call) Return(_a0 *users.SearchUsersWithPagingOK, _a1 error) *MockClientService_SearchUsersWithPagingWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SearchUsersWithPagingWithParams_Call) RunAndReturn(run func(*users.SearchUsersWithPagingParams, ...users.ClientOption) (*users.SearchUsersWithPagingOK, error)) *MockClientService_SearchUsersWithPagingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// UpdateUser provides a mock function with given fields: userID, body, opts
func (_m *MockClientService) UpdateUser(userID int64, body *models.UpdateUserCommand, opts ...users.ClientOption) (*users.UpdateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *users.UpdateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *models.UpdateUserCommand, ...users.ClientOption) (*users.UpdateUserOK, error)); ok {
		return rf(userID, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(int64, *models.UpdateUserCommand, ...users.ClientOption) *users.UpdateUserOK); ok {
		r0 = rf(userID, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.UpdateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *models.UpdateUserCommand, ...users.ClientOption) error); ok {
		r1 = rf(userID, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockClientService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - userID int64
//   - body *models.UpdateUserCommand
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) UpdateUser(userID interface{}, body interface{}, opts ...interface{}) *MockClientService_UpdateUser_Call {
	return &MockClientService_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{userID, body}, opts...)...)}
}

func (_c *MockClientService_UpdateUser_Call) Run(run func(userID int64, body *models.UpdateUserCommand, opts ...users.ClientOption)) *MockClientService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(int64), args[1].(*models.UpdateUserCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateUser_Call) Return(_a0 *users.UpdateUserOK, _a1 error) *MockClientService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateUser_Call) RunAndReturn(run func(int64, *models.UpdateUserCommand, ...users.ClientOption) (*users.UpdateUserOK, error)) *MockClientService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserWithParams provides a mock function with given fields: params, opts
func (_m *MockClientService) UpdateUserWithParams(params *users.UpdateUserParams, opts ...users.ClientOption) (*users.UpdateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserWithParams")
	}

	var r0 *users.UpdateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.UpdateUserParams, ...users.ClientOption) (*users.UpdateUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*users.UpdateUserParams, ...users.ClientOption) *users.UpdateUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.UpdateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.UpdateUserParams, ...users.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserWithParams'
type MockClientService_UpdateUserWithParams_Call struct {
	*mock.Call
}

// UpdateUserWithParams is a helper method to define mock.On call
//   - params *users.UpdateUserParams
//   - opts ...users.ClientOption
func (_e *MockClientService_Expecter) UpdateUserWithParams(params interface{}, opts ...interface{}) *MockClientService_UpdateUserWithParams_Call {
	return &MockClientService_UpdateUserWithParams_Call{Call: _e.mock.On("UpdateUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_UpdateUserWithParams_Call) Run(run func(params *users.UpdateUserParams, opts ...users.ClientOption)) *MockClientService_UpdateUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]users.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(users.ClientOption)
			}
		}
		run(args[0].(*users.UpdateUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateUserWithParams_Call) Return(_a0 *users.UpdateUserOK, _a1 error) *MockClientService_UpdateUserWithParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateUserWithParams_Call) RunAndReturn(run func(*users.UpdateUserParams, ...users.ClientOption) (*users.UpdateUserOK, error)) *MockClientService_UpdateUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
