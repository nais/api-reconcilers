// Code generated by mockery. DO NOT EDIT.

package dependencytrack_reconciler

import (
	context "context"

	client "github.com/nais/dependencytrack/pkg/client"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddToTeam provides a mock function with given fields: ctx, username, uuid
func (_m *MockClient) AddToTeam(ctx context.Context, username string, uuid string) error {
	ret := _m.Called(ctx, username, uuid)

	if len(ret) == 0 {
		panic("no return value specified for AddToTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_AddToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToTeam'
type MockClient_AddToTeam_Call struct {
	*mock.Call
}

// AddToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - uuid string
func (_e *MockClient_Expecter) AddToTeam(ctx interface{}, username interface{}, uuid interface{}) *MockClient_AddToTeam_Call {
	return &MockClient_AddToTeam_Call{Call: _e.mock.On("AddToTeam", ctx, username, uuid)}
}

func (_c *MockClient_AddToTeam_Call) Run(run func(ctx context.Context, username string, uuid string)) *MockClient_AddToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_AddToTeam_Call) Return(_a0 error) *MockClient_AddToTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_AddToTeam_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_AddToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeAdminPassword provides a mock function with given fields: ctx, oldPassword, newPassword
func (_m *MockClient) ChangeAdminPassword(ctx context.Context, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAdminPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_ChangeAdminPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeAdminPassword'
type MockClient_ChangeAdminPassword_Call struct {
	*mock.Call
}

// ChangeAdminPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - oldPassword string
//   - newPassword string
func (_e *MockClient_Expecter) ChangeAdminPassword(ctx interface{}, oldPassword interface{}, newPassword interface{}) *MockClient_ChangeAdminPassword_Call {
	return &MockClient_ChangeAdminPassword_Call{Call: _e.mock.On("ChangeAdminPassword", ctx, oldPassword, newPassword)}
}

func (_c *MockClient_ChangeAdminPassword_Call) Run(run func(ctx context.Context, oldPassword string, newPassword string)) *MockClient_ChangeAdminPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_ChangeAdminPassword_Call) Return(_a0 error) *MockClient_ChangeAdminPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ChangeAdminPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_ChangeAdminPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigPropertyAggregate provides a mock function with given fields: ctx, properties
func (_m *MockClient) ConfigPropertyAggregate(ctx context.Context, properties []client.ConfigProperty) ([]client.ConfigProperty, error) {
	ret := _m.Called(ctx, properties)

	if len(ret) == 0 {
		panic("no return value specified for ConfigPropertyAggregate")
	}

	var r0 []client.ConfigProperty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []client.ConfigProperty) ([]client.ConfigProperty, error)); ok {
		return rf(ctx, properties)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []client.ConfigProperty) []client.ConfigProperty); ok {
		r0 = rf(ctx, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []client.ConfigProperty) error); ok {
		r1 = rf(ctx, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ConfigPropertyAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigPropertyAggregate'
type MockClient_ConfigPropertyAggregate_Call struct {
	*mock.Call
}

// ConfigPropertyAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - properties []client.ConfigProperty
func (_e *MockClient_Expecter) ConfigPropertyAggregate(ctx interface{}, properties interface{}) *MockClient_ConfigPropertyAggregate_Call {
	return &MockClient_ConfigPropertyAggregate_Call{Call: _e.mock.On("ConfigPropertyAggregate", ctx, properties)}
}

func (_c *MockClient_ConfigPropertyAggregate_Call) Run(run func(ctx context.Context, properties []client.ConfigProperty)) *MockClient_ConfigPropertyAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]client.ConfigProperty))
	})
	return _c
}

func (_c *MockClient_ConfigPropertyAggregate_Call) Return(_a0 []client.ConfigProperty, _a1 error) *MockClient_ConfigPropertyAggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ConfigPropertyAggregate_Call) RunAndReturn(run func(context.Context, []client.ConfigProperty) ([]client.ConfigProperty, error)) *MockClient_ConfigPropertyAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdminUsers provides a mock function with given fields: ctx, users, teamUuid
func (_m *MockClient) CreateAdminUsers(ctx context.Context, users *client.AdminUsers, teamUuid string) error {
	ret := _m.Called(ctx, users, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdminUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AdminUsers, string) error); ok {
		r0 = rf(ctx, users, teamUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateAdminUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdminUsers'
type MockClient_CreateAdminUsers_Call struct {
	*mock.Call
}

// CreateAdminUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - users *client.AdminUsers
//   - teamUuid string
func (_e *MockClient_Expecter) CreateAdminUsers(ctx interface{}, users interface{}, teamUuid interface{}) *MockClient_CreateAdminUsers_Call {
	return &MockClient_CreateAdminUsers_Call{Call: _e.mock.On("CreateAdminUsers", ctx, users, teamUuid)}
}

func (_c *MockClient_CreateAdminUsers_Call) Run(run func(ctx context.Context, users *client.AdminUsers, teamUuid string)) *MockClient_CreateAdminUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AdminUsers), args[2].(string))
	})
	return _c
}

func (_c *MockClient_CreateAdminUsers_Call) Return(_a0 error) *MockClient_CreateAdminUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateAdminUsers_Call) RunAndReturn(run func(context.Context, *client.AdminUsers, string) error) *MockClient_CreateAdminUsers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChildProject provides a mock function with given fields: ctx, project, name, version, group, classifier, tags
func (_m *MockClient) CreateChildProject(ctx context.Context, project *client.Project, name string, version string, group string, classifier string, tags []string) (*client.Project, error) {
	ret := _m.Called(ctx, project, name, version, group, classifier, tags)

	if len(ret) == 0 {
		panic("no return value specified for CreateChildProject")
	}

	var r0 *client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Project, string, string, string, string, []string) (*client.Project, error)); ok {
		return rf(ctx, project, name, version, group, classifier, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.Project, string, string, string, string, []string) *client.Project); ok {
		r0 = rf(ctx, project, name, version, group, classifier, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.Project, string, string, string, string, []string) error); ok {
		r1 = rf(ctx, project, name, version, group, classifier, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateChildProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChildProject'
type MockClient_CreateChildProject_Call struct {
	*mock.Call
}

// CreateChildProject is a helper method to define mock.On call
//   - ctx context.Context
//   - project *client.Project
//   - name string
//   - version string
//   - group string
//   - classifier string
//   - tags []string
func (_e *MockClient_Expecter) CreateChildProject(ctx interface{}, project interface{}, name interface{}, version interface{}, group interface{}, classifier interface{}, tags interface{}) *MockClient_CreateChildProject_Call {
	return &MockClient_CreateChildProject_Call{Call: _e.mock.On("CreateChildProject", ctx, project, name, version, group, classifier, tags)}
}

func (_c *MockClient_CreateChildProject_Call) Run(run func(ctx context.Context, project *client.Project, name string, version string, group string, classifier string, tags []string)) *MockClient_CreateChildProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.Project), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].([]string))
	})
	return _c
}

func (_c *MockClient_CreateChildProject_Call) Return(_a0 *client.Project, _a1 error) *MockClient_CreateChildProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateChildProject_Call) RunAndReturn(run func(context.Context, *client.Project, string, string, string, string, []string) (*client.Project, error)) *MockClient_CreateChildProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedUser provides a mock function with given fields: ctx, username, password
func (_m *MockClient) CreateManagedUser(ctx context.Context, username string, password string) error {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedUser'
type MockClient_CreateManagedUser_Call struct {
	*mock.Call
}

// CreateManagedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockClient_Expecter) CreateManagedUser(ctx interface{}, username interface{}, password interface{}) *MockClient_CreateManagedUser_Call {
	return &MockClient_CreateManagedUser_Call{Call: _e.mock.On("CreateManagedUser", ctx, username, password)}
}

func (_c *MockClient_CreateManagedUser_Call) Run(run func(ctx context.Context, username string, password string)) *MockClient_CreateManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_CreateManagedUser_Call) Return(_a0 error) *MockClient_CreateManagedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateManagedUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_CreateManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUser provides a mock function with given fields: ctx, email
func (_m *MockClient) CreateOidcUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUser'
type MockClient_CreateOidcUser_Call struct {
	*mock.Call
}

// CreateOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockClient_Expecter) CreateOidcUser(ctx interface{}, email interface{}) *MockClient_CreateOidcUser_Call {
	return &MockClient_CreateOidcUser_Call{Call: _e.mock.On("CreateOidcUser", ctx, email)}
}

func (_c *MockClient_CreateOidcUser_Call) Run(run func(ctx context.Context, email string)) *MockClient_CreateOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_CreateOidcUser_Call) Return(_a0 error) *MockClient_CreateOidcUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateOidcUser_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_CreateOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, name, version, group, tags
func (_m *MockClient) CreateProject(ctx context.Context, name string, version string, group string, tags []string) (*client.Project, error) {
	ret := _m.Called(ctx, name, version, group, tags)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) (*client.Project, error)); ok {
		return rf(ctx, name, version, group, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) *client.Project); ok {
		r0 = rf(ctx, name, version, group, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, name, version, group, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockClient_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - group string
//   - tags []string
func (_e *MockClient_Expecter) CreateProject(ctx interface{}, name interface{}, version interface{}, group interface{}, tags interface{}) *MockClient_CreateProject_Call {
	return &MockClient_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, name, version, group, tags)}
}

func (_c *MockClient_CreateProject_Call) Run(run func(ctx context.Context, name string, version string, group string, tags []string)) *MockClient_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockClient_CreateProject_Call) Return(_a0 *client.Project, _a1 error) *MockClient_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateProject_Call) RunAndReturn(run func(context.Context, string, string, string, []string) (*client.Project, error)) *MockClient_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx, teamName, permissions
func (_m *MockClient) CreateTeam(ctx context.Context, teamName string, permissions []client.Permission) (*client.Team, error) {
	ret := _m.Called(ctx, teamName, permissions)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *client.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.Permission) (*client.Team, error)); ok {
		return rf(ctx, teamName, permissions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.Permission) *client.Team); ok {
		r0 = rf(ctx, teamName, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []client.Permission) error); ok {
		r1 = rf(ctx, teamName, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockClient_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamName string
//   - permissions []client.Permission
func (_e *MockClient_Expecter) CreateTeam(ctx interface{}, teamName interface{}, permissions interface{}) *MockClient_CreateTeam_Call {
	return &MockClient_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, teamName, permissions)}
}

func (_c *MockClient_CreateTeam_Call) Run(run func(ctx context.Context, teamName string, permissions []client.Permission)) *MockClient_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]client.Permission))
	})
	return _c
}

func (_c *MockClient_CreateTeam_Call) Return(_a0 *client.Team, _a1 error) *MockClient_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateTeam_Call) RunAndReturn(run func(context.Context, string, []client.Permission) (*client.Team, error)) *MockClient_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUser provides a mock function with given fields: ctx, username
func (_m *MockClient) DeleteManagedUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUser'
type MockClient_DeleteManagedUser_Call struct {
	*mock.Call
}

// DeleteManagedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockClient_Expecter) DeleteManagedUser(ctx interface{}, username interface{}) *MockClient_DeleteManagedUser_Call {
	return &MockClient_DeleteManagedUser_Call{Call: _e.mock.On("DeleteManagedUser", ctx, username)}
}

func (_c *MockClient_DeleteManagedUser_Call) Run(run func(ctx context.Context, username string)) *MockClient_DeleteManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteManagedUser_Call) Return(_a0 error) *MockClient_DeleteManagedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteManagedUser_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_DeleteManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUser provides a mock function with given fields: ctx, username
func (_m *MockClient) DeleteOidcUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUser'
type MockClient_DeleteOidcUser_Call struct {
	*mock.Call
}

// DeleteOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockClient_Expecter) DeleteOidcUser(ctx interface{}, username interface{}) *MockClient_DeleteOidcUser_Call {
	return &MockClient_DeleteOidcUser_Call{Call: _e.mock.On("DeleteOidcUser", ctx, username)}
}

func (_c *MockClient_DeleteOidcUser_Call) Run(run func(ctx context.Context, username string)) *MockClient_DeleteOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteOidcUser_Call) Return(_a0 error) *MockClient_DeleteOidcUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteOidcUser_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_DeleteOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, uuid
func (_m *MockClient) DeleteProject(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockClient_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) DeleteProject(ctx interface{}, uuid interface{}) *MockClient_DeleteProject_Call {
	return &MockClient_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, uuid)}
}

func (_c *MockClient_DeleteProject_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteProject_Call) Return(_a0 error) *MockClient_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteProject_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjects provides a mock function with given fields: ctx, name
func (_m *MockClient) DeleteProjects(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjects'
type MockClient_DeleteProjects_Call struct {
	*mock.Call
}

// DeleteProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClient_Expecter) DeleteProjects(ctx interface{}, name interface{}) *MockClient_DeleteProjects_Call {
	return &MockClient_DeleteProjects_Call{Call: _e.mock.On("DeleteProjects", ctx, name)}
}

func (_c *MockClient_DeleteProjects_Call) Run(run func(ctx context.Context, name string)) *MockClient_DeleteProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteProjects_Call) Return(_a0 error) *MockClient_DeleteProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteProjects_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_DeleteProjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, uuid
func (_m *MockClient) DeleteTeam(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockClient_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) DeleteTeam(ctx interface{}, uuid interface{}) *MockClient_DeleteTeam_Call {
	return &MockClient_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, uuid)}
}

func (_c *MockClient_DeleteTeam_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteTeam_Call) Return(_a0 error) *MockClient_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteTeam_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserMembership provides a mock function with given fields: ctx, uuid, username
func (_m *MockClient) DeleteUserMembership(ctx context.Context, uuid string, username string) error {
	ret := _m.Called(ctx, uuid, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, uuid, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteUserMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserMembership'
type MockClient_DeleteUserMembership_Call struct {
	*mock.Call
}

// DeleteUserMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - username string
func (_e *MockClient_Expecter) DeleteUserMembership(ctx interface{}, uuid interface{}, username interface{}) *MockClient_DeleteUserMembership_Call {
	return &MockClient_DeleteUserMembership_Call{Call: _e.mock.On("DeleteUserMembership", ctx, uuid, username)}
}

func (_c *MockClient_DeleteUserMembership_Call) Run(run func(ctx context.Context, uuid string, username string)) *MockClient_DeleteUserMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_DeleteUserMembership_Call) Return(_a0 error) *MockClient_DeleteUserMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteUserMembership_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_DeleteUserMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKey provides a mock function with given fields: ctx, uuid
func (_m *MockClient) GenerateApiKey(ctx context.Context, uuid string) (string, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKey'
type MockClient_GenerateApiKey_Call struct {
	*mock.Call
}

// GenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) GenerateApiKey(ctx interface{}, uuid interface{}) *MockClient_GenerateApiKey_Call {
	return &MockClient_GenerateApiKey_Call{Call: _e.mock.On("GenerateApiKey", ctx, uuid)}
}

func (_c *MockClient_GenerateApiKey_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_GenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GenerateApiKey_Call) Return(_a0 string, _a1 error) *MockClient_GenerateApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GenerateApiKey_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockClient_GenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigProperties provides a mock function with given fields: ctx
func (_m *MockClient) GetConfigProperties(ctx context.Context) ([]client.ConfigProperty, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigProperties")
	}

	var r0 []client.ConfigProperty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.ConfigProperty, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.ConfigProperty); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetConfigProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigProperties'
type MockClient_GetConfigProperties_Call struct {
	*mock.Call
}

// GetConfigProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetConfigProperties(ctx interface{}) *MockClient_GetConfigProperties_Call {
	return &MockClient_GetConfigProperties_Call{Call: _e.mock.On("GetConfigProperties", ctx)}
}

func (_c *MockClient_GetConfigProperties_Call) Run(run func(ctx context.Context)) *MockClient_GetConfigProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetConfigProperties_Call) Return(_a0 []client.ConfigProperty, _a1 error) *MockClient_GetConfigProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetConfigProperties_Call) RunAndReturn(run func(context.Context) ([]client.ConfigProperty, error)) *MockClient_GetConfigProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentProjectMetric provides a mock function with given fields: ctx, projectUuid
func (_m *MockClient) GetCurrentProjectMetric(ctx context.Context, projectUuid string) (*client.ProjectMetric, error) {
	ret := _m.Called(ctx, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentProjectMetric")
	}

	var r0 *client.ProjectMetric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ProjectMetric, error)); ok {
		return rf(ctx, projectUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ProjectMetric); ok {
		r0 = rf(ctx, projectUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetCurrentProjectMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentProjectMetric'
type MockClient_GetCurrentProjectMetric_Call struct {
	*mock.Call
}

// GetCurrentProjectMetric is a helper method to define mock.On call
//   - ctx context.Context
//   - projectUuid string
func (_e *MockClient_Expecter) GetCurrentProjectMetric(ctx interface{}, projectUuid interface{}) *MockClient_GetCurrentProjectMetric_Call {
	return &MockClient_GetCurrentProjectMetric_Call{Call: _e.mock.On("GetCurrentProjectMetric", ctx, projectUuid)}
}

func (_c *MockClient_GetCurrentProjectMetric_Call) Run(run func(ctx context.Context, projectUuid string)) *MockClient_GetCurrentProjectMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetCurrentProjectMetric_Call) Return(_a0 *client.ProjectMetric, _a1 error) *MockClient_GetCurrentProjectMetric_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetCurrentProjectMetric_Call) RunAndReturn(run func(context.Context, string) (*client.ProjectMetric, error)) *MockClient_GetCurrentProjectMetric_Call {
	_c.Call.Return(run)
	return _c
}

// GetEcosystems provides a mock function with given fields: ctx
func (_m *MockClient) GetEcosystems(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEcosystems")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEcosystems'
type MockClient_GetEcosystems_Call struct {
	*mock.Call
}

// GetEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetEcosystems(ctx interface{}) *MockClient_GetEcosystems_Call {
	return &MockClient_GetEcosystems_Call{Call: _e.mock.On("GetEcosystems", ctx)}
}

func (_c *MockClient_GetEcosystems_Call) Run(run func(ctx context.Context)) *MockClient_GetEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetEcosystems_Call) Return(_a0 []string, _a1 error) *MockClient_GetEcosystems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetEcosystems_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockClient_GetEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindings provides a mock function with given fields: ctx, projectUuid
func (_m *MockClient) GetFindings(ctx context.Context, projectUuid string) ([]*client.Finding, error) {
	ret := _m.Called(ctx, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 []*client.Finding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*client.Finding, error)); ok {
		return rf(ctx, projectUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*client.Finding); ok {
		r0 = rf(ctx, projectUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Finding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindings'
type MockClient_GetFindings_Call struct {
	*mock.Call
}

// GetFindings is a helper method to define mock.On call
//   - ctx context.Context
//   - projectUuid string
func (_e *MockClient_Expecter) GetFindings(ctx interface{}, projectUuid interface{}) *MockClient_GetFindings_Call {
	return &MockClient_GetFindings_Call{Call: _e.mock.On("GetFindings", ctx, projectUuid)}
}

func (_c *MockClient_GetFindings_Call) Run(run func(ctx context.Context, projectUuid string)) *MockClient_GetFindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetFindings_Call) Return(_a0 []*client.Finding, _a1 error) *MockClient_GetFindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFindings_Call) RunAndReturn(run func(context.Context, string) ([]*client.Finding, error)) *MockClient_GetFindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsers provides a mock function with given fields: ctx
func (_m *MockClient) GetOidcUsers(ctx context.Context) ([]client.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsers")
	}

	var r0 []client.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetOidcUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsers'
type MockClient_GetOidcUsers_Call struct {
	*mock.Call
}

// GetOidcUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetOidcUsers(ctx interface{}) *MockClient_GetOidcUsers_Call {
	return &MockClient_GetOidcUsers_Call{Call: _e.mock.On("GetOidcUsers", ctx)}
}

func (_c *MockClient_GetOidcUsers_Call) Run(run func(ctx context.Context)) *MockClient_GetOidcUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetOidcUsers_Call) Return(_a0 []client.User, _a1 error) *MockClient_GetOidcUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetOidcUsers_Call) RunAndReturn(run func(context.Context) ([]client.User, error)) *MockClient_GetOidcUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, name, version
func (_m *MockClient) GetProject(ctx context.Context, name string, version string) (*client.Project, error) {
	ret := _m.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*client.Project, error)); ok {
		return rf(ctx, name, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *client.Project); ok {
		r0 = rf(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockClient_Expecter) GetProject(ctx interface{}, name interface{}, version interface{}) *MockClient_GetProject_Call {
	return &MockClient_GetProject_Call{Call: _e.mock.On("GetProject", ctx, name, version)}
}

func (_c *MockClient_GetProject_Call) Run(run func(ctx context.Context, name string, version string)) *MockClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetProject_Call) Return(_a0 *client.Project, _a1 error) *MockClient_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProject_Call) RunAndReturn(run func(context.Context, string, string) (*client.Project, error)) *MockClient_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsByDate provides a mock function with given fields: ctx, projectUuid, date
func (_m *MockClient) GetProjectMetricsByDate(ctx context.Context, projectUuid string, date string) ([]*client.ProjectMetric, error) {
	ret := _m.Called(ctx, projectUuid, date)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsByDate")
	}

	var r0 []*client.ProjectMetric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*client.ProjectMetric, error)); ok {
		return rf(ctx, projectUuid, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*client.ProjectMetric); ok {
		r0 = rf(ctx, projectUuid, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.ProjectMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectUuid, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjectMetricsByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsByDate'
type MockClient_GetProjectMetricsByDate_Call struct {
	*mock.Call
}

// GetProjectMetricsByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - projectUuid string
//   - date string
func (_e *MockClient_Expecter) GetProjectMetricsByDate(ctx interface{}, projectUuid interface{}, date interface{}) *MockClient_GetProjectMetricsByDate_Call {
	return &MockClient_GetProjectMetricsByDate_Call{Call: _e.mock.On("GetProjectMetricsByDate", ctx, projectUuid, date)}
}

func (_c *MockClient_GetProjectMetricsByDate_Call) Run(run func(ctx context.Context, projectUuid string, date string)) *MockClient_GetProjectMetricsByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetProjectMetricsByDate_Call) Return(_a0 []*client.ProjectMetric, _a1 error) *MockClient_GetProjectMetricsByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjectMetricsByDate_Call) RunAndReturn(run func(context.Context, string, string) ([]*client.ProjectMetric, error)) *MockClient_GetProjectMetricsByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx
func (_m *MockClient) GetProjects(ctx context.Context) ([]*client.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []*client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*client.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*client.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetProjects(ctx interface{}) *MockClient_GetProjects_Call {
	return &MockClient_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx)}
}

func (_c *MockClient_GetProjects_Call) Run(run func(ctx context.Context)) *MockClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetProjects_Call) Return(_a0 []*client.Project, _a1 error) *MockClient_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjects_Call) RunAndReturn(run func(context.Context) ([]*client.Project, error)) *MockClient_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByTag provides a mock function with given fields: ctx, tag
func (_m *MockClient) GetProjectsByTag(ctx context.Context, tag string) ([]*client.Project, error) {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByTag")
	}

	var r0 []*client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*client.Project, error)); ok {
		return rf(ctx, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*client.Project); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjectsByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByTag'
type MockClient_GetProjectsByTag_Call struct {
	*mock.Call
}

// GetProjectsByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
func (_e *MockClient_Expecter) GetProjectsByTag(ctx interface{}, tag interface{}) *MockClient_GetProjectsByTag_Call {
	return &MockClient_GetProjectsByTag_Call{Call: _e.mock.On("GetProjectsByTag", ctx, tag)}
}

func (_c *MockClient_GetProjectsByTag_Call) Run(run func(ctx context.Context, tag string)) *MockClient_GetProjectsByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetProjectsByTag_Call) Return(_a0 []*client.Project, _a1 error) *MockClient_GetProjectsByTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjectsByTag_Call) RunAndReturn(run func(context.Context, string) ([]*client.Project, error)) *MockClient_GetProjectsByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, team
func (_m *MockClient) GetTeam(ctx context.Context, team string) (*client.Team, error) {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *client.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.Team, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Team); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockClient_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
func (_e *MockClient_Expecter) GetTeam(ctx interface{}, team interface{}) *MockClient_GetTeam_Call {
	return &MockClient_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, team)}
}

func (_c *MockClient_GetTeam_Call) Run(run func(ctx context.Context, team string)) *MockClient_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetTeam_Call) Return(_a0 *client.Team, _a1 error) *MockClient_GetTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTeam_Call) RunAndReturn(run func(context.Context, string) (*client.Team, error)) *MockClient_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockClient) GetTeams(ctx context.Context) ([]client.Team, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []client.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockClient_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetTeams(ctx interface{}) *MockClient_GetTeams_Call {
	return &MockClient_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockClient_GetTeams_Call) Run(run func(ctx context.Context)) *MockClient_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetTeams_Call) Return(_a0 []client.Team, _a1 error) *MockClient_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTeams_Call) RunAndReturn(run func(context.Context) ([]client.Team, error)) *MockClient_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// Headers provides a mock function with given fields: ctx
func (_m *MockClient) Headers(ctx context.Context) (http.Header, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 http.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (http.Header, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) http.Header); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type MockClient_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Headers(ctx interface{}) *MockClient_Headers_Call {
	return &MockClient_Headers_Call{Call: _e.mock.On("Headers", ctx)}
}

func (_c *MockClient_Headers_Call) Run(run func(ctx context.Context)) *MockClient_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Headers_Call) Return(_a0 http.Header, _a1 error) *MockClient_Headers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Headers_Call) RunAndReturn(run func(context.Context) (http.Header, error)) *MockClient_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// PortfolioRefresh provides a mock function with given fields: ctx
func (_m *MockClient) PortfolioRefresh(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PortfolioRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_PortfolioRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PortfolioRefresh'
type MockClient_PortfolioRefresh_Call struct {
	*mock.Call
}

// PortfolioRefresh is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) PortfolioRefresh(ctx interface{}) *MockClient_PortfolioRefresh_Call {
	return &MockClient_PortfolioRefresh_Call{Call: _e.mock.On("PortfolioRefresh", ctx)}
}

func (_c *MockClient_PortfolioRefresh_Call) Run(run func(ctx context.Context)) *MockClient_PortfolioRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_PortfolioRefresh_Call) Return(_a0 error) *MockClient_PortfolioRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_PortfolioRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_PortfolioRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdminUsers provides a mock function with given fields: ctx, users
func (_m *MockClient) RemoveAdminUsers(ctx context.Context, users *client.AdminUsers) error {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdminUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AdminUsers) error); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_RemoveAdminUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdminUsers'
type MockClient_RemoveAdminUsers_Call struct {
	*mock.Call
}

// RemoveAdminUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - users *client.AdminUsers
func (_e *MockClient_Expecter) RemoveAdminUsers(ctx interface{}, users interface{}) *MockClient_RemoveAdminUsers_Call {
	return &MockClient_RemoveAdminUsers_Call{Call: _e.mock.On("RemoveAdminUsers", ctx, users)}
}

func (_c *MockClient_RemoveAdminUsers_Call) Run(run func(ctx context.Context, users *client.AdminUsers)) *MockClient_RemoveAdminUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AdminUsers))
	})
	return _c
}

func (_c *MockClient_RemoveAdminUsers_Call) Return(_a0 error) *MockClient_RemoveAdminUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_RemoveAdminUsers_Call) RunAndReturn(run func(context.Context, *client.AdminUsers) error) *MockClient_RemoveAdminUsers_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerAnalysis provides a mock function with given fields: ctx, projectUuid
func (_m *MockClient) TriggerAnalysis(ctx context.Context, projectUuid string) error {
	ret := _m.Called(ctx, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for TriggerAnalysis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_TriggerAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerAnalysis'
type MockClient_TriggerAnalysis_Call struct {
	*mock.Call
}

// TriggerAnalysis is a helper method to define mock.On call
//   - ctx context.Context
//   - projectUuid string
func (_e *MockClient_Expecter) TriggerAnalysis(ctx interface{}, projectUuid interface{}) *MockClient_TriggerAnalysis_Call {
	return &MockClient_TriggerAnalysis_Call{Call: _e.mock.On("TriggerAnalysis", ctx, projectUuid)}
}

func (_c *MockClient_TriggerAnalysis_Call) Run(run func(ctx context.Context, projectUuid string)) *MockClient_TriggerAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_TriggerAnalysis_Call) Return(_a0 error) *MockClient_TriggerAnalysis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_TriggerAnalysis_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_TriggerAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, uuid, name, version, group, tags
func (_m *MockClient) UpdateProject(ctx context.Context, uuid string, name string, version string, group string, tags []string) (*client.Project, error) {
	ret := _m.Called(ctx, uuid, name, version, group, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string) (*client.Project, error)); ok {
		return rf(ctx, uuid, name, version, group, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string) *client.Project); ok {
		r0 = rf(ctx, uuid, name, version, group, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []string) error); ok {
		r1 = rf(ctx, uuid, name, version, group, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockClient_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - name string
//   - version string
//   - group string
//   - tags []string
func (_e *MockClient_Expecter) UpdateProject(ctx interface{}, uuid interface{}, name interface{}, version interface{}, group interface{}, tags interface{}) *MockClient_UpdateProject_Call {
	return &MockClient_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, uuid, name, version, group, tags)}
}

func (_c *MockClient_UpdateProject_Call) Run(run func(ctx context.Context, uuid string, name string, version string, group string, tags []string)) *MockClient_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]string))
	})
	return _c
}

func (_c *MockClient_UpdateProject_Call) Return(_a0 *client.Project, _a1 error) *MockClient_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_UpdateProject_Call) RunAndReturn(run func(context.Context, string, string, string, string, []string) (*client.Project, error)) *MockClient_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInfo provides a mock function with given fields: ctx, uuid, version, group, tags
func (_m *MockClient) UpdateProjectInfo(ctx context.Context, uuid string, version string, group string, tags []string) error {
	ret := _m.Called(ctx, uuid, version, group, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) error); ok {
		r0 = rf(ctx, uuid, version, group, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_UpdateProjectInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInfo'
type MockClient_UpdateProjectInfo_Call struct {
	*mock.Call
}

// UpdateProjectInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - version string
//   - group string
//   - tags []string
func (_e *MockClient_Expecter) UpdateProjectInfo(ctx interface{}, uuid interface{}, version interface{}, group interface{}, tags interface{}) *MockClient_UpdateProjectInfo_Call {
	return &MockClient_UpdateProjectInfo_Call{Call: _e.mock.On("UpdateProjectInfo", ctx, uuid, version, group, tags)}
}

func (_c *MockClient_UpdateProjectInfo_Call) Run(run func(ctx context.Context, uuid string, version string, group string, tags []string)) *MockClient_UpdateProjectInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockClient_UpdateProjectInfo_Call) Return(_a0 error) *MockClient_UpdateProjectInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_UpdateProjectInfo_Call) RunAndReturn(run func(context.Context, string, string, string, []string) error) *MockClient_UpdateProjectInfo_Call {
	_c.Call.Return(run)
	return _c
}

// UploadProject provides a mock function with given fields: ctx, name, version, parentUuid, autoCreate, bom
func (_m *MockClient) UploadProject(ctx context.Context, name string, version string, parentUuid string, autoCreate bool, bom []byte) error {
	ret := _m.Called(ctx, name, version, parentUuid, autoCreate, bom)

	if len(ret) == 0 {
		panic("no return value specified for UploadProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, []byte) error); ok {
		r0 = rf(ctx, name, version, parentUuid, autoCreate, bom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_UploadProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadProject'
type MockClient_UploadProject_Call struct {
	*mock.Call
}

// UploadProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - parentUuid string
//   - autoCreate bool
//   - bom []byte
func (_e *MockClient_Expecter) UploadProject(ctx interface{}, name interface{}, version interface{}, parentUuid interface{}, autoCreate interface{}, bom interface{}) *MockClient_UploadProject_Call {
	return &MockClient_UploadProject_Call{Call: _e.mock.On("UploadProject", ctx, name, version, parentUuid, autoCreate, bom)}
}

func (_c *MockClient_UploadProject_Call) Run(run func(ctx context.Context, name string, version string, parentUuid string, autoCreate bool, bom []byte)) *MockClient_UploadProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].([]byte))
	})
	return _c
}

func (_c *MockClient_UploadProject_Call) Return(_a0 error) *MockClient_UploadProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_UploadProject_Call) RunAndReturn(run func(context.Context, string, string, string, bool, []byte) error) *MockClient_UploadProject_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields: ctx
func (_m *MockClient) Version(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockClient_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Version(ctx interface{}) *MockClient_Version_Call {
	return &MockClient_Version_Call{Call: _e.mock.On("Version", ctx)}
}

func (_c *MockClient_Version_Call) Run(run func(ctx context.Context)) *MockClient_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Version_Call) Return(_a0 string, _a1 error) *MockClient_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Version_Call) RunAndReturn(run func(context.Context) (string, error)) *MockClient_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
