// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grafana_reconciler

import (
	"github.com/grafana/grafana-openapi-client-go/client/access_control"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccessControlClientService creates a new instance of MockAccessControlClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessControlClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockAccessControlClientService {
	mock := &MockAccessControlClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccessControlClientService is an autogenerated mock type for the AccessControlClientService type
type MockAccessControlClientService struct {
	mock.Mock
}

type MockAccessControlClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessControlClientService) EXPECT() *MockAccessControlClientService_Expecter {
	return &MockAccessControlClientService_Expecter{mock: &_m.Mock}
}

// GetResourcePermissionsWithParams provides a mock function for the type MockAccessControlClientService
func (_mock *MockAccessControlClientService) GetResourcePermissionsWithParams(params *access_control.GetResourcePermissionsParams, opts ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePermissionsWithParams")
	}

	var r0 *access_control.GetResourcePermissionsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) *access_control.GetResourcePermissionsOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.GetResourcePermissionsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*access_control.GetResourcePermissionsParams, ...access_control.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccessControlClientService_GetResourcePermissionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcePermissionsWithParams'
type MockAccessControlClientService_GetResourcePermissionsWithParams_Call struct {
	*mock.Call
}

// GetResourcePermissionsWithParams is a helper method to define mock.On call
//   - params *access_control.GetResourcePermissionsParams
//   - opts ...access_control.ClientOption
func (_e *MockAccessControlClientService_Expecter) GetResourcePermissionsWithParams(params interface{}, opts ...interface{}) *MockAccessControlClientService_GetResourcePermissionsWithParams_Call {
	return &MockAccessControlClientService_GetResourcePermissionsWithParams_Call{Call: _e.mock.On("GetResourcePermissionsWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockAccessControlClientService_GetResourcePermissionsWithParams_Call) Run(run func(params *access_control.GetResourcePermissionsParams, opts ...access_control.ClientOption)) *MockAccessControlClientService_GetResourcePermissionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *access_control.GetResourcePermissionsParams
		if args[0] != nil {
			arg0 = args[0].(*access_control.GetResourcePermissionsParams)
		}
		var arg1 []access_control.ClientOption
		var variadicArgs []access_control.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]access_control.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockAccessControlClientService_GetResourcePermissionsWithParams_Call) Return(getResourcePermissionsOK *access_control.GetResourcePermissionsOK, err error) *MockAccessControlClientService_GetResourcePermissionsWithParams_Call {
	_c.Call.Return(getResourcePermissionsOK, err)
	return _c
}

func (_c *MockAccessControlClientService_GetResourcePermissionsWithParams_Call) RunAndReturn(run func(params *access_control.GetResourcePermissionsParams, opts ...access_control.ClientOption) (*access_control.GetResourcePermissionsOK, error)) *MockAccessControlClientService_GetResourcePermissionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetResourcePermissions provides a mock function for the type MockAccessControlClientService
func (_mock *MockAccessControlClientService) SetResourcePermissions(params *access_control.SetResourcePermissionsParams, opts ...access_control.ClientOption) (*access_control.SetResourcePermissionsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetResourcePermissions")
	}

	var r0 *access_control.SetResourcePermissionsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) (*access_control.SetResourcePermissionsOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) *access_control.SetResourcePermissionsOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access_control.SetResourcePermissionsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*access_control.SetResourcePermissionsParams, ...access_control.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccessControlClientService_SetResourcePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourcePermissions'
type MockAccessControlClientService_SetResourcePermissions_Call struct {
	*mock.Call
}

// SetResourcePermissions is a helper method to define mock.On call
//   - params *access_control.SetResourcePermissionsParams
//   - opts ...access_control.ClientOption
func (_e *MockAccessControlClientService_Expecter) SetResourcePermissions(params interface{}, opts ...interface{}) *MockAccessControlClientService_SetResourcePermissions_Call {
	return &MockAccessControlClientService_SetResourcePermissions_Call{Call: _e.mock.On("SetResourcePermissions",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockAccessControlClientService_SetResourcePermissions_Call) Run(run func(params *access_control.SetResourcePermissionsParams, opts ...access_control.ClientOption)) *MockAccessControlClientService_SetResourcePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *access_control.SetResourcePermissionsParams
		if args[0] != nil {
			arg0 = args[0].(*access_control.SetResourcePermissionsParams)
		}
		var arg1 []access_control.ClientOption
		var variadicArgs []access_control.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]access_control.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockAccessControlClientService_SetResourcePermissions_Call) Return(setResourcePermissionsOK *access_control.SetResourcePermissionsOK, err error) *MockAccessControlClientService_SetResourcePermissions_Call {
	_c.Call.Return(setResourcePermissionsOK, err)
	return _c
}

func (_c *MockAccessControlClientService_SetResourcePermissions_Call) RunAndReturn(run func(params *access_control.SetResourcePermissionsParams, opts ...access_control.ClientOption) (*access_control.SetResourcePermissionsOK, error)) *MockAccessControlClientService_SetResourcePermissions_Call {
	_c.Call.Return(run)
	return _c
}
