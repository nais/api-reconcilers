// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grafana_reconciler

import (
	"github.com/grafana/grafana-openapi-client-go/client/admin_users"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAdminUsersClientService creates a new instance of MockAdminUsersClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminUsersClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockAdminUsersClientService {
	mock := &MockAdminUsersClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAdminUsersClientService is an autogenerated mock type for the AdminUsersClientService type
type MockAdminUsersClientService struct {
	mock.Mock
}

type MockAdminUsersClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminUsersClientService) EXPECT() *MockAdminUsersClientService_Expecter {
	return &MockAdminUsersClientService_Expecter{mock: &_m.Mock}
}

// AdminCreateUserWithParams provides a mock function for the type MockAdminUsersClientService
func (_mock *MockAdminUsersClientService) AdminCreateUserWithParams(params *admin_users.AdminCreateUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AdminCreateUserWithParams")
	}

	var r0 *admin_users.AdminCreateUserOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) *admin_users.AdminCreateUserOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_users.AdminCreateUserOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*admin_users.AdminCreateUserParams, ...admin_users.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAdminUsersClientService_AdminCreateUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminCreateUserWithParams'
type MockAdminUsersClientService_AdminCreateUserWithParams_Call struct {
	*mock.Call
}

// AdminCreateUserWithParams is a helper method to define mock.On call
//   - params *admin_users.AdminCreateUserParams
//   - opts ...admin_users.ClientOption
func (_e *MockAdminUsersClientService_Expecter) AdminCreateUserWithParams(params interface{}, opts ...interface{}) *MockAdminUsersClientService_AdminCreateUserWithParams_Call {
	return &MockAdminUsersClientService_AdminCreateUserWithParams_Call{Call: _e.mock.On("AdminCreateUserWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockAdminUsersClientService_AdminCreateUserWithParams_Call) Run(run func(params *admin_users.AdminCreateUserParams, opts ...admin_users.ClientOption)) *MockAdminUsersClientService_AdminCreateUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *admin_users.AdminCreateUserParams
		if args[0] != nil {
			arg0 = args[0].(*admin_users.AdminCreateUserParams)
		}
		var arg1 []admin_users.ClientOption
		var variadicArgs []admin_users.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]admin_users.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockAdminUsersClientService_AdminCreateUserWithParams_Call) Return(adminCreateUserOK *admin_users.AdminCreateUserOK, err error) *MockAdminUsersClientService_AdminCreateUserWithParams_Call {
	_c.Call.Return(adminCreateUserOK, err)
	return _c
}

func (_c *MockAdminUsersClientService_AdminCreateUserWithParams_Call) RunAndReturn(run func(params *admin_users.AdminCreateUserParams, opts ...admin_users.ClientOption) (*admin_users.AdminCreateUserOK, error)) *MockAdminUsersClientService_AdminCreateUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}
