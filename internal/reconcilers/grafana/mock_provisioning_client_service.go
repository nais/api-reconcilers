// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grafana_reconciler

import (
	"github.com/grafana/grafana-openapi-client-go/client/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProvisioningClientService creates a new instance of MockProvisioningClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvisioningClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockProvisioningClientService {
	mock := &MockProvisioningClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvisioningClientService is an autogenerated mock type for the ProvisioningClientService type
type MockProvisioningClientService struct {
	mock.Mock
}

type MockProvisioningClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvisioningClientService) EXPECT() *MockProvisioningClientService_Expecter {
	return &MockProvisioningClientService_Expecter{mock: &_m.Mock}
}

// GetContactpoints provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) GetContactpoints(params *provisioning.GetContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.GetContactpointsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContactpoints")
	}

	var r0 *provisioning.GetContactpointsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) (*provisioning.GetContactpointsOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) *provisioning.GetContactpointsOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetContactpointsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*provisioning.GetContactpointsParams, ...provisioning.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_GetContactpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactpoints'
type MockProvisioningClientService_GetContactpoints_Call struct {
	*mock.Call
}

// GetContactpoints is a helper method to define mock.On call
//   - params *provisioning.GetContactpointsParams
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) GetContactpoints(params interface{}, opts ...interface{}) *MockProvisioningClientService_GetContactpoints_Call {
	return &MockProvisioningClientService_GetContactpoints_Call{Call: _e.mock.On("GetContactpoints",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockProvisioningClientService_GetContactpoints_Call) Run(run func(params *provisioning.GetContactpointsParams, opts ...provisioning.ClientOption)) *MockProvisioningClientService_GetContactpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *provisioning.GetContactpointsParams
		if args[0] != nil {
			arg0 = args[0].(*provisioning.GetContactpointsParams)
		}
		var arg1 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]provisioning.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_GetContactpoints_Call) Return(getContactpointsOK *provisioning.GetContactpointsOK, err error) *MockProvisioningClientService_GetContactpoints_Call {
	_c.Call.Return(getContactpointsOK, err)
	return _c
}

func (_c *MockProvisioningClientService_GetContactpoints_Call) RunAndReturn(run func(params *provisioning.GetContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.GetContactpointsOK, error)) *MockProvisioningClientService_GetContactpoints_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyTree provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) GetPolicyTree(opts ...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(opts)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyTree")
	}

	var r0 *provisioning.GetPolicyTreeOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error)); ok {
		return returnFunc(opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(...provisioning.ClientOption) *provisioning.GetPolicyTreeOK); ok {
		r0 = returnFunc(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetPolicyTreeOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(...provisioning.ClientOption) error); ok {
		r1 = returnFunc(opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_GetPolicyTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyTree'
type MockProvisioningClientService_GetPolicyTree_Call struct {
	*mock.Call
}

// GetPolicyTree is a helper method to define mock.On call
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) GetPolicyTree(opts ...interface{}) *MockProvisioningClientService_GetPolicyTree_Call {
	return &MockProvisioningClientService_GetPolicyTree_Call{Call: _e.mock.On("GetPolicyTree",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockProvisioningClientService_GetPolicyTree_Call) Run(run func(opts ...provisioning.ClientOption)) *MockProvisioningClientService_GetPolicyTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 0 {
			variadicArgs = args[0].([]provisioning.ClientOption)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_GetPolicyTree_Call) Return(getPolicyTreeOK *provisioning.GetPolicyTreeOK, err error) *MockProvisioningClientService_GetPolicyTree_Call {
	_c.Call.Return(getPolicyTreeOK, err)
	return _c
}

func (_c *MockProvisioningClientService_GetPolicyTree_Call) RunAndReturn(run func(opts ...provisioning.ClientOption) (*provisioning.GetPolicyTreeOK, error)) *MockProvisioningClientService_GetPolicyTree_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplate provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) GetTemplate(name string, opts ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(name, opts)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *provisioning.GetTemplateOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error)); ok {
		return returnFunc(name, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...provisioning.ClientOption) *provisioning.GetTemplateOK); ok {
		r0 = returnFunc(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.GetTemplateOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...provisioning.ClientOption) error); ok {
		r1 = returnFunc(name, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type MockProvisioningClientService_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - name string
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) GetTemplate(name interface{}, opts ...interface{}) *MockProvisioningClientService_GetTemplate_Call {
	return &MockProvisioningClientService_GetTemplate_Call{Call: _e.mock.On("GetTemplate",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockProvisioningClientService_GetTemplate_Call) Run(run func(name string, opts ...provisioning.ClientOption)) *MockProvisioningClientService_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]provisioning.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_GetTemplate_Call) Return(getTemplateOK *provisioning.GetTemplateOK, err error) *MockProvisioningClientService_GetTemplate_Call {
	_c.Call.Return(getTemplateOK, err)
	return _c
}

func (_c *MockProvisioningClientService_GetTemplate_Call) RunAndReturn(run func(name string, opts ...provisioning.ClientOption) (*provisioning.GetTemplateOK, error)) *MockProvisioningClientService_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// PostContactpoints provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) PostContactpoints(params *provisioning.PostContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.PostContactpointsAccepted, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostContactpoints")
	}

	var r0 *provisioning.PostContactpointsAccepted
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) (*provisioning.PostContactpointsAccepted, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) *provisioning.PostContactpointsAccepted); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PostContactpointsAccepted)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*provisioning.PostContactpointsParams, ...provisioning.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_PostContactpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostContactpoints'
type MockProvisioningClientService_PostContactpoints_Call struct {
	*mock.Call
}

// PostContactpoints is a helper method to define mock.On call
//   - params *provisioning.PostContactpointsParams
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) PostContactpoints(params interface{}, opts ...interface{}) *MockProvisioningClientService_PostContactpoints_Call {
	return &MockProvisioningClientService_PostContactpoints_Call{Call: _e.mock.On("PostContactpoints",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockProvisioningClientService_PostContactpoints_Call) Run(run func(params *provisioning.PostContactpointsParams, opts ...provisioning.ClientOption)) *MockProvisioningClientService_PostContactpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *provisioning.PostContactpointsParams
		if args[0] != nil {
			arg0 = args[0].(*provisioning.PostContactpointsParams)
		}
		var arg1 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]provisioning.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_PostContactpoints_Call) Return(postContactpointsAccepted *provisioning.PostContactpointsAccepted, err error) *MockProvisioningClientService_PostContactpoints_Call {
	_c.Call.Return(postContactpointsAccepted, err)
	return _c
}

func (_c *MockProvisioningClientService_PostContactpoints_Call) RunAndReturn(run func(params *provisioning.PostContactpointsParams, opts ...provisioning.ClientOption) (*provisioning.PostContactpointsAccepted, error)) *MockProvisioningClientService_PostContactpoints_Call {
	_c.Call.Return(run)
	return _c
}

// PutContactpoint provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) PutContactpoint(params *provisioning.PutContactpointParams, opts ...provisioning.ClientOption) (*provisioning.PutContactpointAccepted, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutContactpoint")
	}

	var r0 *provisioning.PutContactpointAccepted
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) (*provisioning.PutContactpointAccepted, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) *provisioning.PutContactpointAccepted); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutContactpointAccepted)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*provisioning.PutContactpointParams, ...provisioning.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_PutContactpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutContactpoint'
type MockProvisioningClientService_PutContactpoint_Call struct {
	*mock.Call
}

// PutContactpoint is a helper method to define mock.On call
//   - params *provisioning.PutContactpointParams
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) PutContactpoint(params interface{}, opts ...interface{}) *MockProvisioningClientService_PutContactpoint_Call {
	return &MockProvisioningClientService_PutContactpoint_Call{Call: _e.mock.On("PutContactpoint",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockProvisioningClientService_PutContactpoint_Call) Run(run func(params *provisioning.PutContactpointParams, opts ...provisioning.ClientOption)) *MockProvisioningClientService_PutContactpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *provisioning.PutContactpointParams
		if args[0] != nil {
			arg0 = args[0].(*provisioning.PutContactpointParams)
		}
		var arg1 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]provisioning.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_PutContactpoint_Call) Return(putContactpointAccepted *provisioning.PutContactpointAccepted, err error) *MockProvisioningClientService_PutContactpoint_Call {
	_c.Call.Return(putContactpointAccepted, err)
	return _c
}

func (_c *MockProvisioningClientService_PutContactpoint_Call) RunAndReturn(run func(params *provisioning.PutContactpointParams, opts ...provisioning.ClientOption) (*provisioning.PutContactpointAccepted, error)) *MockProvisioningClientService_PutContactpoint_Call {
	_c.Call.Return(run)
	return _c
}

// PutPolicyTree provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) PutPolicyTree(params *provisioning.PutPolicyTreeParams, opts ...provisioning.ClientOption) (*provisioning.PutPolicyTreeAccepted, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutPolicyTree")
	}

	var r0 *provisioning.PutPolicyTreeAccepted
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) (*provisioning.PutPolicyTreeAccepted, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) *provisioning.PutPolicyTreeAccepted); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutPolicyTreeAccepted)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*provisioning.PutPolicyTreeParams, ...provisioning.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_PutPolicyTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPolicyTree'
type MockProvisioningClientService_PutPolicyTree_Call struct {
	*mock.Call
}

// PutPolicyTree is a helper method to define mock.On call
//   - params *provisioning.PutPolicyTreeParams
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) PutPolicyTree(params interface{}, opts ...interface{}) *MockProvisioningClientService_PutPolicyTree_Call {
	return &MockProvisioningClientService_PutPolicyTree_Call{Call: _e.mock.On("PutPolicyTree",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockProvisioningClientService_PutPolicyTree_Call) Run(run func(params *provisioning.PutPolicyTreeParams, opts ...provisioning.ClientOption)) *MockProvisioningClientService_PutPolicyTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *provisioning.PutPolicyTreeParams
		if args[0] != nil {
			arg0 = args[0].(*provisioning.PutPolicyTreeParams)
		}
		var arg1 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]provisioning.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_PutPolicyTree_Call) Return(putPolicyTreeAccepted *provisioning.PutPolicyTreeAccepted, err error) *MockProvisioningClientService_PutPolicyTree_Call {
	_c.Call.Return(putPolicyTreeAccepted, err)
	return _c
}

func (_c *MockProvisioningClientService_PutPolicyTree_Call) RunAndReturn(run func(params *provisioning.PutPolicyTreeParams, opts ...provisioning.ClientOption) (*provisioning.PutPolicyTreeAccepted, error)) *MockProvisioningClientService_PutPolicyTree_Call {
	_c.Call.Return(run)
	return _c
}

// PutTemplate provides a mock function for the type MockProvisioningClientService
func (_mock *MockProvisioningClientService) PutTemplate(params *provisioning.PutTemplateParams, opts ...provisioning.ClientOption) (*provisioning.PutTemplateAccepted, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutTemplate")
	}

	var r0 *provisioning.PutTemplateAccepted
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) (*provisioning.PutTemplateAccepted, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) *provisioning.PutTemplateAccepted); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PutTemplateAccepted)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*provisioning.PutTemplateParams, ...provisioning.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvisioningClientService_PutTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTemplate'
type MockProvisioningClientService_PutTemplate_Call struct {
	*mock.Call
}

// PutTemplate is a helper method to define mock.On call
//   - params *provisioning.PutTemplateParams
//   - opts ...provisioning.ClientOption
func (_e *MockProvisioningClientService_Expecter) PutTemplate(params interface{}, opts ...interface{}) *MockProvisioningClientService_PutTemplate_Call {
	return &MockProvisioningClientService_PutTemplate_Call{Call: _e.mock.On("PutTemplate",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockProvisioningClientService_PutTemplate_Call) Run(run func(params *provisioning.PutTemplateParams, opts ...provisioning.ClientOption)) *MockProvisioningClientService_PutTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *provisioning.PutTemplateParams
		if args[0] != nil {
			arg0 = args[0].(*provisioning.PutTemplateParams)
		}
		var arg1 []provisioning.ClientOption
		var variadicArgs []provisioning.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]provisioning.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvisioningClientService_PutTemplate_Call) Return(putTemplateAccepted *provisioning.PutTemplateAccepted, err error) *MockProvisioningClientService_PutTemplate_Call {
	_c.Call.Return(putTemplateAccepted, err)
	return _c
}

func (_c *MockProvisioningClientService_PutTemplate_Call) RunAndReturn(run func(params *provisioning.PutTemplateParams, opts ...provisioning.ClientOption) (*provisioning.PutTemplateAccepted, error)) *MockProvisioningClientService_PutTemplate_Call {
	_c.Call.Return(run)
	return _c
}
