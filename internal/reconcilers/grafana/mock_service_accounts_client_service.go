// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grafana_reconciler

import (
	"github.com/grafana/grafana-openapi-client-go/client/service_accounts"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceAccountsClientService creates a new instance of MockServiceAccountsClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceAccountsClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockServiceAccountsClientService {
	mock := &MockServiceAccountsClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceAccountsClientService is an autogenerated mock type for the ServiceAccountsClientService type
type MockServiceAccountsClientService struct {
	mock.Mock
}

type MockServiceAccountsClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceAccountsClientService) EXPECT() *MockServiceAccountsClientService_Expecter {
	return &MockServiceAccountsClientService_Expecter{mock: &_m.Mock}
}

// CreateServiceAccount provides a mock function for the type MockServiceAccountsClientService
func (_mock *MockServiceAccountsClientService) CreateServiceAccount(params *service_accounts.CreateServiceAccountParams, opts ...service_accounts.ClientOption) (*service_accounts.CreateServiceAccountCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *service_accounts.CreateServiceAccountCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) (*service_accounts.CreateServiceAccountCreated, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) *service_accounts.CreateServiceAccountCreated); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.CreateServiceAccountCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*service_accounts.CreateServiceAccountParams, ...service_accounts.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceAccountsClientService_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type MockServiceAccountsClientService_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - params *service_accounts.CreateServiceAccountParams
//   - opts ...service_accounts.ClientOption
func (_e *MockServiceAccountsClientService_Expecter) CreateServiceAccount(params interface{}, opts ...interface{}) *MockServiceAccountsClientService_CreateServiceAccount_Call {
	return &MockServiceAccountsClientService_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockServiceAccountsClientService_CreateServiceAccount_Call) Run(run func(params *service_accounts.CreateServiceAccountParams, opts ...service_accounts.ClientOption)) *MockServiceAccountsClientService_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *service_accounts.CreateServiceAccountParams
		if args[0] != nil {
			arg0 = args[0].(*service_accounts.CreateServiceAccountParams)
		}
		var arg1 []service_accounts.ClientOption
		var variadicArgs []service_accounts.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]service_accounts.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockServiceAccountsClientService_CreateServiceAccount_Call) Return(createServiceAccountCreated *service_accounts.CreateServiceAccountCreated, err error) *MockServiceAccountsClientService_CreateServiceAccount_Call {
	_c.Call.Return(createServiceAccountCreated, err)
	return _c
}

func (_c *MockServiceAccountsClientService_CreateServiceAccount_Call) RunAndReturn(run func(params *service_accounts.CreateServiceAccountParams, opts ...service_accounts.ClientOption) (*service_accounts.CreateServiceAccountCreated, error)) *MockServiceAccountsClientService_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SearchOrgServiceAccountsWithPaging provides a mock function for the type MockServiceAccountsClientService
func (_mock *MockServiceAccountsClientService) SearchOrgServiceAccountsWithPaging(params *service_accounts.SearchOrgServiceAccountsWithPagingParams, opts ...service_accounts.ClientOption) (*service_accounts.SearchOrgServiceAccountsWithPagingOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SearchOrgServiceAccountsWithPaging")
	}

	var r0 *service_accounts.SearchOrgServiceAccountsWithPagingOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) (*service_accounts.SearchOrgServiceAccountsWithPagingOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) *service_accounts.SearchOrgServiceAccountsWithPagingOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_accounts.SearchOrgServiceAccountsWithPagingOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*service_accounts.SearchOrgServiceAccountsWithPagingParams, ...service_accounts.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchOrgServiceAccountsWithPaging'
type MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call struct {
	*mock.Call
}

// SearchOrgServiceAccountsWithPaging is a helper method to define mock.On call
//   - params *service_accounts.SearchOrgServiceAccountsWithPagingParams
//   - opts ...service_accounts.ClientOption
func (_e *MockServiceAccountsClientService_Expecter) SearchOrgServiceAccountsWithPaging(params interface{}, opts ...interface{}) *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call {
	return &MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call{Call: _e.mock.On("SearchOrgServiceAccountsWithPaging",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call) Run(run func(params *service_accounts.SearchOrgServiceAccountsWithPagingParams, opts ...service_accounts.ClientOption)) *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *service_accounts.SearchOrgServiceAccountsWithPagingParams
		if args[0] != nil {
			arg0 = args[0].(*service_accounts.SearchOrgServiceAccountsWithPagingParams)
		}
		var arg1 []service_accounts.ClientOption
		var variadicArgs []service_accounts.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]service_accounts.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call) Return(searchOrgServiceAccountsWithPagingOK *service_accounts.SearchOrgServiceAccountsWithPagingOK, err error) *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call {
	_c.Call.Return(searchOrgServiceAccountsWithPagingOK, err)
	return _c
}

func (_c *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call) RunAndReturn(run func(params *service_accounts.SearchOrgServiceAccountsWithPagingParams, opts ...service_accounts.ClientOption) (*service_accounts.SearchOrgServiceAccountsWithPagingOK, error)) *MockServiceAccountsClientService_SearchOrgServiceAccountsWithPaging_Call {
	_c.Call.Return(run)
	return _c
}
