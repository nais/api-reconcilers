// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grafana_reconciler

import (
	"github.com/grafana/grafana-openapi-client-go/client/teams"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTeamsClientService creates a new instance of MockTeamsClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamsClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockTeamsClientService {
	mock := &MockTeamsClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTeamsClientService is an autogenerated mock type for the TeamsClientService type
type MockTeamsClientService struct {
	mock.Mock
}

type MockTeamsClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamsClientService) EXPECT() *MockTeamsClientService_Expecter {
	return &MockTeamsClientService_Expecter{mock: &_m.Mock}
}

// AddTeamMemberWithParams provides a mock function for the type MockTeamsClientService
func (_mock *MockTeamsClientService) AddTeamMemberWithParams(params *teams.AddTeamMemberParams, opts ...teams.ClientOption) (*teams.AddTeamMemberOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddTeamMemberWithParams")
	}

	var r0 *teams.AddTeamMemberOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*teams.AddTeamMemberParams, ...teams.ClientOption) (*teams.AddTeamMemberOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*teams.AddTeamMemberParams, ...teams.ClientOption) *teams.AddTeamMemberOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.AddTeamMemberOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*teams.AddTeamMemberParams, ...teams.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsClientService_AddTeamMemberWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamMemberWithParams'
type MockTeamsClientService_AddTeamMemberWithParams_Call struct {
	*mock.Call
}

// AddTeamMemberWithParams is a helper method to define mock.On call
//   - params *teams.AddTeamMemberParams
//   - opts ...teams.ClientOption
func (_e *MockTeamsClientService_Expecter) AddTeamMemberWithParams(params interface{}, opts ...interface{}) *MockTeamsClientService_AddTeamMemberWithParams_Call {
	return &MockTeamsClientService_AddTeamMemberWithParams_Call{Call: _e.mock.On("AddTeamMemberWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockTeamsClientService_AddTeamMemberWithParams_Call) Run(run func(params *teams.AddTeamMemberParams, opts ...teams.ClientOption)) *MockTeamsClientService_AddTeamMemberWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *teams.AddTeamMemberParams
		if args[0] != nil {
			arg0 = args[0].(*teams.AddTeamMemberParams)
		}
		var arg1 []teams.ClientOption
		var variadicArgs []teams.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]teams.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTeamsClientService_AddTeamMemberWithParams_Call) Return(addTeamMemberOK *teams.AddTeamMemberOK, err error) *MockTeamsClientService_AddTeamMemberWithParams_Call {
	_c.Call.Return(addTeamMemberOK, err)
	return _c
}

func (_c *MockTeamsClientService_AddTeamMemberWithParams_Call) RunAndReturn(run func(params *teams.AddTeamMemberParams, opts ...teams.ClientOption) (*teams.AddTeamMemberOK, error)) *MockTeamsClientService_AddTeamMemberWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamWithParams provides a mock function for the type MockTeamsClientService
func (_mock *MockTeamsClientService) CreateTeamWithParams(params *teams.CreateTeamParams, opts ...teams.ClientOption) (*teams.CreateTeamOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamWithParams")
	}

	var r0 *teams.CreateTeamOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*teams.CreateTeamParams, ...teams.ClientOption) (*teams.CreateTeamOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*teams.CreateTeamParams, ...teams.ClientOption) *teams.CreateTeamOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.CreateTeamOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*teams.CreateTeamParams, ...teams.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsClientService_CreateTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamWithParams'
type MockTeamsClientService_CreateTeamWithParams_Call struct {
	*mock.Call
}

// CreateTeamWithParams is a helper method to define mock.On call
//   - params *teams.CreateTeamParams
//   - opts ...teams.ClientOption
func (_e *MockTeamsClientService_Expecter) CreateTeamWithParams(params interface{}, opts ...interface{}) *MockTeamsClientService_CreateTeamWithParams_Call {
	return &MockTeamsClientService_CreateTeamWithParams_Call{Call: _e.mock.On("CreateTeamWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockTeamsClientService_CreateTeamWithParams_Call) Run(run func(params *teams.CreateTeamParams, opts ...teams.ClientOption)) *MockTeamsClientService_CreateTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *teams.CreateTeamParams
		if args[0] != nil {
			arg0 = args[0].(*teams.CreateTeamParams)
		}
		var arg1 []teams.ClientOption
		var variadicArgs []teams.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]teams.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTeamsClientService_CreateTeamWithParams_Call) Return(createTeamOK *teams.CreateTeamOK, err error) *MockTeamsClientService_CreateTeamWithParams_Call {
	_c.Call.Return(createTeamOK, err)
	return _c
}

func (_c *MockTeamsClientService_CreateTeamWithParams_Call) RunAndReturn(run func(params *teams.CreateTeamParams, opts ...teams.ClientOption) (*teams.CreateTeamOK, error)) *MockTeamsClientService_CreateTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamByID provides a mock function for the type MockTeamsClientService
func (_mock *MockTeamsClientService) DeleteTeamByID(teamID string, opts ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(teamID, opts)
	} else {
		tmpRet = _mock.Called(teamID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamByID")
	}

	var r0 *teams.DeleteTeamByIDOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error)); ok {
		return returnFunc(teamID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...teams.ClientOption) *teams.DeleteTeamByIDOK); ok {
		r0 = returnFunc(teamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.DeleteTeamByIDOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...teams.ClientOption) error); ok {
		r1 = returnFunc(teamID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsClientService_DeleteTeamByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamByID'
type MockTeamsClientService_DeleteTeamByID_Call struct {
	*mock.Call
}

// DeleteTeamByID is a helper method to define mock.On call
//   - teamID string
//   - opts ...teams.ClientOption
func (_e *MockTeamsClientService_Expecter) DeleteTeamByID(teamID interface{}, opts ...interface{}) *MockTeamsClientService_DeleteTeamByID_Call {
	return &MockTeamsClientService_DeleteTeamByID_Call{Call: _e.mock.On("DeleteTeamByID",
		append([]interface{}{teamID}, opts...)...)}
}

func (_c *MockTeamsClientService_DeleteTeamByID_Call) Run(run func(teamID string, opts ...teams.ClientOption)) *MockTeamsClientService_DeleteTeamByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []teams.ClientOption
		var variadicArgs []teams.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]teams.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTeamsClientService_DeleteTeamByID_Call) Return(deleteTeamByIDOK *teams.DeleteTeamByIDOK, err error) *MockTeamsClientService_DeleteTeamByID_Call {
	_c.Call.Return(deleteTeamByIDOK, err)
	return _c
}

func (_c *MockTeamsClientService_DeleteTeamByID_Call) RunAndReturn(run func(teamID string, opts ...teams.ClientOption) (*teams.DeleteTeamByIDOK, error)) *MockTeamsClientService_DeleteTeamByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembersWithParams provides a mock function for the type MockTeamsClientService
func (_mock *MockTeamsClientService) GetTeamMembersWithParams(params *teams.GetTeamMembersParams, opts ...teams.ClientOption) (*teams.GetTeamMembersOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembersWithParams")
	}

	var r0 *teams.GetTeamMembersOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*teams.GetTeamMembersParams, ...teams.ClientOption) (*teams.GetTeamMembersOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*teams.GetTeamMembersParams, ...teams.ClientOption) *teams.GetTeamMembersOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.GetTeamMembersOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*teams.GetTeamMembersParams, ...teams.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsClientService_GetTeamMembersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembersWithParams'
type MockTeamsClientService_GetTeamMembersWithParams_Call struct {
	*mock.Call
}

// GetTeamMembersWithParams is a helper method to define mock.On call
//   - params *teams.GetTeamMembersParams
//   - opts ...teams.ClientOption
func (_e *MockTeamsClientService_Expecter) GetTeamMembersWithParams(params interface{}, opts ...interface{}) *MockTeamsClientService_GetTeamMembersWithParams_Call {
	return &MockTeamsClientService_GetTeamMembersWithParams_Call{Call: _e.mock.On("GetTeamMembersWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockTeamsClientService_GetTeamMembersWithParams_Call) Run(run func(params *teams.GetTeamMembersParams, opts ...teams.ClientOption)) *MockTeamsClientService_GetTeamMembersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *teams.GetTeamMembersParams
		if args[0] != nil {
			arg0 = args[0].(*teams.GetTeamMembersParams)
		}
		var arg1 []teams.ClientOption
		var variadicArgs []teams.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]teams.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTeamsClientService_GetTeamMembersWithParams_Call) Return(getTeamMembersOK *teams.GetTeamMembersOK, err error) *MockTeamsClientService_GetTeamMembersWithParams_Call {
	_c.Call.Return(getTeamMembersOK, err)
	return _c
}

func (_c *MockTeamsClientService_GetTeamMembersWithParams_Call) RunAndReturn(run func(params *teams.GetTeamMembersParams, opts ...teams.ClientOption) (*teams.GetTeamMembersOK, error)) *MockTeamsClientService_GetTeamMembersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamMemberWithParams provides a mock function for the type MockTeamsClientService
func (_mock *MockTeamsClientService) RemoveTeamMemberWithParams(params *teams.RemoveTeamMemberParams, opts ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamMemberWithParams")
	}

	var r0 *teams.RemoveTeamMemberOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) *teams.RemoveTeamMemberOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.RemoveTeamMemberOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*teams.RemoveTeamMemberParams, ...teams.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsClientService_RemoveTeamMemberWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamMemberWithParams'
type MockTeamsClientService_RemoveTeamMemberWithParams_Call struct {
	*mock.Call
}

// RemoveTeamMemberWithParams is a helper method to define mock.On call
//   - params *teams.RemoveTeamMemberParams
//   - opts ...teams.ClientOption
func (_e *MockTeamsClientService_Expecter) RemoveTeamMemberWithParams(params interface{}, opts ...interface{}) *MockTeamsClientService_RemoveTeamMemberWithParams_Call {
	return &MockTeamsClientService_RemoveTeamMemberWithParams_Call{Call: _e.mock.On("RemoveTeamMemberWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockTeamsClientService_RemoveTeamMemberWithParams_Call) Run(run func(params *teams.RemoveTeamMemberParams, opts ...teams.ClientOption)) *MockTeamsClientService_RemoveTeamMemberWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *teams.RemoveTeamMemberParams
		if args[0] != nil {
			arg0 = args[0].(*teams.RemoveTeamMemberParams)
		}
		var arg1 []teams.ClientOption
		var variadicArgs []teams.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]teams.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTeamsClientService_RemoveTeamMemberWithParams_Call) Return(removeTeamMemberOK *teams.RemoveTeamMemberOK, err error) *MockTeamsClientService_RemoveTeamMemberWithParams_Call {
	_c.Call.Return(removeTeamMemberOK, err)
	return _c
}

func (_c *MockTeamsClientService_RemoveTeamMemberWithParams_Call) RunAndReturn(run func(params *teams.RemoveTeamMemberParams, opts ...teams.ClientOption) (*teams.RemoveTeamMemberOK, error)) *MockTeamsClientService_RemoveTeamMemberWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTeams provides a mock function for the type MockTeamsClientService
func (_mock *MockTeamsClientService) SearchTeams(params *teams.SearchTeamsParams, opts ...teams.ClientOption) (*teams.SearchTeamsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SearchTeams")
	}

	var r0 *teams.SearchTeamsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*teams.SearchTeamsParams, ...teams.ClientOption) (*teams.SearchTeamsOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*teams.SearchTeamsParams, ...teams.ClientOption) *teams.SearchTeamsOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.SearchTeamsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*teams.SearchTeamsParams, ...teams.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsClientService_SearchTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTeams'
type MockTeamsClientService_SearchTeams_Call struct {
	*mock.Call
}

// SearchTeams is a helper method to define mock.On call
//   - params *teams.SearchTeamsParams
//   - opts ...teams.ClientOption
func (_e *MockTeamsClientService_Expecter) SearchTeams(params interface{}, opts ...interface{}) *MockTeamsClientService_SearchTeams_Call {
	return &MockTeamsClientService_SearchTeams_Call{Call: _e.mock.On("SearchTeams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockTeamsClientService_SearchTeams_Call) Run(run func(params *teams.SearchTeamsParams, opts ...teams.ClientOption)) *MockTeamsClientService_SearchTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *teams.SearchTeamsParams
		if args[0] != nil {
			arg0 = args[0].(*teams.SearchTeamsParams)
		}
		var arg1 []teams.ClientOption
		var variadicArgs []teams.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]teams.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTeamsClientService_SearchTeams_Call) Return(searchTeamsOK *teams.SearchTeamsOK, err error) *MockTeamsClientService_SearchTeams_Call {
	_c.Call.Return(searchTeamsOK, err)
	return _c
}

func (_c *MockTeamsClientService_SearchTeams_Call) RunAndReturn(run func(params *teams.SearchTeamsParams, opts ...teams.ClientOption) (*teams.SearchTeamsOK, error)) *MockTeamsClientService_SearchTeams_Call {
	_c.Call.Return(run)
	return _c
}
