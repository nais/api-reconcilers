// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grafana_reconciler

import (
	"github.com/grafana/grafana-openapi-client-go/client/users"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUsersClientService creates a new instance of MockUsersClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersClientService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockUsersClientService {
	mock := &MockUsersClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersClientService is an autogenerated mock type for the UsersClientService type
type MockUsersClientService struct {
	mock.Mock
}

type MockUsersClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersClientService) EXPECT() *MockUsersClientService_Expecter {
	return &MockUsersClientService_Expecter{mock: &_m.Mock}
}

// GetUserByLoginOrEmailWithParams provides a mock function for the type MockUsersClientService
func (_mock *MockUsersClientService) GetUserByLoginOrEmailWithParams(params *users.GetUserByLoginOrEmailParams, opts ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, opts)
	} else {
		tmpRet = _mock.Called(params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLoginOrEmailWithParams")
	}

	var r0 *users.GetUserByLoginOrEmailOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error)); ok {
		return returnFunc(params, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) *users.GetUserByLoginOrEmailOK); ok {
		r0 = returnFunc(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.GetUserByLoginOrEmailOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*users.GetUserByLoginOrEmailParams, ...users.ClientOption) error); ok {
		r1 = returnFunc(params, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersClientService_GetUserByLoginOrEmailWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLoginOrEmailWithParams'
type MockUsersClientService_GetUserByLoginOrEmailWithParams_Call struct {
	*mock.Call
}

// GetUserByLoginOrEmailWithParams is a helper method to define mock.On call
//   - params *users.GetUserByLoginOrEmailParams
//   - opts ...users.ClientOption
func (_e *MockUsersClientService_Expecter) GetUserByLoginOrEmailWithParams(params interface{}, opts ...interface{}) *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call {
	return &MockUsersClientService_GetUserByLoginOrEmailWithParams_Call{Call: _e.mock.On("GetUserByLoginOrEmailWithParams",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call) Run(run func(params *users.GetUserByLoginOrEmailParams, opts ...users.ClientOption)) *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *users.GetUserByLoginOrEmailParams
		if args[0] != nil {
			arg0 = args[0].(*users.GetUserByLoginOrEmailParams)
		}
		var arg1 []users.ClientOption
		var variadicArgs []users.ClientOption
		if len(args) > 1 {
			variadicArgs = args[1].([]users.ClientOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call) Return(getUserByLoginOrEmailOK *users.GetUserByLoginOrEmailOK, err error) *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call {
	_c.Call.Return(getUserByLoginOrEmailOK, err)
	return _c
}

func (_c *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call) RunAndReturn(run func(params *users.GetUserByLoginOrEmailParams, opts ...users.ClientOption) (*users.GetUserByLoginOrEmailOK, error)) *MockUsersClientService_GetUserByLoginOrEmailWithParams_Call {
	_c.Call.Return(run)
	return _c
}
